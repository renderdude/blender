OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.@PROJECT_VERSION_TWEAK@"dev"
# options: -DOSX -I/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/common -I/Users/Shared/build/ratbuild/rmanshare/RIS/pattern/osl -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl -o /Users/Shared/build/ratbuild/rmanshare/_built/osxSonoma_x86-64_clang15_external_release/osl/PxrPhasorNoise.osl/obj/PxrPhasorNoise.oso
shader PxrPhasorNoise	%meta{int,rfm_nodeid,1233478} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/texture"} %meta{string,rfh_classification,"Pattern/Texture"} %meta{string,help,"Phasor wave noise generator"} %meta{string,category,"generator"} 
param	struct Manifold	inputManifold			%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{0,0} %write{2147483647,-1} %struct{"Manifold"} %structfields{Q,QN,Qradius} %structfieldtypes{"pnf"} %structnfields{3}
param	point	inputManifold.Q	0 0 0		%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{22,22} %write{2147483647,-1} %mystruct{inputManifold} %mystructfield{0} %derivs
param	normal	inputManifold.QN	0 0 1		%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{23,23} %write{2147483647,-1} %mystruct{inputManifold} %mystructfield{1} %derivs
param	float	inputManifold.Qradius	0		%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{24,24} %write{2147483647,-1} %mystruct{inputManifold} %mystructfield{2} %derivs
param	int	dimensions	3		%meta{string,label,"Dimensions"} %meta{float,min,1} %meta{float,max,3} %meta{string,widget,"mapper"} %meta{string,options,"2D Flat:2|3D:3"} %meta{int,connectable,0} %meta{string,help,"The dimensionality of the noise determines how we sample the grid of phasor wave emitting kernels. Choose 2D Flat for ground planes or screen space effects."}  %read{33,104} %write{2147483647,-1} %derivs
param	int	alignMode	6		%meta{string,label,"Align Mode"} %meta{string,widget,"mapper"} %meta{string,options,"Linear X:0|Linear Y:1|Linear Z:2|Cylindrical X:3|Cylindrical Y:4|Cylindrical Z:5|Spherical:6|Kernel:7"} %meta{int,connectable,0} %meta{string,help,"When using the phaseAlign or directionAlign parameters the alignMode sets how the phasor alignment is oriented. For example, Cylindrical Z will create rings around the Z axis."}  %read{73,362} %write{2147483647,-1}
param	float	frequency	1		%meta{string,label,"Frequency"} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,100} %meta{float,slidercenter,1} %meta{string,help,"The main frequency of the phasor waves. This input is connectable."}  %read{45,295} %write{2147483647,-1} %derivs
param	float	frequencyFlatten	0		%meta{string,label,"Frequency Flatten"} %meta{float,min,0} %meta{float,max,1} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,help,"Flatten the frequency against the surface normal. In 3D mode it's likely that the phasor wave orientation will sometimes cut across the surface obliquely, leading to a lower perceived noise frequency. This slider tries to compensate by increasing frequency as the noise direction aligns with the surface normal."}  %read{447,455} %write{2147483647,-1} %derivs
param	int	relativeFrequencies	0		%meta{string,widget,"checkBox"} %meta{int,connectable,0} %meta{string,help,"Make direction jitter and kernels relative to the main frequency."}  %read{44,98} %write{2147483647,-1}
param	int	shapingMode	0		%meta{string,label,"Shaping Mode"} %meta{string,widget,"mapper"} %meta{string,options,"sine:0|cosine:1|sawtooth:2|pulse:3|pulseCentered:4|gaborSine:5|gaborCosine:6|spline:7"} %meta{int,connectable,0} %meta{string,page,"Shaping"} %meta{int,page_open,1} %meta{string,help,"shapingMode picks which profile we apply to the phasor result. Sine and cosine make smooth periodic waves. Pulse and pulse centered make solid step functions of the input width at the end or the center of the period, respectively. The Gabor modes represent the Gabor version of the noise with much less contrast in areas of wave interference. Spline mode lets you use a spline to control the shaping."}  %read{507,685} %write{2147483647,-1}
param	float	shapingSoften	0		%meta{string,label,"Shaping Soften"} %meta{float,min,0} %meta{float,max,100} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,10} %meta{int,connectable,0} %meta{string,page,"Shaping"} %meta{string,help,"Use this control to try to soften the sharp pointy areas where there is a lot of phasor wave interference. Increasing the softening will mix in the analytical average of the chosen shaping mode."}  %read{653,660} %write{2147483647,-1} %derivs
param	float	shapingPulseWidth	0.5		%meta{string,label,"Shaping Pulse Width"} %meta{float,min,0} %meta{float,max,1} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{string,conditionalVisOp,"or"} %meta{string,conditionalVisLeft,"conditionalVis1"} %meta{string,conditionalVisRight,"conditionalVis2"} %meta{string,conditionalVis1Op,"equalTo"} %meta{string,conditionalVis1Path,"../shapingMode"} %meta{string,conditionalVis1Value,"3"} %meta{string,conditionalVis2Op,"equalTo"} %meta{string,conditionalVis2Path,"../shapingMode"} %meta{string,conditionalVis2Value,"4"} %meta{string,page,"Shaping"} %meta{string,help,"In either pulse mode, this controls the width of the pulse. This input is connectable."}  %read{509,708} %write{2147483647,-1} %derivs
param	int	shapingSpline	4		%meta{string,label,"Shaping Spline"} %meta{string,widget,"floatRamp"} %meta{string,bsplineKnotTriple,"True"} %meta{int,connectable,0} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"../shapingMode"} %meta{string,conditionalVisValue,"7"} %meta{string,page,"Shaping"}  %read{519,650} %write{2147483647,-1} %derivs
param	float[4]	shapingSpline_Knots	0 0 1 1		%meta{string,widget,"null"} %meta{string,page,"Shaping"} %meta{int,connectable,0}  %read{523,644} %write{2147483647,-1} %derivs
param	float[4]	shapingSpline_Floats	0 0 1 1		%meta{string,widget,"null"} %meta{string,page,"Shaping"} %meta{int,connectable,0}  %read{527,646} %write{2147483647,-1} %derivs
param	string	shapingSpline_Interpolation	"linear"		%meta{string,widget,"null"} %meta{string,options,"linear|catmull-rom|bspline|constant"} %meta{string,page,"Shaping"} %meta{int,connectable,0}  %read{649,651} %write{2147483647,-1} %derivs
param	vector	direction	1 0 0		%meta{string,label,"Direction"} %meta{string,page,"Direction and Phase"} %meta{int,page_open,1} %meta{string,help,"Set the initial direction of the phasor waves. This input is connectable. If the direction changes quickly over the size of a phasor wave kernel, it can introduce warping artifacts. Try varying the direction more slowly or reducing the space between kernels."}  %read{94,94} %write{2147483647,-1} %derivs
param	float	directionAlign	0		%meta{string,label,"Direction Align"} %meta{float,min,0} %meta{float,max,1} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,page,"Direction and Phase"} %meta{string,help,"Align the direction of the phasor waves in the manner set by alignMode. Use this to create linear, cylindrical, or spherical patterns in the phasor wave noise."}  %read{165,183} %write{2147483647,-1} %derivs
param	float	directionFlow	0		%meta{float,min,0} %meta{float,max,1} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,page,"Direction and Phase"} %meta{string,help,"Orient the direction of the phasor waves to make flow lines along the direction vector."}  %read{185,192} %write{2147483647,-1} %derivs
param	float	directionJitter	0		%meta{string,label,"Direction Jitter"} %meta{float,min,0} %meta{float,max,1} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,page,"Direction and Phase"} %meta{string,help,"Jitters the direction of the phasor waves. This jitter is built-in so we can evaluate the noise at the phasor wave kernel and impulse centers, preventing any warping artifacts."}  %read{249,261} %write{2147483647,-1} %derivs
param	float	directionJitterFrequency	0.100000001		%meta{string,label,"Direction Jitter Frequency"} %meta{string,slider,"True"} %meta{float,slidermin,0.00100000005} %meta{float,slidermax,10} %meta{float,slidercenter,0.100000001} %meta{int,connectable,0} %meta{string,page,"Direction and Phase"} %meta{string,help,"The frequency of the directionJitter noise."}  %read{96,96} %write{2147483647,-1} %derivs
param	vector	directionJitterScale	1 1 1		%meta{string,label,"Direction Jitter Scale"} %meta{int,connectable,0} %meta{string,page,"Direction and Phase"} %meta{string,help,"The scale in XYZ of the directionJitter noise."}  %read{97,97} %write{2147483647,-1} %derivs
param	float	directionRotate	0		%meta{string,label,"Direction Rotate"} %meta{float,min,-180} %meta{float,max,180} %meta{string,slider,"True"} %meta{float,slidermin,-180} %meta{float,slidermax,180} %meta{int,connectable,0} %meta{string,page,"Direction and Phase"} %meta{string,help,"Use this to rotate the phasor noise direction around the surface normal. The direction of the phasor noise is counterintuitive, it defines the direction of the wave motion, which is orthogonal to the top of the wave crest. This control lets you swing the direction around the normal at any angle."}  %read{297,297} %write{2147483647,-1} %derivs
param	float	directionFlatten	0		%meta{string,label,"Direction Flatten"} %meta{float,min,0} %meta{float,max,1} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,page,"Direction and Phase"} %meta{string,help,"Flatten the direction against the surface normal. In 3D mode it's likely that the phasor wave orientation will sometimes cut across the surface obliquely, leading to a lower perceived noise frequency. This slider tries to compensate by pushing the direction towards the tangents."}  %read{381,389} %write{2147483647,-1} %derivs
param	float	phaseOffset	0		%meta{string,label,"Phase Offset"} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{string,page,"Direction and Phase"} %meta{string,help,"Offset the phase of the phasor waves. Plug in a time value to animate a flow effect."}  %read{459,459} %write{2147483647,-1} %derivs
param	float	phaseAlign	0		%meta{string,label,"Phase Align"} %meta{float,min,0} %meta{float,max,1} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,page,"Direction and Phase"} %meta{string,help,"Align the phase of the phasor waves in the manner set by alignMode. Use this to try to decrease the amount of perturbation in the noise result. If the wave direction is also varying or very different from the alignMode, aligning the phase may not help."}  %read{359,380} %write{2147483647,-1} %derivs
param	float	kernelFrequency	1		%meta{string,label,"Kernel Frequency"} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,100} %meta{float,slidercenter,1} %meta{int,connectable,0} %meta{string,page,"Kernel"} %meta{string,help,"The base frequency of the phasor wave kernel positions."}  %read{42,42} %write{2147483647,-1} %derivs
param	vector	kernelScale	1 1 1		%meta{string,label,"Kernel Scale"} %meta{int,connectable,0} %meta{string,page,"Kernel"} %meta{string,help,"The scale in XYZ of the phasor wave kernel positions."}  %read{43,43} %write{2147483647,-1} %derivs
param	int	kernelNeighbors	2		%meta{string,label,"Kernel Neighbors"} %meta{float,min,0} %meta{float,max,8} %meta{string,slider,"True"} %meta{float,slidermin,1} %meta{float,slidermax,4} %meta{int,connectable,0} %meta{string,page,"Kernel"} %meta{string,help,"How many near kernel neighbors to sample for phasor waves to convolve. In 2D, you access (2n+1)^2 neighboring kernels. In 3D, you access (2n+1)^3 neighboring kernels. With the default of 2, that is 25 kernels for 2D and 125 kernels for 3D! More kernels is more expensive, but gives potentially smoother results."}  %read{40,101} %write{2147483647,-1} %derivs
param	int	kernelImpulses	1		%meta{string,label,"Kernel Impulses"} %meta{float,min,1} %meta{float,max,16} %meta{string,slider,"True"} %meta{float,slidermin,1} %meta{float,slidermax,16} %meta{float,slidercenter,4} %meta{int,connectable,0} %meta{string,page,"Kernel"} %meta{string,help,"How many impulses to sample per phasor wave kernel. They are randomly scattered within each phasor wave kernel grid cell, but given a uniform distribution of phase offsets. More impulses is more expensive."}  %read{107,161} %write{2147483647,-1} %derivs
param	float	kernelFalloff	1		%meta{string,label,"Kernel Falloff"} %meta{float,min,0.00999999978} %meta{float,max,10} %meta{string,slider,"True"} %meta{float,slidermin,0.00999999978} %meta{float,slidermax,10} %meta{float,slidercenter,1} %meta{int,connectable,0} %meta{string,page,"Kernel"} %meta{string,help,"Each phasor wave kernel has a cosine shaped falloff from its center. This control is a power function on the falloff, decreasing will flatten the area of influence, increasing will sharpen the area of influence."}  %read{279,279} %write{2147483647,-1} %derivs
param	float	kernelError	0		%meta{string,label,"Kernel Error"} %meta{float,min,0} %meta{float,max,1} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,0.100000001} %meta{int,connectable,0} %meta{string,page,"Kernel"} %meta{string,help,"Set how much error and discontinuity is allowable in sampling the kernels. At zero we use a cosine falloff to make sure there are no discontinuities, but it's possible with low kernel neighbors and a stretched kernel scale to find areas filled with grey. Increasing above zero switches to a Gaussian falloff to fill in those areas, but can also introduce discontinuities along the kernel cell grid."}  %read{57,263} %write{2147483647,-1} %derivs
param	int	phasorOctaves	1		%meta{string,label,"Phasor Octaves"} %meta{float,min,1} %meta{float,max,6} %meta{string,slider,"True"} %meta{float,slidermin,1} %meta{float,slidermax,6} %meta{int,connectable,0} %meta{string,page,"Octaves"} %meta{int,page_open,1} %meta{string,help,"Increasing phasor octaves adds phasor wave impulses at different frequencies. Use this control to add texture to the noise result without affecting contrast."}  %read{110,293} %write{2147483647,-1} %derivs
param	float	phasorOctaveScale	0.75		%meta{string,label,"Phasor Octave Scale"} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,page,"Octaves"} %meta{string,help,"The frequency scale of each successive phasor octave."}  %read{478,478} %write{2147483647,-1} %derivs
param	float	phasorOctaveWeight	0.75		%meta{string,label,"Phasor Octave Weight"} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,page,"Octaves"} %meta{string,help,"The weight of each successive phasor octave."}  %read{481,481} %write{2147483647,-1} %derivs
param	float	phasorOctaveOffset	0		%meta{string,label,"Phasor Octave Offset"} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,page,"Octaves"} %meta{string,help,"The phase offset of each successive phasor octave."}  %read{479,479} %write{2147483647,-1} %derivs
param	float	phasorOctaveRotate	0		%meta{string,label,"Phasor Octave Rotate"} %meta{float,min,-180} %meta{float,max,180} %meta{string,slider,"True"} %meta{float,slidermin,-180} %meta{float,slidermax,180} %meta{int,connectable,0} %meta{string,page,"Octaves"} %meta{string,help,"The rotation around the surface normal of each sucessive phasor octave."}  %read{480,480} %write{2147483647,-1} %derivs
param	int	fractalHarmonicMode	0		%meta{string,label,"Fractal Harmonic Mode"} %meta{string,widget,"mapper"} %meta{string,options,"add:0|screen:1|mix:2|multiply:3|max:4|overandunder:5|nudge:6"} %meta{int,connectable,0} %meta{string,page,"Octaves"} %meta{string,help,"The combination mode of each fractal and harmonic octave. These octaves are combined in amplitude space after the phasor result has been evaluated."}  %read{500,771} %write{2147483647,-1}
param	int	fractalOctaves	1		%meta{string,label,"Fractal Octaves"} %meta{float,min,1} %meta{float,max,6} %meta{string,slider,"True"} %meta{float,slidermin,1} %meta{float,slidermax,6} %meta{int,connectable,0} %meta{string,page,"Octaves"} %meta{string,help,"Increasing fractal octaves computes phasor results at different frequencies which are then combined in amplitude space. These octaves will most likely not be aligned with eachother."}  %read{285,546} %write{2147483647,-1}
param	float	fractalOctaveScale	0.75		%meta{string,label,"Fractal Octave Scale"} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,page,"Octaves"} %meta{string,help,"The frequency scale of each successive fractal octave."}  %read{484,484} %write{2147483647,-1} %derivs
param	float	fractalOctaveWeight	0.75		%meta{string,label,"Fractal Octave Weight"} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,page,"Octaves"} %meta{string,help,"The weight of each successive fractal octave."}  %read{786,786} %write{2147483647,-1} %derivs
param	float	fractalOctaveOffset	0		%meta{string,label,"Fractal Octave Offset"} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,page,"Octaves"} %meta{string,help,"The phase offset of each successive fractal octave."}  %read{485,485} %write{2147483647,-1} %derivs
param	float	fractalOctaveRotate	0		%meta{string,label,"Fractal Octave Rotate"} %meta{float,min,-180} %meta{float,max,180} %meta{string,slider,"True"} %meta{float,slidermin,-180} %meta{float,slidermax,180} %meta{int,connectable,0} %meta{string,page,"Octaves"} %meta{string,help,"The rotation around the surface normal of each sucessive fractal octave."}  %read{486,486} %write{2147483647,-1} %derivs
param	int	harmonicOctaves	1		%meta{string,label,"Harmonic Octaves"} %meta{float,min,1} %meta{float,max,6} %meta{string,slider,"True"} %meta{float,slidermin,1} %meta{float,slidermax,6} %meta{int,connectable,0} %meta{string,page,"Octaves"} %meta{string,help,"Increasing harmonic octaves computes phasor results at exact 2x, 4x, etc. frequency which are then combined in amplitude space. These octaves will be aligned with eachother."}  %read{556,556} %write{2147483647,-1}
param	float	harmonicOctaveWeight	0.75		%meta{string,label,"Harmonic Octave Weight"} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,page,"Octaves"} %meta{string,help,"The weight of each successive harmonic octave."}  %read{782,782} %write{2147483647,-1} %derivs
param	float	harmonicOctaveOffset	0		%meta{string,label,"Harmonic Octave Offset"} %meta{string,slider,"True"} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{int,connectable,0} %meta{string,page,"Octaves"} %meta{string,help,"The phase offset of each successive harmonic octave."}  %read{783,783} %write{2147483647,-1} %derivs
param	float	filterScale	1		%meta{string,label,"Filter Scale"} %meta{float,min,0} %meta{float,max,100} %meta{string,slider,"True"} %meta{float,slidermin,0.00999999978} %meta{float,slidermax,10} %meta{float,slidercenter,1} %meta{int,connectable,0} %meta{string,page,"Advanced"} %meta{string,help,"The filtering in this noise is based on the final frequency and direction of each phasor wave impulse and is computed and applied to each of the fractal and harmonic octaves. We can't skip entering the kernel loop to save computation time, but the filtering helps a lot with convergence. Decrease the filterScale to recover detail at the cost of more iterations."}  %read{32,32} %write{2147483647,-1} %derivs
param	color	colorMin	0 0 0		%meta{string,page,"Adjust Output"} %meta{int,page_open,1} %meta{string,label,"Color Min"}  %read{793,793} %write{2147483647,-1}
param	color	colorMax	1 1 1		%meta{string,page,"Adjust Output"} %meta{string,label,"Color Max"}  %read{793,793} %write{2147483647,-1}
param	float	floatMin	0		%meta{string,page,"Adjust Output"} %meta{string,label,"Float Min"}  %read{792,792} %write{2147483647,-1} %derivs
param	float	floatMax	1		%meta{string,page,"Adjust Output"} %meta{string,label,"Float Max"}  %read{792,792} %write{2147483647,-1} %derivs
oparam	color	resultRGB	0 0 0		%read{2147483647,-1} %write{793,793}
oparam	float	resultF	0		%meta{string,page,""} %meta{string,widget,"null"}  %read{546,796} %write{497,792} %derivs
oparam	vector	resultNG	0 0 0		%meta{string,help,"Surface gradient from bump map.<br>resultNG (vector)"}  %read{794,794} %write{807,807}
global	point	P	%read{4,798} %write{2147483647,-1} %derivs
global	normal	N	%read{5,803} %write{2147483647,-1} %derivs
local	vector	___257_axis	%read{124,496} %write{124,496} %derivs
local	float	___257_cosang	%read{124,496} %write{124,496} %derivs
local	float	___257_sinang	%read{124,496} %write{124,496} %derivs
local	float	___257_cosang1	%read{124,496} %write{124,496} %derivs
local	float	___257_x	%read{124,496} %write{124,496} %derivs
local	float	___257_y	%read{124,496} %write{124,496} %derivs
local	float	___257_z	%read{124,496} %write{124,496} %derivs
local	matrix	___257_M	%read{124,496} %write{124,496} %derivs
local	float	___285_width	%read{546,788} %write{546,788} %derivs
local	float	___285_halfwidth	%read{546,788} %write{546,788} %derivs
local	float	___285_e1	%read{546,788} %write{546,788} %derivs
local	vector	___412_vec1	%read{15,16} %write{14,15} %derivs
local	float	___412_scale	%read{19,19} %write{18,18} %derivs
local	float	___497_k	%read{803,805} %write{802,802}
local	point	inputManifoldRw.Q	%read{9,25} %write{4,22} %mystruct{inputManifoldRw} %mystructfield{0} %derivs
local	normal	inputManifoldRw.QN	%read{11,26} %write{5,23} %mystruct{inputManifoldRw} %mystructfield{1} %derivs
local	float	inputManifoldRw.Qradius	%read{19,27} %write{6,24} %mystruct{inputManifoldRw} %mystructfield{2} %derivs
local	point	Q	%read{30,496} %write{25,67} %derivs
local	normal	QN	%read{124,496} %write{26,71} %derivs
local	float	Qradius	%read{28,496} %write{27,32} %derivs
local	vector	_dimensions	%read{41,496} %write{39,39} %derivs
local	vector	_neighbors	%read{122,496} %write{41,41} %derivs
local	vector	_kernelSize	%read{46,496} %write{43,46} %derivs
local	float	_kernelSizeMin	%read{50,66} %write{47,55} %derivs
local	int	___519_dim	%read{50,55} %write{49,55} %derivs
local	float	bandwidth	%read{65,496} %write{56,66} %derivs
local	point	Q0	%read{69,496} %write{68,69} %derivs
local	vector	_alignAxis	%read{124,496} %write{72,93} %derivs
local	vector	_direction	%read{124,496} %write{95,95} %derivs
local	vector	_directionJitterSize	%read{100,496} %write{97,100} %derivs
local	float[6]	filterWidth	%read{124,788} %write{115,788} %derivs
local	float	filterWidthCount	%read{546,788} %write{112,112} %derivs
local	vector[6]	phasorNoise	%read{124,788} %write{115,496} %derivs
local	int	___530_i	%read{115,120} %write{114,120} %derivs
local	float	___532_i	%read{124,496} %write{123,496} %derivs
local	float	___534_j	%read{124,496} %write{124,496} %derivs
local	float	___536_k	%read{124,496} %write{124,496} %derivs
local	vector	___537_Qkernel0	%read{124,496} %write{124,496} %derivs
local	vector	___537_dirKernel	%read{124,496} %write{124,496} %derivs
local	float	___537_phiKernel	%read{124,496} %write{124,496} %derivs
local	vector	___537_Qkernel	%read{124,496} %write{124,496} %derivs
local	float	___538_impulse	%read{124,496} %write{124,496} %derivs
local	vector	___539_Qseed	%read{124,496} %write{124,496} %derivs
local	vector	___539_Qimpulse	%read{124,496} %write{124,496} %derivs
local	vector	___539_x	%read{124,496} %write{124,496} %derivs
local	float	___539_phiImpulse	%read{124,496} %write{124,496} %derivs
local	vector	___539_dirImpulse	%read{124,496} %write{124,496} %derivs
local	vector	___541_dirAlign	%read{124,496} %write{124,496} %derivs
local	vector	___547_flowDir	%read{124,496} %write{124,496} %derivs
local	float	___547_flowDot	%read{124,496} %write{124,496} %derivs
local	float	___547_flotAngle	%read{124,496} %write{124,496} %derivs
local	float	___547_flowAmount	%read{124,496} %write{124,496} %derivs
local	vector	___547_flowAxis	%read{124,496} %write{124,496} %derivs
local	vector	___548_Qnoise	%read{124,496} %write{124,496} %derivs
local	float	___548_jitx	%read{124,496} %write{124,496} %derivs
local	float	___548_jity	%read{124,496} %write{124,496} %derivs
local	float	___548_jitz	%read{124,496} %write{124,496} %derivs
local	vector	___548_jit	%read{124,496} %write{124,496} %derivs
local	float	___539_a	%read{124,496} %write{124,496} %derivs
local	float	___539_s	%read{124,496} %write{124,496} %derivs
local	float	___539_c	%read{124,496} %write{124,496} %derivs
local	float	___539_fOctScale	%read{124,496} %write{124,496} %derivs
local	float	___539_fOctOffset	%read{124,496} %write{124,496} %derivs
local	float	___539_fOctRotate	%read{124,496} %write{124,496} %derivs
local	int	___551_fOct	%read{124,496} %write{124,496} %derivs
local	float	___552_pOctScale	%read{124,496} %write{124,496} %derivs
local	float	___552_pOctOffset	%read{124,496} %write{124,496} %derivs
local	float	___552_pOctRotate	%read{124,496} %write{124,496} %derivs
local	float	___552_pOctWeight	%read{124,496} %write{124,496} %derivs
local	int	___553_pOct	%read{124,496} %write{124,496}
local	float	___554_f	%read{124,496} %write{124,496} %derivs
local	float	___554_r	%read{124,496} %write{124,496} %derivs
local	vector	___554_dir	%read{124,496} %write{124,496} %derivs
local	float	___554_phi	%read{124,496} %write{124,496} %derivs
local	float	___556_phiAlign	%read{124,496} %write{124,496} %derivs
local	float	___558_flattenDot	%read{124,496} %write{124,496} %derivs
local	float	___558_flattenAngle	%read{124,496} %write{124,496} %derivs
local	float	___558_flattenAmount	%read{124,496} %write{124,496} %derivs
local	vector	___558_flattenAxis	%read{124,496} %write{124,496} %derivs
local	float	___554_dotQNdir	%read{124,496} %write{124,496} %derivs
local	float	___559_fFlattenDot	%read{124,496} %write{124,496} %derivs
local	float	___559_fFlattenDivisor	%read{124,496} %write{124,496} %derivs
local	float	tmpVal	%read{546,788} %write{498,788} %derivs
local	float	sum	%read{546,791} %write{499,788} %derivs
local	float	average	%read{519,788} %write{506,542} %derivs
local	float	___562_splineWidth	%read{519,542} %write{516,539} %derivs
local	int	___563_i	%read{519,539} %write{518,539} %derivs
local	float	fOctWeight	%read{546,788} %write{543,788} %derivs
local	int	___565_fOct	%read{546,788} %write{545,788} %derivs
local	float	___566_hOctScale	%read{546,788} %write{546,788} %derivs
local	float	___566_hOctWeight	%read{546,788} %write{546,788} %derivs
local	float	___566_hOctOffset	%read{546,788} %write{546,788} %derivs
local	int	___567_hOct	%read{546,788} %write{546,788}
local	float	___568_weight	%read{546,788} %write{546,788} %derivs
local	vector	___568_pn	%read{546,788} %write{546,788} %derivs
local	float	___568_phase	%read{546,788} %write{546,788} %derivs
local	float	___568_phaseu	%read{546,788} %write{546,788} %derivs
local	float	___568_filterwidth	%read{546,788} %write{546,788} %derivs
local	float	___575_intensity	%read{546,788} %write{546,788} %derivs
local	float	___575_samples	%read{546,788} %write{546,788} %derivs
local	float	___576_intensity	%read{546,788} %write{546,788} %derivs
local	float	___576_samples	%read{546,788} %write{546,788} %derivs
local	float	___577_x	%read{546,788} %write{546,788} %derivs
local	float[18]	___577_currentFloat	%read{546,788} %write{546,788} %derivs
local	float[18]	___577_currentPositions	%read{546,788} %write{546,788} %derivs
local	int	___578_i	%read{546,788} %write{546,788} %derivs
local	float	___581_intensity	%read{546,788} %write{546,788} %derivs
local	float	___583_tmp1	%read{546,788} %write{546,788} %derivs
local	float	___583_tmp2	%read{546,788} %write{546,788} %derivs
local	normal	___592_bumpN	%read{802,804} %write{800,800}
temp	int	$tmp1	%read{1,1} %write{0,0}
temp	int	$tmp2	%read{2,2} %write{1,1}
const	int	$const1	0		%read{1,735} %write{2147483647,-1}
const	string	$const2	"Manifold_Construct"		%read{3,3} %write{2147483647,-1}
const	float	$const3	0		%read{6,789} %write{2147483647,-1}
const	string	$const4	"object"		%read{9,15} %write{2147483647,-1}
const	string	$const5	"Manifold_Transform"		%read{7,8} %write{2147483647,-1}
const	string	$const6	"common"		%read{9,15} %write{2147483647,-1}
temp	normal	$tmp3	%read{12,12} %write{11,11} %derivs
const	vector	$const7	1 1 1		%read{14,93} %write{2147483647,-1}
temp	float	$tmp4	%read{18,18} %write{16,16} %derivs
temp	float	$tmp5	%read{18,18} %write{17,17} %derivs
const	float	$const8	3		%read{17,17} %write{2147483647,-1}
const	string	$const9	"Manifold_Copy"		%read{21,21} %write{2147483647,-1}
temp	int	$tmp6	%read{29,29} %write{28,28}
temp	float	$tmp7	%read{31,31} %write{30,30} %derivs
temp	int	$tmp8	%read{34,34} %write{33,33} %derivs
temp	float	$tmp9	%read{39,39} %write{34,34} %derivs
const	int	$const10	1		%read{35,788} %write{2147483647,-1}
temp	int	$tmp10	%read{36,36} %write{35,35} %derivs
temp	float	$tmp11	%read{39,39} %write{36,36} %derivs
const	int	$const11	2		%read{37,748} %write{2147483647,-1}
temp	int	$tmp12	%read{38,38} %write{37,37} %derivs
temp	float	$tmp13	%read{39,39} %write{38,38} %derivs
temp	vector	$tmp14	%read{41,41} %write{40,40} %derivs
temp	vector	$tmp15	%read{43,43} %write{42,42} %derivs
temp	vector	$tmp16	%read{46,46} %write{45,45} %derivs
temp	int	$tmp17	%read{50,55} %write{50,55}
temp	int	$tmp18	%read{48,55} %write{49,55}
temp	float	$tmp19	%read{50,55} %write{50,55} %derivs
temp	int	$tmp20	%read{2147483647,-1} %write{50,55}
const	float	$const12	1		%read{56,780} %write{2147483647,-1}
temp	int	$tmp21	%read{58,58} %write{57,57}
temp	float	$tmp22	%read{60,60} %write{59,59} %derivs
temp	float	$tmp23	%read{61,61} %write{60,60} %derivs
const	float	$const13	3.14159274		%read{61,275} %write{2147483647,-1}
temp	float	$tmp24	%read{62,62} %write{61,61} %derivs
temp	float	$tmp25	%read{65,65} %write{64,64} %derivs
temp	float	$tmp26	%read{64,64} %write{63,63} %derivs
temp	float	$tmp27	%read{66,66} %write{65,65} %derivs
temp	vector	$tmp28	%read{71,71} %write{70,70} %derivs
temp	int	$tmp29	%read{74,74} %write{73,73}
const	vector	$const14	1 0 0		%read{75,170} %write{2147483647,-1}
temp	int	$tmp30	%read{77,77} %write{76,76}
const	vector	$const15	0 1 0		%read{78,173} %write{2147483647,-1}
temp	int	$tmp31	%read{80,80} %write{79,79}
const	vector	$const16	0 0 1		%read{81,176} %write{2147483647,-1}
const	int	$const17	3		%read{82,752} %write{2147483647,-1}
temp	int	$tmp32	%read{83,83} %write{82,82}
const	vector	$const18	0 1 1		%read{84,84} %write{2147483647,-1}
const	int	$const19	4		%read{85,759} %write{2147483647,-1}
temp	int	$tmp33	%read{86,86} %write{85,85}
const	vector	$const20	1 0 1		%read{87,87} %write{2147483647,-1}
const	int	$const21	5		%read{88,764} %write{2147483647,-1}
temp	int	$tmp34	%read{89,89} %write{88,88}
const	vector	$const22	1 1 0		%read{90,90} %write{2147483647,-1}
const	int	$const23	6		%read{91,771} %write{2147483647,-1}
temp	int	$tmp35	%read{92,92} %write{91,91}
temp	vector	$tmp36	%read{95,95} %write{94,94} %derivs
temp	vector	$tmp37	%read{97,97} %write{96,96} %derivs
temp	vector	$tmp38	%read{100,100} %write{99,99} %derivs
temp	float	$tmp39	%read{109,109} %write{106,106} %derivs
temp	float	$tmp40	%read{106,106} %write{103,103} %derivs
const	float	$const24	2		%read{102,781} %write{2147483647,-1}
temp	float	$tmp41	%read{103,103} %write{102,102} %derivs
temp	float	$tmp42	%read{102,102} %write{101,101} %derivs
temp	float	$tmp43	%read{106,106} %write{105,105} %derivs
temp	float	$tmp44	%read{105,105} %write{104,104} %derivs
temp	float	$tmp45	%read{109,109} %write{108,108} %derivs
temp	float	$tmp46	%read{108,108} %write{107,107} %derivs
temp	float	$tmp47	%read{112,112} %write{109,109} %derivs
temp	float	$tmp48	%read{112,112} %write{111,111} %derivs
temp	float	$tmp49	%read{111,111} %write{110,110} %derivs
temp	int	$tmp50	%read{115,120} %write{115,120}
temp	int	$tmp51	%read{113,120} %write{114,120}
const	vector	$const25	0 0 0		%read{117,167} %write{2147483647,-1}
temp	int	$tmp53	%read{2147483647,-1} %write{115,120}
temp	float	$tmp54	%read{123,496} %write{122,496} %derivs
temp	float	$tmp55	%read{124,496} %write{124,496}
temp	int	$tmp56	%read{124,496} %write{124,496}
temp	int	$tmp57	%read{121,496} %write{122,496}
temp	float	$tmp58	%read{124,496} %write{124,496} %derivs
temp	float	$tmp59	%read{124,496} %write{124,496}
temp	int	$tmp60	%read{124,496} %write{124,496}
temp	int	$tmp61	%read{124,496} %write{124,496}
temp	float	$tmp62	%read{124,496} %write{124,496} %derivs
temp	float	$tmp63	%read{124,496} %write{124,496}
temp	int	$tmp64	%read{124,496} %write{124,496}
temp	int	$tmp65	%read{124,496} %write{124,496}
temp	vector	$tmp66	%read{124,496} %write{124,496} %derivs
temp	int	$tmp67	%read{124,496} %write{124,496}
temp	int	$tmp68	%read{124,496} %write{124,496}
temp	vector	$tmp69	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp70	%read{124,496} %write{124,496} %derivs
const	vector	$const26	123.456703 867.530884 5551.21191		%read{150,252} %write{2147483647,-1}
temp	vector	$tmp72	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp73	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp74	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp75	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp76	%read{124,496} %write{124,496} %derivs
temp	int	$tmp77	%read{124,496} %write{124,496}
temp	float	$tmp78	%read{124,496} %write{124,496} %derivs
temp	float	$tmp79	%read{124,496} %write{124,496} %derivs
temp	int	$tmp80	%read{124,496} %write{124,496}
temp	int	$tmp81	%read{124,496} %write{124,496}
temp	int	$tmp82	%read{124,496} %write{124,496}
temp	int	$tmp83	%read{124,496} %write{124,496}
const	int	$const27	7		%read{177,625} %write{2147483647,-1}
temp	int	$tmp84	%read{124,496} %write{124,496}
temp	point	$tmp85	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp86	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp87	%read{124,496} %write{124,496} %derivs
temp	int	$tmp88	%read{124,496} %write{124,496}
temp	vector	$tmp89	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp90	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp91	%read{124,496} %write{124,496} %derivs
temp	point	$tmp92	%read{124,496} %write{124,496} %derivs
temp	float	$tmp93	%read{124,496} %write{124,496} %derivs
const	point	$const28	0 0 0		%read{199,445} %write{2147483647,-1}
temp	point	$tmp95	%read{124,496} %write{124,496} %derivs
const	string	$const29	"rotate"		%read{198,395} %write{2147483647,-1}
temp	vector	$tmp96	%read{124,496} %write{124,496} %derivs
temp	float	$tmp97	%read{124,496} %write{124,496} %derivs
temp	float	$tmp98	%read{124,496} %write{124,496} %derivs
temp	float	$tmp99	%read{124,496} %write{124,496} %derivs
temp	float	$tmp100	%read{124,496} %write{124,496} %derivs
temp	float	$tmp101	%read{124,496} %write{124,496} %derivs
temp	float	$tmp102	%read{124,496} %write{124,496} %derivs
temp	float	$tmp103	%read{124,496} %write{124,496} %derivs
temp	float	$tmp104	%read{124,496} %write{124,496} %derivs
temp	float	$tmp105	%read{124,496} %write{124,496} %derivs
temp	float	$tmp106	%read{124,496} %write{124,496} %derivs
temp	float	$tmp107	%read{124,496} %write{124,496} %derivs
temp	float	$tmp108	%read{124,496} %write{124,496} %derivs
temp	float	$tmp109	%read{124,496} %write{124,496} %derivs
temp	float	$tmp110	%read{124,496} %write{124,496} %derivs
temp	float	$tmp111	%read{124,496} %write{124,496} %derivs
temp	float	$tmp112	%read{124,496} %write{124,496} %derivs
temp	float	$tmp113	%read{124,496} %write{124,496} %derivs
temp	float	$tmp114	%read{124,496} %write{124,496} %derivs
temp	float	$tmp115	%read{124,496} %write{124,496} %derivs
temp	float	$tmp116	%read{124,496} %write{124,496} %derivs
temp	float	$tmp117	%read{124,496} %write{124,496} %derivs
temp	float	$tmp118	%read{124,496} %write{124,496} %derivs
temp	float	$tmp119	%read{124,496} %write{124,496} %derivs
temp	float	$tmp120	%read{124,496} %write{124,496} %derivs
temp	float	$tmp121	%read{124,496} %write{124,496} %derivs
temp	float	$tmp122	%read{124,496} %write{124,496} %derivs
temp	float	$tmp123	%read{124,496} %write{124,496} %derivs
temp	float	$tmp124	%read{124,496} %write{124,496} %derivs
temp	float	$tmp125	%read{124,496} %write{124,496} %derivs
temp	float	$tmp126	%read{124,496} %write{124,496} %derivs
temp	float	$tmp127	%read{124,496} %write{124,496} %derivs
temp	float	$tmp128	%read{124,496} %write{124,496} %derivs
temp	float	$tmp129	%read{124,496} %write{124,496} %derivs
temp	float	$tmp130	%read{124,496} %write{124,496} %derivs
temp	float	$tmp131	%read{124,496} %write{124,496} %derivs
temp	float	$tmp132	%read{124,496} %write{124,496} %derivs
temp	float	$tmp133	%read{124,496} %write{124,496} %derivs
temp	float	$tmp134	%read{124,496} %write{124,496} %derivs
temp	float	$tmp135	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp136	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp137	%read{124,496} %write{124,496} %derivs
temp	int	$tmp138	%read{124,496} %write{124,496}
temp	vector	$tmp140	%read{124,496} %write{124,496} %derivs
const	vector	$const30	1234.56702 86.7530899 555.121216		%read{254,254} %write{2147483647,-1}
temp	vector	$tmp142	%read{124,496} %write{124,496} %derivs
const	vector	$const31	12345.6699 8675.30859 55.5121193		%read{256,256} %write{2147483647,-1}
temp	vector	$tmp144	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp145	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp146	%read{124,496} %write{124,496} %derivs
temp	int	$tmp147	%read{124,496} %write{124,496}
const	float	$const32	-3.14159274		%read{265,265} %write{2147483647,-1}
temp	float	$tmp148	%read{124,496} %write{124,496} %derivs
temp	float	$tmp149	%read{124,496} %write{124,496} %derivs
temp	float	$tmp150	%read{124,496} %write{124,496} %derivs
temp	float	$tmp151	%read{124,496} %write{124,496} %derivs
temp	float	$tmp152	%read{124,496} %write{124,496} %derivs
temp	float	$tmp153	%read{124,496} %write{124,496} %derivs
temp	float	$tmp154	%read{124,496} %write{124,496} %derivs
temp	float	$tmp155	%read{124,496} %write{124,496} %derivs
const	string	$const33	"clamp"		%read{272,272} %write{2147483647,-1}
temp	float	$tmp156	%read{124,496} %write{124,496} %derivs
temp	float	$tmp157	%read{124,496} %write{124,496} %derivs
const	float	$const34	0.5		%read{277,796} %write{2147483647,-1}
temp	float	$tmp158	%read{124,496} %write{124,496} %derivs
temp	int	$tmp159	%read{124,496} %write{124,496}
temp	int	$tmp160	%read{124,496} %write{124,496}
temp	int	$tmp161	%read{124,496} %write{124,496}
temp	int	$tmp162	%read{124,496} %write{124,496}
temp	float	$tmp163	%read{124,496} %write{124,496} %derivs
temp	float	$tmp164	%read{124,496} %write{124,496} %derivs
temp	int	$tmp165	%read{124,496} %write{124,496}
temp	point	$tmp166	%read{124,496} %write{124,496} %derivs
temp	float	$tmp167	%read{124,496} %write{124,496} %derivs
const	string	$const35	"radians"		%read{303,303} %write{2147483647,-1}
const	float	$const36	0.0174532924		%read{304,304} %write{2147483647,-1}
temp	point	$tmp169	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp170	%read{124,496} %write{124,496} %derivs
temp	float	$tmp171	%read{124,496} %write{124,496} %derivs
temp	float	$tmp172	%read{124,496} %write{124,496} %derivs
temp	float	$tmp173	%read{124,496} %write{124,496} %derivs
temp	float	$tmp174	%read{124,496} %write{124,496} %derivs
temp	float	$tmp175	%read{124,496} %write{124,496} %derivs
temp	float	$tmp176	%read{124,496} %write{124,496} %derivs
temp	float	$tmp177	%read{124,496} %write{124,496} %derivs
temp	float	$tmp178	%read{124,496} %write{124,496} %derivs
temp	float	$tmp179	%read{124,496} %write{124,496} %derivs
temp	float	$tmp180	%read{124,496} %write{124,496} %derivs
temp	float	$tmp181	%read{124,496} %write{124,496} %derivs
temp	float	$tmp182	%read{124,496} %write{124,496} %derivs
temp	float	$tmp183	%read{124,496} %write{124,496} %derivs
temp	float	$tmp184	%read{124,496} %write{124,496} %derivs
temp	float	$tmp185	%read{124,496} %write{124,496} %derivs
temp	float	$tmp186	%read{124,496} %write{124,496} %derivs
temp	float	$tmp187	%read{124,496} %write{124,496} %derivs
temp	float	$tmp188	%read{124,496} %write{124,496} %derivs
temp	float	$tmp189	%read{124,496} %write{124,496} %derivs
temp	float	$tmp190	%read{124,496} %write{124,496} %derivs
temp	float	$tmp191	%read{124,496} %write{124,496} %derivs
temp	float	$tmp192	%read{124,496} %write{124,496} %derivs
temp	float	$tmp193	%read{124,496} %write{124,496} %derivs
temp	float	$tmp194	%read{124,496} %write{124,496} %derivs
temp	float	$tmp195	%read{124,496} %write{124,496} %derivs
temp	float	$tmp196	%read{124,496} %write{124,496} %derivs
temp	float	$tmp197	%read{124,496} %write{124,496} %derivs
temp	float	$tmp198	%read{124,496} %write{124,496} %derivs
temp	float	$tmp199	%read{124,496} %write{124,496} %derivs
temp	float	$tmp200	%read{124,496} %write{124,496} %derivs
temp	float	$tmp201	%read{124,496} %write{124,496} %derivs
temp	float	$tmp202	%read{124,496} %write{124,496} %derivs
temp	float	$tmp203	%read{124,496} %write{124,496} %derivs
temp	float	$tmp204	%read{124,496} %write{124,496} %derivs
temp	float	$tmp205	%read{124,496} %write{124,496} %derivs
temp	float	$tmp206	%read{124,496} %write{124,496} %derivs
temp	float	$tmp207	%read{124,496} %write{124,496} %derivs
temp	float	$tmp208	%read{124,496} %write{124,496} %derivs
temp	float	$tmp209	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp210	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp211	%read{124,496} %write{124,496} %derivs
temp	float	$tmp212	%read{124,496} %write{124,496} %derivs
temp	int	$tmp213	%read{124,496} %write{124,496}
temp	int	$tmp214	%read{124,496} %write{124,496}
temp	float	$tmp215	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp216	%read{124,496} %write{124,496} %derivs
temp	float	$tmp217	%read{124,496} %write{124,496} %derivs
const	string	$const37	"mod"		%read{367,569} %write{2147483647,-1}
temp	float	$tmp218	%read{124,496} %write{124,496} %derivs
temp	float	$tmp219	%read{124,496} %write{124,496} %derivs
temp	float	$tmp220	%read{124,496} %write{124,496} %derivs
temp	float	$tmp221	%read{124,496} %write{124,496}
temp	int	$tmp222	%read{124,496} %write{124,496}
temp	float	$tmp223	%read{124,496} %write{124,496}
temp	int	$tmp224	%read{124,496} %write{124,496}
temp	int	$tmp225	%read{124,496} %write{124,496}
temp	float	$tmp226	%read{124,496} %write{124,496} %derivs
temp	float	$tmp227	%read{124,496} %write{124,496} %derivs
temp	float	$tmp228	%read{124,496} %write{124,496} %derivs
temp	float	$tmp229	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp230	%read{124,496} %write{124,496} %derivs
temp	point	$tmp231	%read{124,496} %write{124,496} %derivs
temp	float	$tmp232	%read{124,496} %write{124,496} %derivs
temp	point	$tmp234	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp235	%read{124,496} %write{124,496} %derivs
temp	float	$tmp236	%read{124,496} %write{124,496} %derivs
temp	float	$tmp237	%read{124,496} %write{124,496} %derivs
temp	float	$tmp238	%read{124,496} %write{124,496} %derivs
temp	float	$tmp239	%read{124,496} %write{124,496} %derivs
temp	float	$tmp240	%read{124,496} %write{124,496} %derivs
temp	float	$tmp241	%read{124,496} %write{124,496} %derivs
temp	float	$tmp242	%read{124,496} %write{124,496} %derivs
temp	float	$tmp243	%read{124,496} %write{124,496} %derivs
temp	float	$tmp244	%read{124,496} %write{124,496} %derivs
temp	float	$tmp245	%read{124,496} %write{124,496} %derivs
temp	float	$tmp246	%read{124,496} %write{124,496} %derivs
temp	float	$tmp247	%read{124,496} %write{124,496} %derivs
temp	float	$tmp248	%read{124,496} %write{124,496} %derivs
temp	float	$tmp249	%read{124,496} %write{124,496} %derivs
temp	float	$tmp250	%read{124,496} %write{124,496} %derivs
temp	float	$tmp251	%read{124,496} %write{124,496} %derivs
temp	float	$tmp252	%read{124,496} %write{124,496} %derivs
temp	float	$tmp253	%read{124,496} %write{124,496} %derivs
temp	float	$tmp254	%read{124,496} %write{124,496} %derivs
temp	float	$tmp255	%read{124,496} %write{124,496} %derivs
temp	float	$tmp256	%read{124,496} %write{124,496} %derivs
temp	float	$tmp257	%read{124,496} %write{124,496} %derivs
temp	float	$tmp258	%read{124,496} %write{124,496} %derivs
temp	float	$tmp259	%read{124,496} %write{124,496} %derivs
temp	float	$tmp260	%read{124,496} %write{124,496} %derivs
temp	float	$tmp261	%read{124,496} %write{124,496} %derivs
temp	float	$tmp262	%read{124,496} %write{124,496} %derivs
temp	float	$tmp263	%read{124,496} %write{124,496} %derivs
temp	float	$tmp264	%read{124,496} %write{124,496} %derivs
temp	float	$tmp265	%read{124,496} %write{124,496} %derivs
temp	float	$tmp266	%read{124,496} %write{124,496} %derivs
temp	float	$tmp267	%read{124,496} %write{124,496} %derivs
temp	float	$tmp268	%read{124,496} %write{124,496} %derivs
temp	float	$tmp269	%read{124,496} %write{124,496} %derivs
temp	float	$tmp270	%read{124,496} %write{124,496} %derivs
temp	float	$tmp271	%read{124,496} %write{124,496} %derivs
temp	float	$tmp272	%read{124,496} %write{124,496} %derivs
temp	float	$tmp273	%read{124,496} %write{124,496} %derivs
temp	float	$tmp274	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp275	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp276	%read{124,496} %write{124,496} %derivs
temp	int	$tmp277	%read{124,496} %write{124,496}
const	float	$const38	9.99999975e-06		%read{453,453} %write{2147483647,-1}
temp	float	$tmp278	%read{124,496} %write{124,496} %derivs
temp	float	$tmp279	%read{124,496} %write{124,496} %derivs
temp	float	$tmp280	%read{124,496} %write{124,496} %derivs
temp	float	$tmp281	%read{124,496} %write{124,496} %derivs
const	float	$const39	6.28318548		%read{460,566} %write{2147483647,-1}
temp	float	$tmp282	%read{124,496} %write{124,496} %derivs
temp	float	$tmp283	%read{124,496} %write{124,496} %derivs
temp	float	$tmp284	%read{124,496} %write{124,496} %derivs
temp	float	$tmp285	%read{124,496} %write{124,496} %derivs
temp	float	$tmp286	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp287	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp288	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp289	%read{124,496} %write{124,496} %derivs
temp	float	$tmp290	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp291	%read{124,496} %write{124,496} %derivs
temp	vector	$tmp292	%read{124,496} %write{124,496} %derivs
temp	float	$tmp293	%read{124,496} %write{124,496} %derivs
temp	float	$tmp294	%read{124,496} %write{124,496} %derivs
temp	float	$tmp295	%read{124,496} %write{124,496} %derivs
temp	float	$tmp296	%read{124,496} %write{124,496} %derivs
temp	float	$tmp297	%read{124,496} %write{124,496} %derivs
temp	float	$tmp298	%read{124,496} %write{124,496} %derivs
temp	float	$tmp299	%read{124,496} %write{124,496} %derivs
temp	float	$tmp300	%read{124,496} %write{124,496} %derivs
temp	int	$tmp301	%read{2147483647,-1} %write{124,496}
temp	int	$tmp302	%read{2147483647,-1} %write{124,496}
temp	float	$tmp303	%read{2147483647,-1} %write{124,496}
temp	float	$tmp304	%read{2147483647,-1} %write{124,496}
temp	float	$tmp305	%read{2147483647,-1} %write{124,496}
temp	float	$tmp306	%read{2147483647,-1} %write{124,496}
temp	int	$tmp307	%read{501,501} %write{500,500}
temp	int	$tmp308	%read{504,504} %write{503,503}
temp	int	$tmp309	%read{508,508} %write{507,507}
temp	int	$tmp310	%read{511,511} %write{510,510}
temp	int	$tmp311	%read{514,514} %write{513,513}
temp	int	$tmp312	%read{519,539} %write{519,539}
temp	int	$tmp313	%read{519,539} %write{519,539}
temp	int	$tmp314	%read{517,539} %write{518,539}
temp	int	$tmp315	%read{519,539} %write{519,539} %derivs
temp	float	$tmp316	%read{519,539} %write{519,539} %derivs
temp	float	$tmp317	%read{519,539} %write{519,539} %derivs
temp	float	$tmp318	%read{519,539} %write{519,539} %derivs
temp	int	$tmp319	%read{519,539} %write{519,539} %derivs
temp	float	$tmp320	%read{519,539} %write{519,539} %derivs
temp	float	$tmp321	%read{519,539} %write{519,539} %derivs
temp	float	$tmp322	%read{519,539} %write{519,539} %derivs
temp	float	$tmp323	%read{519,539} %write{519,539} %derivs
temp	float	$tmp324	%read{519,539} %write{519,539} %derivs
temp	int	$tmp325	%read{519,539} %write{519,539} %derivs
temp	float	$tmp326	%read{519,539} %write{519,539} %derivs
temp	float	$tmp327	%read{519,539} %write{519,539} %derivs
temp	float	$tmp328	%read{519,539} %write{519,539} %derivs
temp	int	$tmp329	%read{2147483647,-1} %write{519,539}
temp	int	$tmp330	%read{541,541} %write{540,540}
temp	int	$tmp331	%read{546,788} %write{546,788}
temp	int	$tmp332	%read{544,788} %write{545,788}
temp	float	$tmp333	%read{546,788} %write{546,788} %derivs
temp	float	$tmp334	%read{546,788} %write{546,788} %derivs
temp	int	$tmp335	%read{546,788} %write{546,788}
temp	int	$tmp336	%read{546,788} %write{546,788}
temp	float	$tmp337	%read{546,788} %write{546,788} %derivs
temp	float	$tmp338	%read{546,788} %write{546,788} %derivs
temp	float	$tmp339	%read{546,788} %write{546,788} %derivs
temp	float	$tmp340	%read{546,788} %write{546,788} %derivs
temp	float	$tmp341	%read{546,788} %write{546,788} %derivs
temp	float	$tmp342	%read{546,788} %write{546,788} %derivs
temp	float	$tmp343	%read{546,788} %write{546,788} %derivs
temp	float	$tmp344	%read{546,788} %write{546,788} %derivs
temp	float	$tmp345	%read{546,788} %write{546,788} %derivs
temp	float	$tmp346	%read{546,788} %write{546,788} %derivs
temp	float	$tmp347	%read{546,788} %write{546,788} %derivs
temp	float	$tmp348	%read{546,788} %write{546,788} %derivs
temp	int	$tmp349	%read{546,788} %write{546,788}
temp	int	$tmp350	%read{546,788} %write{546,788}
temp	float	$tmp351	%read{546,788} %write{546,788} %derivs
temp	float	$tmp352	%read{546,788} %write{546,788} %derivs
temp	int	$tmp353	%read{546,788} %write{546,788}
temp	float	$tmp354	%read{546,788} %write{546,788} %derivs
temp	float	$tmp355	%read{546,788} %write{546,788} %derivs
temp	int	$tmp356	%read{546,788} %write{546,788}
temp	int	$tmp357	%read{546,788} %write{546,788}
temp	int	$tmp358	%read{546,788} %write{546,788}
temp	int	$tmp359	%read{546,788} %write{546,788}
temp	vector	$tmp360	%read{546,788} %write{546,788} %derivs
temp	float	$tmp361	%read{546,788} %write{546,788} %derivs
temp	float	$tmp362	%read{546,788} %write{546,788} %derivs
temp	float	$tmp363	%read{546,788} %write{546,788} %derivs
temp	float	$tmp364	%read{546,788} %write{546,788} %derivs
temp	float	$tmp365	%read{546,788} %write{546,788} %derivs
temp	float	$tmp366	%read{546,788} %write{546,788} %derivs
temp	float	$tmp367	%read{546,788} %write{546,788} %derivs
temp	float	$tmp368	%read{546,788} %write{546,788} %derivs
temp	int	$tmp369	%read{546,788} %write{546,788}
temp	vector	$tmp370	%read{546,788} %write{546,788} %derivs
temp	float	$tmp371	%read{546,788} %write{546,788} %derivs
temp	float	$tmp372	%read{546,788} %write{546,788} %derivs
temp	float	$tmp373	%read{546,788} %write{546,788} %derivs
temp	float	$tmp374	%read{546,788} %write{546,788} %derivs
temp	float	$tmp375	%read{546,788} %write{546,788} %derivs
temp	float	$tmp376	%read{546,788} %write{546,788} %derivs
temp	float	$tmp377	%read{546,788} %write{546,788} %derivs
temp	float	$tmp378	%read{546,788} %write{546,788} %derivs
temp	int	$tmp379	%read{546,788} %write{546,788}
temp	float	$tmp380	%read{546,788} %write{546,788} %derivs
temp	float	$tmp381	%read{546,788} %write{546,788} %derivs
const	int	$const40	16		%read{634,634} %write{2147483647,-1}
temp	int	$tmp382	%read{546,788} %write{546,788}
temp	int	$tmp383	%read{546,788} %write{546,788}
temp	float	$tmp384	%read{546,788} %write{546,788} %derivs
temp	int	$tmp385	%read{546,788} %write{546,788} %derivs
temp	float	$tmp386	%read{546,788} %write{546,788} %derivs
temp	int	$tmp387	%read{546,788} %write{546,788} %derivs
temp	int	$tmp388	%read{2147483647,-1} %write{546,788}
const	int	$const41	15		%read{644,646} %write{2147483647,-1}
temp	float	$tmp389	%read{546,788} %write{546,788} %derivs
const	int	$const42	17		%read{645,647} %write{2147483647,-1}
temp	float	$tmp390	%read{546,788} %write{546,788} %derivs
temp	int	$tmp391	%read{546,788} %write{546,788} %derivs
temp	int	$tmp392	%read{546,788} %write{546,788} %derivs
temp	int	$tmp393	%read{546,788} %write{546,788}
temp	vector	$tmp394	%read{546,788} %write{546,788} %derivs
temp	float	$tmp395	%read{546,788} %write{546,788} %derivs
temp	float	$tmp396	%read{546,788} %write{546,788} %derivs
temp	float	$tmp397	%read{546,788} %write{546,788} %derivs
temp	float	$tmp398	%read{546,788} %write{546,788} %derivs
temp	float	$tmp399	%read{546,788} %write{546,788} %derivs
temp	int	$tmp400	%read{546,788} %write{546,788}
temp	float	$tmp401	%read{546,788} %write{546,788} %derivs
const	string	$const43	"aastep"		%read{666,713} %write{2147483647,-1}
temp	float	$tmp402	%read{546,788} %write{546,788} %derivs
temp	float	$tmp403	%read{546,788} %write{546,788} %derivs
temp	float	$tmp404	%read{546,788} %write{546,788} %derivs
temp	float	$tmp405	%read{546,788} %write{546,788} %derivs
temp	int	$tmp406	%read{546,788} %write{546,788}
temp	float	$tmp407	%read{546,788} %write{546,788}
temp	int	$tmp408	%read{546,788} %write{546,788}
temp	float	$tmp409	%read{546,788} %write{546,788} %derivs
temp	int	$tmp410	%read{546,788} %write{546,788}
temp	float	$tmp411	%read{546,788} %write{546,788} %derivs
temp	float	$tmp412	%read{546,788} %write{546,788} %derivs
temp	float	$tmp413	%read{546,788} %write{546,788} %derivs
temp	float	$tmp414	%read{546,788} %write{546,788} %derivs
temp	float	$tmp415	%read{546,788} %write{546,788} %derivs
temp	float	$tmp416	%read{546,788} %write{546,788} %derivs
temp	int	$tmp417	%read{546,788} %write{546,788}
temp	float	$tmp418	%read{546,788} %write{546,788}
temp	int	$tmp419	%read{546,788} %write{546,788}
temp	float	$tmp420	%read{546,788} %write{546,788} %derivs
temp	float	$tmp421	%read{546,788} %write{546,788} %derivs
temp	float	$tmp422	%read{546,788} %write{546,788} %derivs
temp	float	$tmp423	%read{546,788} %write{546,788} %derivs
temp	float	$tmp424	%read{546,788} %write{546,788} %derivs
temp	float	$tmp425	%read{546,788} %write{546,788} %derivs
temp	float	$tmp426	%read{546,788} %write{546,788} %derivs
temp	int	$tmp427	%read{546,788} %write{546,788}
temp	float	$tmp428	%read{546,788} %write{546,788}
temp	int	$tmp429	%read{546,788} %write{546,788}
temp	float	$tmp430	%read{546,788} %write{546,788} %derivs
temp	float	$tmp431	%read{546,788} %write{546,788} %derivs
const	string	$const44	"StdNoise_FilterAttenuate"		%read{731,731} %write{2147483647,-1}
temp	float	$tmp432	%read{546,788} %write{546,788} %derivs
const	float	$const45	0.125		%read{732,732} %write{2147483647,-1}
temp	int	$tmp433	%read{546,788} %write{546,788}
temp	float	$tmp434	%read{546,788} %write{546,788} %derivs
temp	int	$tmp435	%read{546,788} %write{546,788}
temp	float	$tmp436	%read{546,788} %write{546,788} %derivs
temp	float	$tmp437	%read{546,788} %write{546,788} %derivs
temp	float	$tmp438	%read{546,788} %write{546,788} %derivs
temp	float	$tmp439	%read{546,788} %write{546,788} %derivs
temp	int	$tmp440	%read{546,788} %write{546,788}
temp	int	$tmp441	%read{546,788} %write{546,788}
temp	float	$tmp442	%read{546,788} %write{546,788} %derivs
temp	float	$tmp443	%read{546,788} %write{546,788} %derivs
temp	float	$tmp444	%read{546,788} %write{546,788} %derivs
temp	int	$tmp445	%read{546,788} %write{546,788}
temp	float	$tmp446	%read{546,788} %write{546,788} %derivs
temp	int	$tmp447	%read{546,788} %write{546,788}
temp	float	$tmp448	%read{546,788} %write{546,788} %derivs
temp	float	$tmp449	%read{546,788} %write{546,788} %derivs
temp	float	$tmp450	%read{546,788} %write{546,788} %derivs
temp	int	$tmp451	%read{546,788} %write{546,788}
temp	float	$tmp452	%read{546,788} %write{546,788} %derivs
temp	float	$tmp453	%read{546,788} %write{546,788} %derivs
temp	float	$tmp454	%read{546,788} %write{546,788} %derivs
temp	float	$tmp455	%read{546,788} %write{546,788} %derivs
temp	float	$tmp456	%read{546,788} %write{546,788} %derivs
temp	float	$tmp457	%read{546,788} %write{546,788} %derivs
temp	int	$tmp458	%read{2147483647,-1} %write{546,788}
temp	int	$tmp459	%read{2147483647,-1} %write{546,788}
temp	int	$tmp460	%read{790,790} %write{789,789}
temp	int	$tmp461	%read{795,795} %write{794,794}
temp	vector	$tmp462	%read{800,800} %write{799,799}
temp	float	$tmp463	%read{797,797} %write{796,796} %derivs
temp	normal	$tmp464	%read{798,798} %write{797,797} %derivs
temp	point	$tmp465	%read{799,799} %write{798,798} %derivs
const	string	$const46	"surfgradFromPerturbedNormal"		%read{801,801} %write{2147483647,-1}
temp	vector	$tmp466	%read{804,804} %write{803,803}
temp	vector	$tmp467	%read{807,807} %write{804,804}
temp	float	$tmp468	%read{807,807} %write{806,806}
const	float	$const47	9.99999994e-09		%read{806,806} %write{2147483647,-1}
temp	float	$tmp469	%read{806,806} %write{805,805}
code ___main___
# PxrPhasorNoise.osl:644
#     MANIFOLD_GET_STD_INPUT(inputManifoldRw);
	isconnected	$tmp1 inputManifold 	%filename{"PxrPhasorNoise.osl"} %line{644} %argrw{"wr"}
	eq		$tmp2 $tmp1 $const1 	%argrw{"wrr"}
	if		$tmp2 21 25 	%argrw{"r"}
	functioncall	$const2 7 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:69
#     m.Q = inP;
	assign		inputManifoldRw.Q P 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{69} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:70
#     m.QN = inN;
	assign		inputManifoldRw.QN N 	%line{70} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:71
#     m.Qradius = 0.0;
	assign		inputManifoldRw.Qradius $const3 	%line{71} %argrw{"wr"}
# PxrPhasorNoise.osl:644
#     MANIFOLD_GET_STD_INPUT(inputManifoldRw);
	functioncall	$const5 21 	%filename{"PxrPhasorNoise.osl"} %line{644} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:91
#     Manifold_Transform(ioManifold, "common", toSpace);
	functioncall	$const5 21 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{91} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:78
#     ioManifold.Q = transform(fromSpace, toSpace, ioManifold.Q);
	transform	inputManifoldRw.Q $const6 $const4 inputManifoldRw.Q 	%line{78} %argrw{"wrrr"}
	assign		inputManifoldRw.Q inputManifoldRw.Q 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:79
#     ioManifold.QN = normalize(transform(fromSpace, toSpace, ioManifold.QN));
	transformn	$tmp3 $const6 $const4 inputManifoldRw.QN 	%line{79} %argrw{"wrrr"}
	normalize	inputManifoldRw.QN $tmp3 	%argrw{"wr"}
	assign		inputManifoldRw.QN inputManifoldRw.QN 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:81
#     vector vec1 = vector(1.0);
	assign		___412_vec1 $const7 	%line{81} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:82
#     vec1 = transform(fromSpace, toSpace, vec1);
	transformv	___412_vec1 $const6 $const4 ___412_vec1 	%line{82} %argrw{"wrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:83
#     float scale = length(vec1) / sqrt(3.0);
	length		$tmp4 ___412_vec1 	%line{83} %argrw{"wr"}
	sqrt		$tmp5 $const8 	%argrw{"wr"}
	div		___412_scale $tmp4 $tmp5 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:84
#     ioManifold.Qradius *= scale;
	mul		inputManifoldRw.Qradius inputManifoldRw.Qradius ___412_scale 	%line{84} %argrw{"wrr"}
	assign		inputManifoldRw.Qradius inputManifoldRw.Qradius 	%argrw{"wr"}
# PxrPhasorNoise.osl:644
#     MANIFOLD_GET_STD_INPUT(inputManifoldRw);
	functioncall	$const9 25 	%filename{"PxrPhasorNoise.osl"} %line{644} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:53
#     dest.Q = src.Q;
	assign		inputManifoldRw.Q inputManifold.Q 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{53} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:54
#     dest.QN = src.QN;
	assign		inputManifoldRw.QN inputManifold.QN 	%line{54} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:55
#     dest.Qradius = src.Qradius;
	assign		inputManifoldRw.Qradius inputManifold.Qradius 	%line{55} %argrw{"wr"}
# PxrPhasorNoise.osl:646
#     point Q   = inputManifoldRw.Q;
	assign		Q inputManifoldRw.Q 	%filename{"PxrPhasorNoise.osl"} %line{646} %argrw{"wr"}
# PxrPhasorNoise.osl:647
#     normal QN = inputManifoldRw.QN;
	assign		QN inputManifoldRw.QN 	%line{647} %argrw{"wr"}
# PxrPhasorNoise.osl:656
#     float Qradius = inputManifoldRw.Qradius;
	assign		Qradius inputManifoldRw.Qradius 	%line{656} %argrw{"wr"}
# PxrPhasorNoise.osl:657
#     if (Qradius <= 0.0) Qradius = sqrt(area(Q));
	le		$tmp6 Qradius $const3 	%line{657} %argrw{"wrr"}
	if		$tmp6 32 32 	%argrw{"r"}
	area		$tmp7 Q 	%argrw{"wr"} %argderivs{1}
	sqrt		Qradius $tmp7 	%argrw{"wr"}
# PxrPhasorNoise.osl:658
#     Qradius *= filterScale;
	mul		Qradius Qradius filterScale 	%line{658} %argrw{"wrr"}
# PxrPhasorNoise.osl:665
#     vector _dimensions = vector(dimensions>0, dimensions>1, dimensions>2);
	gt		$tmp8 dimensions $const1 	%line{665} %argrw{"wrr"}
	assign		$tmp9 $tmp8 	%argrw{"wr"}
	gt		$tmp10 dimensions $const10 	%argrw{"wrr"}
	assign		$tmp11 $tmp10 	%argrw{"wr"}
	gt		$tmp12 dimensions $const11 	%argrw{"wrr"}
	assign		$tmp13 $tmp12 	%argrw{"wr"}
	vector		_dimensions $tmp9 $tmp11 $tmp13 	%argrw{"wrrr"}
# PxrPhasorNoise.osl:666
#     vector _neighbors  = kernelNeighbors * _dimensions;
	assign		$tmp14 kernelNeighbors 	%line{666} %argrw{"wr"}
	mul		_neighbors $tmp14 _dimensions 	%argrw{"wrr"}
# PxrPhasorNoise.osl:671
#     vector _kernelSize    = kernelScale / vector(kernelFrequency);
	assign		$tmp15 kernelFrequency 	%line{671} %argrw{"wr"}
	div		_kernelSize kernelScale $tmp15 	%argrw{"wrr"}
# PxrPhasorNoise.osl:672
#     if (relativeFrequencies) {
	if		relativeFrequencies 47 47 	%line{672} %argrw{"r"}
# PxrPhasorNoise.osl:673
#         _kernelSize /= vector(frequency);
	assign		$tmp16 frequency 	%line{673} %argrw{"wr"}
	div		_kernelSize _kernelSize $tmp16 	%argrw{"wrr"}
# PxrPhasorNoise.osl:676
#     float  _kernelSizeMin = _kernelSize[0];
	compref		_kernelSizeMin _kernelSize $const1 	%line{676} %argrw{"wrr"}
# PxrPhasorNoise.osl:677
#     for (int dim=1; dim<dimensions; dim++) {
	for		$tmp18 50 52 54 56 	%line{677} %argrw{"r"}
	assign		___519_dim $const10 	%argrw{"wr"}
	lt		$tmp17 ___519_dim dimensions 	%argrw{"wrr"}
	neq		$tmp18 $tmp17 $const1 	%argrw{"wrr"}
# PxrPhasorNoise.osl:678
#         _kernelSizeMin = min(_kernelSize[dim], _kernelSizeMin);
	compref		$tmp19 _kernelSize ___519_dim 	%line{678} %argrw{"wrr"}
	min		_kernelSizeMin $tmp19 _kernelSizeMin 	%argrw{"wrr"}
# PxrPhasorNoise.osl:677
#     for (int dim=1; dim<dimensions; dim++) {
	assign		$tmp20 ___519_dim 	%line{677} %argrw{"wr"}
	add		___519_dim ___519_dim $const10 	%argrw{"wrr"}
# PxrPhasorNoise.osl:683
#     float bandwidth = 1.0;
	assign		bandwidth $const12 	%line{683} %argrw{"wr"}
# PxrPhasorNoise.osl:684
#     if (kernelError > 0.0) {
	gt		$tmp21 kernelError $const3 	%line{684} %argrw{"wrr"}
	if		$tmp21 63 63 	%argrw{"r"}
# PxrPhasorNoise.osl:685
#         bandwidth = sqrt(-log(kernelError) / M_PI);
	log		$tmp22 kernelError 	%line{685} %argrw{"wr"}
	neg		$tmp23 $tmp22 	%argrw{"wr"}
	div		$tmp24 $tmp23 $const13 	%argrw{"wrr"}
	sqrt		bandwidth $tmp24 	%argrw{"wr"}
# PxrPhasorNoise.osl:687
#     bandwidth = bandwidth / max(1.0, kernelNeighbors) / _kernelSizeMin;
	assign		$tmp26 kernelNeighbors 	%line{687} %argrw{"wr"}
	max		$tmp25 $const12 $tmp26 	%argrw{"wrr"}
	div		$tmp27 bandwidth $tmp25 	%argrw{"wrr"}
	div		bandwidth $tmp27 _kernelSizeMin 	%argrw{"wrr"}
# PxrPhasorNoise.osl:690
#     Q = Q * _dimensions;
	mul		Q Q _dimensions 	%line{690} %argrw{"wrr"}
# PxrPhasorNoise.osl:691
#     point Q0 = Q / _kernelSize;
	div		Q0 Q _kernelSize 	%line{691} %argrw{"wrr"}
# PxrPhasorNoise.osl:692
#     Q0 = floor(Q0);
	floor		Q0 Q0 	%line{692} %argrw{"wr"}
# PxrPhasorNoise.osl:696
#     QN = normalize(calculatenormal(Q));
	calculatenormal	$tmp28 Q 	%line{696} %argrw{"wr"} %argderivs{1}
	normalize	QN $tmp28 	%argrw{"wr"}
# PxrPhasorNoise.osl:699
#     vector _alignAxis = vector(1.0, 1.0, 1.0);
	assign		_alignAxis $const7 	%line{699} %argrw{"wr"}
# PxrPhasorNoise.osl:700
#     if (alignMode == ALIGNMODE_LINEARX) {
	eq		$tmp29 alignMode $const1 	%line{700} %argrw{"wrr"}
	if		$tmp29 76 94 	%argrw{"r"}
# PxrPhasorNoise.osl:701
#         _alignAxis = vector(1.0, 0.0, 0.0);
	assign		_alignAxis $const14 	%line{701} %argrw{"wr"}
# PxrPhasorNoise.osl:702
#     } else if (alignMode == ALIGNMODE_LINEARY) {
	eq		$tmp30 alignMode $const10 	%line{702} %argrw{"wrr"}
	if		$tmp30 79 94 	%argrw{"r"}
# PxrPhasorNoise.osl:703
#         _alignAxis = vector(0.0, 1.0, 0.0);
	assign		_alignAxis $const15 	%line{703} %argrw{"wr"}
# PxrPhasorNoise.osl:704
#     } else if (alignMode == ALIGNMODE_LINEARZ) {
	eq		$tmp31 alignMode $const11 	%line{704} %argrw{"wrr"}
	if		$tmp31 82 94 	%argrw{"r"}
# PxrPhasorNoise.osl:705
#         _alignAxis = vector(0.0, 0.0, 1.0);
	assign		_alignAxis $const16 	%line{705} %argrw{"wr"}
# PxrPhasorNoise.osl:706
#     } else if (alignMode == ALIGNMODE_CYLINDRICALX) {
	eq		$tmp32 alignMode $const17 	%line{706} %argrw{"wrr"}
	if		$tmp32 85 94 	%argrw{"r"}
# PxrPhasorNoise.osl:707
#         _alignAxis = vector(0.0, 1.0, 1.0);
	assign		_alignAxis $const18 	%line{707} %argrw{"wr"}
# PxrPhasorNoise.osl:708
#     } else if (alignMode == ALIGNMODE_CYLINDRICALY) {
	eq		$tmp33 alignMode $const19 	%line{708} %argrw{"wrr"}
	if		$tmp33 88 94 	%argrw{"r"}
# PxrPhasorNoise.osl:709
#         _alignAxis = vector(1.0, 0.0, 1.0);
	assign		_alignAxis $const20 	%line{709} %argrw{"wr"}
# PxrPhasorNoise.osl:710
#     } else if (alignMode == ALIGNMODE_CYLINDRICALZ) {
	eq		$tmp34 alignMode $const21 	%line{710} %argrw{"wrr"}
	if		$tmp34 91 94 	%argrw{"r"}
# PxrPhasorNoise.osl:711
#         _alignAxis = vector(1.0, 1.0, 0.0);
	assign		_alignAxis $const22 	%line{711} %argrw{"wr"}
# PxrPhasorNoise.osl:712
#     } else if (alignMode == ALIGNMODE_SPHERICAL) {
	eq		$tmp35 alignMode $const23 	%line{712} %argrw{"wrr"}
	if		$tmp35 94 94 	%argrw{"r"}
# PxrPhasorNoise.osl:713
#         _alignAxis = vector(1.0, 1.0, 1.0);
	assign		_alignAxis $const7 	%line{713} %argrw{"wr"}
# PxrPhasorNoise.osl:716
#     vector _direction = normalize(direction * _dimensions);
	mul		$tmp36 direction _dimensions 	%line{716} %argrw{"wrr"}
	normalize	_direction $tmp36 	%argrw{"wr"}
# PxrPhasorNoise.osl:717
#     vector _directionJitterSize = directionJitterScale / vector(directionJitterFrequency);
	assign		$tmp37 directionJitterFrequency 	%line{717} %argrw{"wr"}
	div		_directionJitterSize directionJitterScale $tmp37 	%argrw{"wrr"}
# PxrPhasorNoise.osl:719
#     if (relativeFrequencies) {
	if		relativeFrequencies 101 101 	%line{719} %argrw{"r"}
# PxrPhasorNoise.osl:720
#         _directionJitterSize /= vector(frequency);
	assign		$tmp38 frequency 	%line{720} %argrw{"wr"}
	div		_directionJitterSize _directionJitterSize $tmp38 	%argrw{"wrr"}
# PxrPhasorNoise.osl:728
#     float  filterWidthCount = pow(float(2.0 * kernelNeighbors + 1.0), float(dimensions))
	assign		$tmp42 kernelNeighbors 	%line{728} %argrw{"wr"}
	mul		$tmp41 $const24 $tmp42 	%argrw{"wrr"}
	add		$tmp40 $tmp41 $const12 	%argrw{"wrr"}
	assign		$tmp44 dimensions 	%argrw{"wr"}
	assign		$tmp43 $tmp44 	%argrw{"wr"}
	pow		$tmp39 $tmp40 $tmp43 	%argrw{"wrr"}
# PxrPhasorNoise.osl:729
#                                 * float(kernelImpulses)
	assign		$tmp46 kernelImpulses 	%line{729} %argrw{"wr"}
	assign		$tmp45 $tmp46 	%argrw{"wr"}
	mul		$tmp47 $tmp39 $tmp45 	%argrw{"wrr"}
# PxrPhasorNoise.osl:730
#                                 * float(phasorOctaves);
	assign		$tmp49 phasorOctaves 	%line{730} %argrw{"wr"}
	assign		$tmp48 $tmp49 	%argrw{"wr"}
	mul		filterWidthCount $tmp47 $tmp48 	%argrw{"wrr"}
# PxrPhasorNoise.osl:732
#     for (int i=0; i<OCTAVES_MAX; i++) {
	for		$tmp51 115 117 119 121 	%line{732} %argrw{"r"}
	assign		___530_i $const1 	%argrw{"wr"}
	lt		$tmp50 ___530_i $const23 	%argrw{"wrr"}
	neq		$tmp51 $tmp50 $const1 	%argrw{"wrr"}
# PxrPhasorNoise.osl:733
#         phasorNoise[i] = vector(0.0);
	aassign		phasorNoise ___530_i $const25 	%line{733} %argrw{"wrr"}
# PxrPhasorNoise.osl:734
#         filterWidth[i] = 0.0;
	aassign		filterWidth ___530_i $const3 	%line{734} %argrw{"wrr"}
# PxrPhasorNoise.osl:732
#     for (int i=0; i<OCTAVES_MAX; i++) {
	assign		$tmp53 ___530_i 	%line{732} %argrw{"wr"}
	add		___530_i ___530_i $const10 	%argrw{"wrr"}
# PxrPhasorNoise.osl:742
#     for (float i=-_neighbors[0]; i<=_neighbors[0]; i++) {
	for		$tmp57 124 127 495 497 	%line{742} %argrw{"r"}
	compref		$tmp54 _neighbors $const1 	%argrw{"wrr"}
	neg		___532_i $tmp54 	%argrw{"wr"}
	compref		$tmp55 _neighbors $const1 	%argrw{"wrr"}
	le		$tmp56 ___532_i $tmp55 	%argrw{"wrr"}
	neq		$tmp57 $tmp56 $const1 	%argrw{"wrr"}
# PxrPhasorNoise.osl:743
#         for (float j=-_neighbors[1]; j<=_neighbors[1]; j++) {
	for		$tmp61 130 133 493 495 	%line{743} %argrw{"r"}
	compref		$tmp58 _neighbors $const10 	%argrw{"wrr"}
	neg		___534_j $tmp58 	%argrw{"wr"}
	compref		$tmp59 _neighbors $const10 	%argrw{"wrr"}
	le		$tmp60 ___534_j $tmp59 	%argrw{"wrr"}
	neq		$tmp61 $tmp60 $const1 	%argrw{"wrr"}
# PxrPhasorNoise.osl:744
#             for (float k=-_neighbors[2]; k<=_neighbors[2]; k++) {
	for		$tmp65 136 139 491 493 	%line{744} %argrw{"r"}
	compref		$tmp62 _neighbors $const11 	%argrw{"wrr"}
	neg		___536_k $tmp62 	%argrw{"wr"}
	compref		$tmp63 _neighbors $const11 	%argrw{"wrr"}
	le		$tmp64 ___536_k $tmp63 	%argrw{"wrr"}
	neq		$tmp65 $tmp64 $const1 	%argrw{"wrr"}
# PxrPhasorNoise.osl:747
#                 vector Qkernel0 = Q0 + vector(i, j, k);
	vector		$tmp66 ___532_i ___534_j ___536_k 	%line{747} %argrw{"wrrr"}
	add		___537_Qkernel0 Q0 $tmp66 	%argrw{"wrr"}
# PxrPhasorNoise.osl:750
#                 vector dirKernel = _direction;
	assign		___537_dirKernel _direction 	%line{750} %argrw{"wr"}
# PxrPhasorNoise.osl:753
#                 float phiKernel = cellnoise(Qkernel0);
	cellnoise	___537_phiKernel ___537_Qkernel0 	%line{753} %argrw{"wr"}
# PxrPhasorNoise.osl:756
#                 vector Qkernel = Qkernel0;
	assign		___537_Qkernel ___537_Qkernel0 	%line{756} %argrw{"wr"}
# PxrPhasorNoise.osl:758
#                 for (float impulse=0.0; impulse<kernelImpulses; impulse++) {
	for		$tmp68 146 148 489 491 	%line{758} %argrw{"r"}
	assign		___538_impulse $const3 	%argrw{"wr"}
	lt		$tmp67 ___538_impulse kernelImpulses 	%argrw{"wrr"}
	neq		$tmp68 $tmp67 $const1 	%argrw{"wrr"}
# PxrPhasorNoise.osl:761
#                     vector Qseed = Qkernel0 + cellnoise(vector(impulse))
	assign		$tmp70 ___538_impulse 	%line{761} %argrw{"wr"}
	cellnoise	$tmp69 $tmp70 	%argrw{"wr"}
# PxrPhasorNoise.osl:762
#                                   * vector(123.4567, 867.5309, 5551.212)
	mul		$tmp72 $tmp69 $const26 	%line{762} %argrw{"wrr"}
# PxrPhasorNoise.osl:763
#                                   * _dimensions;
	mul		$tmp73 $tmp72 _dimensions 	%line{763} %argrw{"wrr"}
# PxrPhasorNoise.osl:761
#                     vector Qseed = Qkernel0 + cellnoise(vector(impulse))
	add		___539_Qseed ___537_Qkernel0 $tmp73 	%line{761} %argrw{"wrr"}
# PxrPhasorNoise.osl:767
#                     vector Qimpulse = (Qkernel0 + cellnoise(Qseed)) * _kernelSize * _dimensions;
	cellnoise	$tmp74 ___539_Qseed 	%line{767} %argrw{"wr"}
	add		$tmp75 ___537_Qkernel0 $tmp74 	%argrw{"wrr"}
	mul		$tmp76 $tmp75 _kernelSize 	%argrw{"wrr"}
	mul		___539_Qimpulse $tmp76 _dimensions 	%argrw{"wrr"}
# PxrPhasorNoise.osl:770
#                     if (impulse == 0.0) {
	eq		$tmp77 ___538_impulse $const3 	%line{770} %argrw{"wrr"}
	if		$tmp77 160 160 	%argrw{"r"}
# PxrPhasorNoise.osl:771
#                         Qkernel = Qimpulse;
	assign		___537_Qkernel ___539_Qimpulse 	%line{771} %argrw{"wr"}
# PxrPhasorNoise.osl:775
#                     vector x = Q - Qimpulse;
	sub		___539_x Q ___539_Qimpulse 	%line{775} %argrw{"wrr"}
# PxrPhasorNoise.osl:780
#                     float phiImpulse = phiKernel + impulse / kernelImpulses;
	assign		$tmp79 kernelImpulses 	%line{780} %argrw{"wr"}
	div		$tmp78 ___538_impulse $tmp79 	%argrw{"wrr"}
	add		___539_phiImpulse ___537_phiKernel $tmp78 	%argrw{"wrr"}
# PxrPhasorNoise.osl:782
#                     vector dirImpulse = dirKernel;
	assign		___539_dirImpulse ___537_dirKernel 	%line{782} %argrw{"wr"}
# PxrPhasorNoise.osl:785
#                     if (directionAlign > 0.0) {
	gt		$tmp80 directionAlign $const3 	%line{785} %argrw{"wrr"}
	if		$tmp80 185 185 	%argrw{"r"}
# PxrPhasorNoise.osl:786
#                         vector dirAlign = vector(0.0);
	assign		___541_dirAlign $const25 	%line{786} %argrw{"wr"}
# PxrPhasorNoise.osl:787
#                         if (alignMode == ALIGNMODE_LINEARX) {
	eq		$tmp81 alignMode $const1 	%line{787} %argrw{"wrr"}
	if		$tmp81 171 183 	%argrw{"r"}
# PxrPhasorNoise.osl:788
#                             dirAlign = vector(1.0, 0.0, 0.0);
	assign		___541_dirAlign $const14 	%line{788} %argrw{"wr"}
# PxrPhasorNoise.osl:789
#                         } else if (alignMode == ALIGNMODE_LINEARY) {
	eq		$tmp82 alignMode $const10 	%line{789} %argrw{"wrr"}
	if		$tmp82 174 183 	%argrw{"r"}
# PxrPhasorNoise.osl:790
#                             dirAlign = vector(0.0, 1.0, 0.0);
	assign		___541_dirAlign $const15 	%line{790} %argrw{"wr"}
# PxrPhasorNoise.osl:791
#                         } else if (alignMode == ALIGNMODE_LINEARZ) {
	eq		$tmp83 alignMode $const11 	%line{791} %argrw{"wrr"}
	if		$tmp83 177 183 	%argrw{"r"}
# PxrPhasorNoise.osl:792
#                             dirAlign = vector(0.0, 0.0, 1.0);
	assign		___541_dirAlign $const16 	%line{792} %argrw{"wr"}
# PxrPhasorNoise.osl:793
#                         } else if (alignMode == ALIGNMODE_KERNEL) {
	eq		$tmp84 alignMode $const27 	%line{793} %argrw{"wrr"}
	if		$tmp84 181 183 	%argrw{"r"}
# PxrPhasorNoise.osl:794
#                             dirAlign = normalize(Q - Qkernel);
	sub		$tmp85 Q ___537_Qkernel 	%line{794} %argrw{"wrr"}
	normalize	___541_dirAlign $tmp85 	%argrw{"wr"}
# PxrPhasorNoise.osl:796
#                             dirAlign = normalize(Qimpulse * _alignAxis);
	mul		$tmp86 ___539_Qimpulse _alignAxis 	%line{796} %argrw{"wrr"}
	normalize	___541_dirAlign $tmp86 	%argrw{"wr"}
# PxrPhasorNoise.osl:798
#                         dirImpulse = normalize(mix(dirImpulse, dirAlign, directionAlign));
	mix		$tmp87 ___539_dirImpulse ___541_dirAlign directionAlign 	%line{798} %argrw{"wrrr"}
	normalize	___539_dirImpulse $tmp87 	%argrw{"wr"}
# PxrPhasorNoise.osl:802
#                     if (directionFlow > 0.0) {
	gt		$tmp88 directionFlow $const3 	%line{802} %argrw{"wrr"}
	if		$tmp88 249 249 	%argrw{"r"}
# PxrPhasorNoise.osl:803
#                         vector flowDir   = cross(cross(normalize(x), dirImpulse), dirImpulse);
	normalize	$tmp90 ___539_x 	%line{803} %argrw{"wr"}
	cross		$tmp89 $tmp90 ___539_dirImpulse 	%argrw{"wrr"}
	cross		___547_flowDir $tmp89 ___539_dirImpulse 	%argrw{"wrr"}
# PxrPhasorNoise.osl:804
#                         float flowDot    = dot(flowDir, dirImpulse);
	dot		___547_flowDot ___547_flowDir ___539_dirImpulse 	%line{804} %argrw{"wrr"}
# PxrPhasorNoise.osl:805
#                         float flotAngle  = acos(flowDot);
	acos		___547_flotAngle ___547_flowDot 	%line{805} %argrw{"wr"}
# PxrPhasorNoise.osl:806
#                         float flowAmount = directionFlow;
	assign		___547_flowAmount directionFlow 	%line{806} %argrw{"wr"}
# PxrPhasorNoise.osl:807
#                         vector flowAxis  = normalize(cross(flowDir, dirImpulse));
	cross		$tmp91 ___547_flowDir ___539_dirImpulse 	%line{807} %argrw{"wrr"}
	normalize	___547_flowAxis $tmp91 	%argrw{"wr"}
# PxrPhasorNoise.osl:808
#                         dirImpulse = rotate(point(dirImpulse), flowAmount*flotAngle, point(0.0), point(flowAxis));
	assign		$tmp92 ___539_dirImpulse 	%line{808} %argrw{"wr"}
	mul		$tmp93 ___547_flowAmount ___547_flotAngle 	%argrw{"wrr"}
	assign		$tmp95 ___547_flowAxis 	%argrw{"wr"}
	functioncall	$const29 249 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:270
#     vector axis = normalize (b - a);
	sub		$tmp96 $tmp95 $const28 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{270} %argrw{"wrr"}
	normalize	___257_axis $tmp96 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:272
#     sincos (angle, sinang, cosang);
	sincos		$tmp93 ___257_sinang ___257_cosang 	%line{272} %argrw{"rww"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:273
#     float cosang1 = 1.0 - cosang;
	sub		___257_cosang1 $const12 ___257_cosang 	%line{273} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:274
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___257_x ___257_axis $const1 	%line{274} %argrw{"wrr"}
	compref		___257_y ___257_axis $const10 	%argrw{"wrr"}
	compref		___257_z ___257_axis $const11 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp97 ___257_x ___257_x 	%line{275} %argrw{"wrr"}
	mul		$tmp98 ___257_x ___257_x 	%argrw{"wrr"}
	sub		$tmp99 $const12 $tmp98 	%argrw{"wrr"}
	mul		$tmp100 $tmp99 ___257_cosang 	%argrw{"wrr"}
	add		$tmp101 $tmp97 $tmp100 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:276
#                        x * y * cosang1 + z * sinang,
	mul		$tmp102 ___257_x ___257_y 	%line{276} %argrw{"wrr"}
	mul		$tmp103 $tmp102 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp104 ___257_z ___257_sinang 	%argrw{"wrr"}
	add		$tmp105 $tmp103 $tmp104 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:277
#                        x * z * cosang1 - y * sinang,
	mul		$tmp106 ___257_x ___257_z 	%line{277} %argrw{"wrr"}
	mul		$tmp107 $tmp106 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp108 ___257_y ___257_sinang 	%argrw{"wrr"}
	sub		$tmp109 $tmp107 $tmp108 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:279
#                        x * y * cosang1 - z * sinang,
	mul		$tmp110 ___257_x ___257_y 	%line{279} %argrw{"wrr"}
	mul		$tmp111 $tmp110 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp112 ___257_z ___257_sinang 	%argrw{"wrr"}
	sub		$tmp113 $tmp111 $tmp112 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:280
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp114 ___257_y ___257_y 	%line{280} %argrw{"wrr"}
	mul		$tmp115 ___257_y ___257_y 	%argrw{"wrr"}
	sub		$tmp116 $const12 $tmp115 	%argrw{"wrr"}
	mul		$tmp117 $tmp116 ___257_cosang 	%argrw{"wrr"}
	add		$tmp118 $tmp114 $tmp117 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:281
#                        y * z * cosang1 + x * sinang,
	mul		$tmp119 ___257_y ___257_z 	%line{281} %argrw{"wrr"}
	mul		$tmp120 $tmp119 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp121 ___257_x ___257_sinang 	%argrw{"wrr"}
	add		$tmp122 $tmp120 $tmp121 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:283
#                        x * z * cosang1 + y * sinang,
	mul		$tmp123 ___257_x ___257_z 	%line{283} %argrw{"wrr"}
	mul		$tmp124 $tmp123 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp125 ___257_y ___257_sinang 	%argrw{"wrr"}
	add		$tmp126 $tmp124 $tmp125 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:284
#                        y * z * cosang1 - x * sinang,
	mul		$tmp127 ___257_y ___257_z 	%line{284} %argrw{"wrr"}
	mul		$tmp128 $tmp127 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp129 ___257_x ___257_sinang 	%argrw{"wrr"}
	sub		$tmp130 $tmp128 $tmp129 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:285
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp131 ___257_z ___257_z 	%line{285} %argrw{"wrr"}
	mul		$tmp132 ___257_z ___257_z 	%argrw{"wrr"}
	sub		$tmp133 $const12 $tmp132 	%argrw{"wrr"}
	mul		$tmp134 $tmp133 ___257_cosang 	%argrw{"wrr"}
	add		$tmp135 $tmp131 $tmp134 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	matrix		___257_M $tmp101 $tmp105 $tmp109 $const3 $tmp113 $tmp118 $tmp122 $const3 $tmp126 $tmp130 $tmp135 $const3 $const3 $const3 $const3 $const12 	%line{275} %argrw{"wrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:288
#     return transform (M, p-a) + a;
	sub		$tmp137 $tmp92 $const28 	%line{288} %argrw{"wrr"}
	transformv	$tmp136 ___257_M $tmp137 	%argrw{"wrr"}
	add		___539_dirImpulse $tmp136 $const28 	%argrw{"wrr"}
# PxrPhasorNoise.osl:812
#                     if (directionJitter > 0.0) {
	gt		$tmp138 directionJitter $const3 	%filename{"PxrPhasorNoise.osl"} %line{812} %argrw{"wrr"}
	if		$tmp138 263 263 	%argrw{"r"}
# PxrPhasorNoise.osl:813
#                         vector Qnoise = Qimpulse / _directionJitterSize;
	div		___548_Qnoise ___539_Qimpulse _directionJitterSize 	%line{813} %argrw{"wrr"}
# PxrPhasorNoise.osl:816
#                         float jitx = snoise(Qnoise + vector(123.4567, 867.5309, 5551.212));
	add		$tmp140 ___548_Qnoise $const26 	%line{816} %argrw{"wrr"}
	snoise		___548_jitx $tmp140 	%argrw{"wr"}
# PxrPhasorNoise.osl:817
#                         float jity = snoise(Qnoise + vector(1234.567, 86.75309, 555.1212));
	add		$tmp142 ___548_Qnoise $const30 	%line{817} %argrw{"wrr"}
	snoise		___548_jity $tmp142 	%argrw{"wr"}
# PxrPhasorNoise.osl:818
#                         float jitz = snoise(Qnoise + vector(12345.67, 8675.309, 55.51212));
	add		$tmp144 ___548_Qnoise $const31 	%line{818} %argrw{"wrr"}
	snoise		___548_jitz $tmp144 	%argrw{"wr"}
# PxrPhasorNoise.osl:819
#                         vector jit = vector(jitx, jity, jitz);
	vector		___548_jit ___548_jitx ___548_jity ___548_jitz 	%line{819} %argrw{"wrrr"}
# PxrPhasorNoise.osl:820
#                         jit = normalize(jit * _dimensions);
	mul		$tmp145 ___548_jit _dimensions 	%line{820} %argrw{"wrr"}
	normalize	___548_jit $tmp145 	%argrw{"wr"}
# PxrPhasorNoise.osl:821
#                         dirImpulse = normalize(mix(dirImpulse, jit, directionJitter));
	mix		$tmp146 ___539_dirImpulse ___548_jit directionJitter 	%line{821} %argrw{"wrrr"}
	normalize	___539_dirImpulse $tmp146 	%argrw{"wr"}
# PxrPhasorNoise.osl:826
#                     if (kernelError > 0.0) {
	gt		$tmp147 kernelError $const3 	%line{826} %argrw{"wrr"}
	if		$tmp147 270 279 	%argrw{"r"}
# PxrPhasorNoise.osl:827
#                         a = exp(-M_PI * bandwidth * bandwidth * dot(x, x));
	mul		$tmp148 $const32 bandwidth 	%line{827} %argrw{"wrr"}
	mul		$tmp149 $tmp148 bandwidth 	%argrw{"wrr"}
	dot		$tmp150 ___539_x ___539_x 	%argrw{"wrr"}
	mul		$tmp151 $tmp149 $tmp150 	%argrw{"wrr"}
	exp		___539_a $tmp151 	%argrw{"wr"}
# PxrPhasorNoise.osl:829
#                         a = cos(M_PI * clamp(bandwidth * length(x), 0.0, 1.0)) * 0.5 + 0.5;
	length		$tmp154 ___539_x 	%line{829} %argrw{"wr"}
	mul		$tmp155 bandwidth $tmp154 	%argrw{"wrr"}
	functioncall	$const33 275 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp156 $tmp155 $const12 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		$tmp153 $tmp156 $const3 	%argrw{"wrr"}
# PxrPhasorNoise.osl:829
#                         a = cos(M_PI * clamp(bandwidth * length(x), 0.0, 1.0)) * 0.5 + 0.5;
	mul		$tmp157 $const13 $tmp153 	%filename{"PxrPhasorNoise.osl"} %line{829} %argrw{"wrr"}
	cos		$tmp152 $tmp157 	%argrw{"wr"}
	mul		$tmp158 $tmp152 $const34 	%argrw{"wrr"}
	add		___539_a $tmp158 $const34 	%argrw{"wrr"}
# PxrPhasorNoise.osl:831
#                     a = pow(a, kernelFalloff);
	pow		___539_a ___539_a kernelFalloff 	%line{831} %argrw{"wrr"}
# PxrPhasorNoise.osl:837
#                     float fOctScale  = 1.0;
	assign		___539_fOctScale $const12 	%line{837} %argrw{"wr"}
# PxrPhasorNoise.osl:838
#                     float fOctOffset = 0.0;
	assign		___539_fOctOffset $const3 	%line{838} %argrw{"wr"}
# PxrPhasorNoise.osl:839
#                     float fOctRotate = 0.0;
	assign		___539_fOctRotate $const3 	%line{839} %argrw{"wr"}
# PxrPhasorNoise.osl:840
#                     for (int fOct=0; fOct<fractalOctaves; fOct++) {
	for		$tmp160 285 287 487 489 	%line{840} %argrw{"r"}
	assign		___551_fOct $const1 	%argrw{"wr"}
	lt		$tmp159 ___551_fOct fractalOctaves 	%argrw{"wrr"}
	neq		$tmp160 $tmp159 $const1 	%argrw{"wrr"}
# PxrPhasorNoise.osl:841
#                         float pOctScale  = 1.0;
	assign		___552_pOctScale $const12 	%line{841} %argrw{"wr"}
# PxrPhasorNoise.osl:842
#                         float pOctOffset = 0.0;
	assign		___552_pOctOffset $const3 	%line{842} %argrw{"wr"}
# PxrPhasorNoise.osl:843
#                         float pOctRotate = 0.0;
	assign		___552_pOctRotate $const3 	%line{843} %argrw{"wr"}
# PxrPhasorNoise.osl:844
#                         float pOctWeight = 1.0;
	assign		___552_pOctWeight $const12 	%line{844} %argrw{"wr"}
# PxrPhasorNoise.osl:845
#                         for (int pOct=0; pOct<phasorOctaves; pOct++) {
	for		$tmp162 293 295 482 484 	%line{845} %argrw{"r"}
	assign		___553_pOct $const1 	%argrw{"wr"}
	lt		$tmp161 ___553_pOct phasorOctaves 	%argrw{"wrr"}
	neq		$tmp162 $tmp161 $const1 	%argrw{"wrr"}
# PxrPhasorNoise.osl:846
#                             float f = frequency * fOctScale * pOctScale;
	mul		$tmp163 frequency ___539_fOctScale 	%line{846} %argrw{"wrr"}
	mul		___554_f $tmp163 ___552_pOctScale 	%argrw{"wrr"}
# PxrPhasorNoise.osl:847
#                             float r = directionRotate + fOctRotate + pOctRotate;
	add		$tmp164 directionRotate ___539_fOctRotate 	%line{847} %argrw{"wrr"}
	add		___554_r $tmp164 ___552_pOctRotate 	%argrw{"wrr"}
# PxrPhasorNoise.osl:852
#                             vector dir = dirImpulse;
	assign		___554_dir ___539_dirImpulse 	%line{852} %argrw{"wr"}
# PxrPhasorNoise.osl:855
#                             if (r != 0.0) {
	neq		$tmp165 ___554_r $const3 	%line{855} %argrw{"wrr"}
	if		$tmp165 357 357 	%argrw{"r"}
# PxrPhasorNoise.osl:856
#                                 dir = rotate(point(dir), radians(r), point(0.0), point(QN));
	assign		$tmp166 ___554_dir 	%line{856} %argrw{"wr"}
	functioncall	$const35 305 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	mul		$tmp167 ___554_r $const36 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
# PxrPhasorNoise.osl:856
#                                 dir = rotate(point(dir), radians(r), point(0.0), point(QN));
	assign		$tmp169 QN 	%filename{"PxrPhasorNoise.osl"} %line{856} %argrw{"wr"}
	functioncall	$const29 357 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:270
#     vector axis = normalize (b - a);
	sub		$tmp170 $tmp169 $const28 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{270} %argrw{"wrr"}
	normalize	___257_axis $tmp170 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:272
#     sincos (angle, sinang, cosang);
	sincos		$tmp167 ___257_sinang ___257_cosang 	%line{272} %argrw{"rww"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:273
#     float cosang1 = 1.0 - cosang;
	sub		___257_cosang1 $const12 ___257_cosang 	%line{273} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:274
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___257_x ___257_axis $const1 	%line{274} %argrw{"wrr"}
	compref		___257_y ___257_axis $const10 	%argrw{"wrr"}
	compref		___257_z ___257_axis $const11 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp171 ___257_x ___257_x 	%line{275} %argrw{"wrr"}
	mul		$tmp172 ___257_x ___257_x 	%argrw{"wrr"}
	sub		$tmp173 $const12 $tmp172 	%argrw{"wrr"}
	mul		$tmp174 $tmp173 ___257_cosang 	%argrw{"wrr"}
	add		$tmp175 $tmp171 $tmp174 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:276
#                        x * y * cosang1 + z * sinang,
	mul		$tmp176 ___257_x ___257_y 	%line{276} %argrw{"wrr"}
	mul		$tmp177 $tmp176 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp178 ___257_z ___257_sinang 	%argrw{"wrr"}
	add		$tmp179 $tmp177 $tmp178 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:277
#                        x * z * cosang1 - y * sinang,
	mul		$tmp180 ___257_x ___257_z 	%line{277} %argrw{"wrr"}
	mul		$tmp181 $tmp180 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp182 ___257_y ___257_sinang 	%argrw{"wrr"}
	sub		$tmp183 $tmp181 $tmp182 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:279
#                        x * y * cosang1 - z * sinang,
	mul		$tmp184 ___257_x ___257_y 	%line{279} %argrw{"wrr"}
	mul		$tmp185 $tmp184 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp186 ___257_z ___257_sinang 	%argrw{"wrr"}
	sub		$tmp187 $tmp185 $tmp186 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:280
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp188 ___257_y ___257_y 	%line{280} %argrw{"wrr"}
	mul		$tmp189 ___257_y ___257_y 	%argrw{"wrr"}
	sub		$tmp190 $const12 $tmp189 	%argrw{"wrr"}
	mul		$tmp191 $tmp190 ___257_cosang 	%argrw{"wrr"}
	add		$tmp192 $tmp188 $tmp191 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:281
#                        y * z * cosang1 + x * sinang,
	mul		$tmp193 ___257_y ___257_z 	%line{281} %argrw{"wrr"}
	mul		$tmp194 $tmp193 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp195 ___257_x ___257_sinang 	%argrw{"wrr"}
	add		$tmp196 $tmp194 $tmp195 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:283
#                        x * z * cosang1 + y * sinang,
	mul		$tmp197 ___257_x ___257_z 	%line{283} %argrw{"wrr"}
	mul		$tmp198 $tmp197 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp199 ___257_y ___257_sinang 	%argrw{"wrr"}
	add		$tmp200 $tmp198 $tmp199 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:284
#                        y * z * cosang1 - x * sinang,
	mul		$tmp201 ___257_y ___257_z 	%line{284} %argrw{"wrr"}
	mul		$tmp202 $tmp201 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp203 ___257_x ___257_sinang 	%argrw{"wrr"}
	sub		$tmp204 $tmp202 $tmp203 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:285
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp205 ___257_z ___257_z 	%line{285} %argrw{"wrr"}
	mul		$tmp206 ___257_z ___257_z 	%argrw{"wrr"}
	sub		$tmp207 $const12 $tmp206 	%argrw{"wrr"}
	mul		$tmp208 $tmp207 ___257_cosang 	%argrw{"wrr"}
	add		$tmp209 $tmp205 $tmp208 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	matrix		___257_M $tmp175 $tmp179 $tmp183 $const3 $tmp187 $tmp192 $tmp196 $const3 $tmp200 $tmp204 $tmp209 $const3 $const3 $const3 $const3 $const12 	%line{275} %argrw{"wrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:288
#     return transform (M, p-a) + a;
	sub		$tmp211 $tmp166 $const28 	%line{288} %argrw{"wrr"}
	transformv	$tmp210 ___257_M $tmp211 	%argrw{"wrr"}
	add		___554_dir $tmp210 $const28 	%argrw{"wrr"}
# PxrPhasorNoise.osl:859
#                             float phi = phiImpulse + fOctOffset + pOctOffset;
	add		$tmp212 ___539_phiImpulse ___539_fOctOffset 	%filename{"PxrPhasorNoise.osl"} %line{859} %argrw{"wrr"}
	add		___554_phi $tmp212 ___552_pOctOffset 	%argrw{"wrr"}
# PxrPhasorNoise.osl:862
#                             if (phaseAlign > 0.0) {
	gt		$tmp213 phaseAlign $const3 	%line{862} %argrw{"wrr"}
	if		$tmp213 381 381 	%argrw{"r"}
# PxrPhasorNoise.osl:863
#                                 float phiAlign = 0.0;
	assign		___556_phiAlign $const3 	%line{863} %argrw{"wr"}
# PxrPhasorNoise.osl:864
#                                 if (alignMode != ALIGNMODE_KERNEL) {
	neq		$tmp214 alignMode $const27 	%line{864} %argrw{"wrr"}
	if		$tmp214 380 380 	%argrw{"r"}
# PxrPhasorNoise.osl:865
#                                     phiAlign = mod(f * dot(Qimpulse * _alignAxis, dir), 1.0);
	mul		$tmp216 ___539_Qimpulse _alignAxis 	%line{865} %argrw{"wrr"}
	dot		$tmp215 $tmp216 ___554_dir 	%argrw{"wrr"}
	mul		$tmp217 ___554_f $tmp215 	%argrw{"wrr"}
	functioncall	$const37 372 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:132
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp219 $tmp217 $const12 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{132} %argrw{"wrr"}
	floor		$tmp218 $tmp219 	%argrw{"wr"}
	mul		$tmp220 $const12 $tmp218 	%argrw{"wrr"}
	sub		___556_phiAlign $tmp217 $tmp220 	%argrw{"wrr"}
# PxrPhasorNoise.osl:866
#                                     if (phi - phiAlign > 0.5) phiAlign += 1.0;
	sub		$tmp221 ___554_phi ___556_phiAlign 	%filename{"PxrPhasorNoise.osl"} %line{866} %argrw{"wrr"}
	gt		$tmp222 $tmp221 $const34 	%argrw{"wrr"}
	if		$tmp222 376 376 	%argrw{"r"}
	add		___556_phiAlign ___556_phiAlign $const12 	%argrw{"wrr"}
# PxrPhasorNoise.osl:867
#                                     if (phiAlign - phi > 0.5) phiAlign -= 1.0;
	sub		$tmp223 ___556_phiAlign ___554_phi 	%line{867} %argrw{"wrr"}
	gt		$tmp224 $tmp223 $const34 	%argrw{"wrr"}
	if		$tmp224 380 380 	%argrw{"r"}
	sub		___556_phiAlign ___556_phiAlign $const12 	%argrw{"wrr"}
# PxrPhasorNoise.osl:869
#                                 phi = mix(phi, phiAlign, phaseAlign);
	mix		___554_phi ___554_phi ___556_phiAlign phaseAlign 	%line{869} %argrw{"wrrr"}
# PxrPhasorNoise.osl:873
#                             if (directionFlatten > 0.0) {
	gt		$tmp225 directionFlatten $const3 	%line{873} %argrw{"wrr"}
	if		$tmp225 446 446 	%argrw{"r"}
# PxrPhasorNoise.osl:874
#                                 float flattenDot    = dot(QN, dir);
	dot		___558_flattenDot QN ___554_dir 	%line{874} %argrw{"wrr"}
# PxrPhasorNoise.osl:875
#                                 float flattenAngle  = asin(flattenDot);
	asin		___558_flattenAngle ___558_flattenDot 	%line{875} %argrw{"wr"}
# PxrPhasorNoise.osl:877
#                                                     * pow(1.0 - abs(flattenDot), 1.0 - directionFlatten);
	abs		$tmp227 ___558_flattenDot 	%line{877} %argrw{"wr"}
	sub		$tmp228 $const12 $tmp227 	%argrw{"wrr"}
	sub		$tmp229 $const12 directionFlatten 	%argrw{"wrr"}
	pow		$tmp226 $tmp228 $tmp229 	%argrw{"wrr"}
	mul		___558_flattenAmount directionFlatten $tmp226 	%argrw{"wrr"}
# PxrPhasorNoise.osl:878
#                                 vector flattenAxis  = normalize(cross(QN, dir));
	cross		$tmp230 QN ___554_dir 	%line{878} %argrw{"wrr"}
	normalize	___558_flattenAxis $tmp230 	%argrw{"wr"}
# PxrPhasorNoise.osl:879
#                                 dir = rotate(point(dir), flattenAmount*flattenAngle, point(0.0), point(flattenAxis));
	assign		$tmp231 ___554_dir 	%line{879} %argrw{"wr"}
	mul		$tmp232 ___558_flattenAmount ___558_flattenAngle 	%argrw{"wrr"}
	assign		$tmp234 ___558_flattenAxis 	%argrw{"wr"}
	functioncall	$const29 446 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:270
#     vector axis = normalize (b - a);
	sub		$tmp235 $tmp234 $const28 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{270} %argrw{"wrr"}
	normalize	___257_axis $tmp235 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:272
#     sincos (angle, sinang, cosang);
	sincos		$tmp232 ___257_sinang ___257_cosang 	%line{272} %argrw{"rww"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:273
#     float cosang1 = 1.0 - cosang;
	sub		___257_cosang1 $const12 ___257_cosang 	%line{273} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:274
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___257_x ___257_axis $const1 	%line{274} %argrw{"wrr"}
	compref		___257_y ___257_axis $const10 	%argrw{"wrr"}
	compref		___257_z ___257_axis $const11 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp236 ___257_x ___257_x 	%line{275} %argrw{"wrr"}
	mul		$tmp237 ___257_x ___257_x 	%argrw{"wrr"}
	sub		$tmp238 $const12 $tmp237 	%argrw{"wrr"}
	mul		$tmp239 $tmp238 ___257_cosang 	%argrw{"wrr"}
	add		$tmp240 $tmp236 $tmp239 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:276
#                        x * y * cosang1 + z * sinang,
	mul		$tmp241 ___257_x ___257_y 	%line{276} %argrw{"wrr"}
	mul		$tmp242 $tmp241 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp243 ___257_z ___257_sinang 	%argrw{"wrr"}
	add		$tmp244 $tmp242 $tmp243 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:277
#                        x * z * cosang1 - y * sinang,
	mul		$tmp245 ___257_x ___257_z 	%line{277} %argrw{"wrr"}
	mul		$tmp246 $tmp245 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp247 ___257_y ___257_sinang 	%argrw{"wrr"}
	sub		$tmp248 $tmp246 $tmp247 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:279
#                        x * y * cosang1 - z * sinang,
	mul		$tmp249 ___257_x ___257_y 	%line{279} %argrw{"wrr"}
	mul		$tmp250 $tmp249 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp251 ___257_z ___257_sinang 	%argrw{"wrr"}
	sub		$tmp252 $tmp250 $tmp251 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:280
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp253 ___257_y ___257_y 	%line{280} %argrw{"wrr"}
	mul		$tmp254 ___257_y ___257_y 	%argrw{"wrr"}
	sub		$tmp255 $const12 $tmp254 	%argrw{"wrr"}
	mul		$tmp256 $tmp255 ___257_cosang 	%argrw{"wrr"}
	add		$tmp257 $tmp253 $tmp256 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:281
#                        y * z * cosang1 + x * sinang,
	mul		$tmp258 ___257_y ___257_z 	%line{281} %argrw{"wrr"}
	mul		$tmp259 $tmp258 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp260 ___257_x ___257_sinang 	%argrw{"wrr"}
	add		$tmp261 $tmp259 $tmp260 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:283
#                        x * z * cosang1 + y * sinang,
	mul		$tmp262 ___257_x ___257_z 	%line{283} %argrw{"wrr"}
	mul		$tmp263 $tmp262 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp264 ___257_y ___257_sinang 	%argrw{"wrr"}
	add		$tmp265 $tmp263 $tmp264 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:284
#                        y * z * cosang1 - x * sinang,
	mul		$tmp266 ___257_y ___257_z 	%line{284} %argrw{"wrr"}
	mul		$tmp267 $tmp266 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp268 ___257_x ___257_sinang 	%argrw{"wrr"}
	sub		$tmp269 $tmp267 $tmp268 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:285
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp270 ___257_z ___257_z 	%line{285} %argrw{"wrr"}
	mul		$tmp271 ___257_z ___257_z 	%argrw{"wrr"}
	sub		$tmp272 $const12 $tmp271 	%argrw{"wrr"}
	mul		$tmp273 $tmp272 ___257_cosang 	%argrw{"wrr"}
	add		$tmp274 $tmp270 $tmp273 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	matrix		___257_M $tmp240 $tmp244 $tmp248 $const3 $tmp252 $tmp257 $tmp261 $const3 $tmp265 $tmp269 $tmp274 $const3 $const3 $const3 $const3 $const12 	%line{275} %argrw{"wrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:288
#     return transform (M, p-a) + a;
	sub		$tmp276 $tmp231 $const28 	%line{288} %argrw{"wrr"}
	transformv	$tmp275 ___257_M $tmp276 	%argrw{"wrr"}
	add		___554_dir $tmp275 $const28 	%argrw{"wrr"}
# PxrPhasorNoise.osl:882
#                             float dotQNdir = dot(dir, QN);
	dot		___554_dotQNdir ___554_dir QN 	%filename{"PxrPhasorNoise.osl"} %line{882} %argrw{"wrr"}
# PxrPhasorNoise.osl:887
#                             if (frequencyFlatten > 0.0) {
	gt		$tmp277 frequencyFlatten $const3 	%line{887} %argrw{"wrr"}
	if		$tmp277 456 456 	%argrw{"r"}
# PxrPhasorNoise.osl:888
#                                 float fFlattenDot = mix(0.0, dotQNdir, frequencyFlatten);
	mix		___559_fFlattenDot $const3 ___554_dotQNdir frequencyFlatten 	%line{888} %argrw{"wrrr"}
# PxrPhasorNoise.osl:889
#                                 float fFlattenDivisor = max(EPSILON, sqrt(1.0 - fFlattenDot * fFlattenDot));
	mul		$tmp279 ___559_fFlattenDot ___559_fFlattenDot 	%line{889} %argrw{"wrr"}
	sub		$tmp280 $const12 $tmp279 	%argrw{"wrr"}
	sqrt		$tmp278 $tmp280 	%argrw{"wr"}
	max		___559_fFlattenDivisor $const38 $tmp278 	%argrw{"wrr"}
# PxrPhasorNoise.osl:890
#                                 f = mix(f, f / fFlattenDivisor, frequencyFlatten);
	div		$tmp281 ___554_f ___559_fFlattenDivisor 	%line{890} %argrw{"wrr"}
	mix		___554_f ___554_f $tmp281 frequencyFlatten 	%argrw{"wrrr"}
# PxrPhasorNoise.osl:893
#                             sincos(M_2PI * (f * dot(x, dir) + phi + phaseOffset), s, c);
	dot		$tmp282 ___539_x ___554_dir 	%line{893} %argrw{"wrr"}
	mul		$tmp283 ___554_f $tmp282 	%argrw{"wrr"}
	add		$tmp284 $tmp283 ___554_phi 	%argrw{"wrr"}
	add		$tmp285 $tmp284 phaseOffset 	%argrw{"wrr"}
	mul		$tmp286 $const39 $tmp285 	%argrw{"wrr"}
	sincos		$tmp286 ___539_s ___539_c 	%argrw{"rww"}
# PxrPhasorNoise.osl:896
#                             phasorNoise[fOct] += vector(c, s, 1.0) * vector(pOctWeight * a);
	aref		$tmp287 phasorNoise ___551_fOct 	%line{896} %argrw{"wrr"}
	vector		$tmp288 ___539_c ___539_s $const12 	%argrw{"wrrr"}
	mul		$tmp290 ___552_pOctWeight ___539_a 	%argrw{"wrr"}
	assign		$tmp289 $tmp290 	%argrw{"wr"}
	mul		$tmp291 $tmp288 $tmp289 	%argrw{"wrr"}
	add		$tmp292 $tmp287 $tmp291 	%argrw{"wrr"}
	aassign		phasorNoise ___551_fOct $tmp292 	%argrw{"wrr"}
# PxrPhasorNoise.osl:905
#                             filterWidth[fOct] += abs(f * sqrt(1.0 - dotQNdir*dotQNdir)) * Qradius;
	aref		$tmp293 filterWidth ___551_fOct 	%line{905} %argrw{"wrr"}
	mul		$tmp296 ___554_dotQNdir ___554_dotQNdir 	%argrw{"wrr"}
	sub		$tmp297 $const12 $tmp296 	%argrw{"wrr"}
	sqrt		$tmp295 $tmp297 	%argrw{"wr"}
	mul		$tmp298 ___554_f $tmp295 	%argrw{"wrr"}
	abs		$tmp294 $tmp298 	%argrw{"wr"}
	mul		$tmp299 $tmp294 Qradius 	%argrw{"wrr"}
	add		$tmp300 $tmp293 $tmp299 	%argrw{"wrr"}
	aassign		filterWidth ___551_fOct $tmp300 	%argrw{"wrr"}
# PxrPhasorNoise.osl:907
#                             pOctScale  /= phasorOctaveScale;
	div		___552_pOctScale ___552_pOctScale phasorOctaveScale 	%line{907} %argrw{"wrr"}
# PxrPhasorNoise.osl:908
#                             pOctOffset += phasorOctaveOffset;
	add		___552_pOctOffset ___552_pOctOffset phasorOctaveOffset 	%line{908} %argrw{"wrr"}
# PxrPhasorNoise.osl:909
#                             pOctRotate += phasorOctaveRotate;
	add		___552_pOctRotate ___552_pOctRotate phasorOctaveRotate 	%line{909} %argrw{"wrr"}
# PxrPhasorNoise.osl:910
#                             pOctWeight *= phasorOctaveWeight;
	mul		___552_pOctWeight ___552_pOctWeight phasorOctaveWeight 	%line{910} %argrw{"wrr"}
# PxrPhasorNoise.osl:845
#                         for (int pOct=0; pOct<phasorOctaves; pOct++) {
	assign		$tmp301 ___553_pOct 	%line{845} %argrw{"wr"}
	add		___553_pOct ___553_pOct $const10 	%argrw{"wrr"}
# PxrPhasorNoise.osl:913
#                         fOctScale  /= fractalOctaveScale;
	div		___539_fOctScale ___539_fOctScale fractalOctaveScale 	%line{913} %argrw{"wrr"}
# PxrPhasorNoise.osl:914
#                         fOctOffset += fractalOctaveOffset;
	add		___539_fOctOffset ___539_fOctOffset fractalOctaveOffset 	%line{914} %argrw{"wrr"}
# PxrPhasorNoise.osl:915
#                         fOctRotate += fractalOctaveRotate;
	add		___539_fOctRotate ___539_fOctRotate fractalOctaveRotate 	%line{915} %argrw{"wrr"}
# PxrPhasorNoise.osl:840
#                     for (int fOct=0; fOct<fractalOctaves; fOct++) {
	assign		$tmp302 ___551_fOct 	%line{840} %argrw{"wr"}
	add		___551_fOct ___551_fOct $const10 	%argrw{"wrr"}
# PxrPhasorNoise.osl:758
#                 for (float impulse=0.0; impulse<kernelImpulses; impulse++) {
	assign		$tmp303 ___538_impulse 	%line{758} %argrw{"wr"}
	add		___538_impulse ___538_impulse $const12 	%argrw{"wrr"}
# PxrPhasorNoise.osl:744
#             for (float k=-_neighbors[2]; k<=_neighbors[2]; k++) {
	assign		$tmp304 ___536_k 	%line{744} %argrw{"wr"}
	add		___536_k ___536_k $const12 	%argrw{"wrr"}
# PxrPhasorNoise.osl:743
#         for (float j=-_neighbors[1]; j<=_neighbors[1]; j++) {
	assign		$tmp305 ___534_j 	%line{743} %argrw{"wr"}
	add		___534_j ___534_j $const12 	%argrw{"wrr"}
# PxrPhasorNoise.osl:742
#     for (float i=-_neighbors[0]; i<=_neighbors[0]; i++) {
	assign		$tmp306 ___532_i 	%line{742} %argrw{"wr"}
	add		___532_i ___532_i $const12 	%argrw{"wrr"}
# PxrPhasorNoise.osl:924
#     resultF      = 0.0;
	assign		resultF $const3 	%line{924} %argrw{"wr"}
# PxrPhasorNoise.osl:925
#     float tmpVal = 0.0;
	assign		tmpVal $const3 	%line{925} %argrw{"wr"}
# PxrPhasorNoise.osl:926
#     float sum    = 0.0;
	assign		sum $const3 	%line{926} %argrw{"wr"}
# PxrPhasorNoise.osl:928
#     if (fractalHarmonicMode == FRACTALHARMONICMODE_MULTIPLY) resultF = 1.0;
	eq		$tmp307 fractalHarmonicMode $const17 	%line{928} %argrw{"wrr"}
	if		$tmp307 503 503 	%argrw{"r"}
	assign		resultF $const12 	%argrw{"wr"}
# PxrPhasorNoise.osl:929
#     if (fractalHarmonicMode == FRACTALHARMONICMODE_NUDGE)    resultF = 0.5;
	eq		$tmp308 fractalHarmonicMode $const23 	%line{929} %argrw{"wrr"}
	if		$tmp308 506 506 	%argrw{"r"}
	assign		resultF $const34 	%argrw{"wr"}
# PxrPhasorNoise.osl:932
#     float average = 0.5;
	assign		average $const34 	%line{932} %argrw{"wr"}
# PxrPhasorNoise.osl:933
#     if (shapingMode == SHAPINGMODE_PULSE) {
	eq		$tmp309 shapingMode $const17 	%line{933} %argrw{"wrr"}
	if		$tmp309 510 543 	%argrw{"r"}
# PxrPhasorNoise.osl:934
#         average = shapingPulseWidth;
	assign		average shapingPulseWidth 	%line{934} %argrw{"wr"}
# PxrPhasorNoise.osl:935
#     } else if (shapingMode == SHAPINGMODE_PULSECENTERED) {
	eq		$tmp310 shapingMode $const19 	%line{935} %argrw{"wrr"}
	if		$tmp310 513 543 	%argrw{"r"}
# PxrPhasorNoise.osl:936
#         average = shapingPulseWidth;
	assign		average shapingPulseWidth 	%line{936} %argrw{"wr"}
# PxrPhasorNoise.osl:937
#     } else if (shapingMode == SHAPINGMODE_SPLINE) {
	eq		$tmp311 shapingMode $const27 	%line{937} %argrw{"wrr"}
	if		$tmp311 543 543 	%argrw{"r"}
# PxrPhasorNoise.osl:938
#         average = 0.0;
	assign		average $const3 	%line{938} %argrw{"wr"}
# PxrPhasorNoise.osl:939
#         float splineWidth = 0.0;
	assign		___562_splineWidth $const3 	%line{939} %argrw{"wr"}
# PxrPhasorNoise.osl:942
#         for (int i=0; i<shapingSpline-1; i++) {
	for		$tmp314 519 522 538 540 	%line{942} %argrw{"r"}
	assign		___563_i $const1 	%argrw{"wr"}
	sub		$tmp312 shapingSpline $const10 	%argrw{"wrr"}
	lt		$tmp313 ___563_i $tmp312 	%argrw{"wrr"}
	neq		$tmp314 $tmp313 $const1 	%argrw{"wrr"}
# PxrPhasorNoise.osl:943
#             average += (shapingSpline_Knots[i+1] - shapingSpline_Knots[i])
	add		$tmp315 ___563_i $const10 	%line{943} %argrw{"wrr"}
	aref		$tmp316 shapingSpline_Knots $tmp315 	%argrw{"wrr"}
	aref		$tmp317 shapingSpline_Knots ___563_i 	%argrw{"wrr"}
	sub		$tmp318 $tmp316 $tmp317 	%argrw{"wrr"}
# PxrPhasorNoise.osl:944
#                      * (shapingSpline_Floats[i+1] + shapingSpline_Floats[i])
	add		$tmp319 ___563_i $const10 	%line{944} %argrw{"wrr"}
	aref		$tmp320 shapingSpline_Floats $tmp319 	%argrw{"wrr"}
	aref		$tmp321 shapingSpline_Floats ___563_i 	%argrw{"wrr"}
	add		$tmp322 $tmp320 $tmp321 	%argrw{"wrr"}
	mul		$tmp323 $tmp318 $tmp322 	%argrw{"wrr"}
# PxrPhasorNoise.osl:945
#                      * 0.5;
	mul		$tmp324 $tmp323 $const34 	%line{945} %argrw{"wrr"}
	add		average average $tmp324 	%argrw{"wrr"}
# PxrPhasorNoise.osl:946
#             splineWidth += shapingSpline_Knots[i+1] - shapingSpline_Knots[i];
	add		$tmp325 ___563_i $const10 	%line{946} %argrw{"wrr"}
	aref		$tmp326 shapingSpline_Knots $tmp325 	%argrw{"wrr"}
	aref		$tmp327 shapingSpline_Knots ___563_i 	%argrw{"wrr"}
	sub		$tmp328 $tmp326 $tmp327 	%argrw{"wrr"}
	add		___562_splineWidth ___562_splineWidth $tmp328 	%argrw{"wrr"}
# PxrPhasorNoise.osl:942
#         for (int i=0; i<shapingSpline-1; i++) {
	assign		$tmp329 ___563_i 	%line{942} %argrw{"wr"}
	add		___563_i ___563_i $const10 	%argrw{"wrr"}
# PxrPhasorNoise.osl:948
#         if (splineWidth > 0.0) average /= splineWidth;
	gt		$tmp330 ___562_splineWidth $const3 	%line{948} %argrw{"wrr"}
	if		$tmp330 543 543 	%argrw{"r"}
	div		average average ___562_splineWidth 	%argrw{"wrr"}
# PxrPhasorNoise.osl:951
#     float fOctWeight = 1.0;
	assign		fOctWeight $const12 	%line{951} %argrw{"wr"}
# PxrPhasorNoise.osl:952
#     for (int fOct=0; fOct<fractalOctaves; fOct++) {
	for		$tmp332 546 548 787 789 	%line{952} %argrw{"r"}
	assign		___565_fOct $const1 	%argrw{"wr"}
	lt		$tmp331 ___565_fOct fractalOctaves 	%argrw{"wrr"}
	neq		$tmp332 $tmp331 $const1 	%argrw{"wrr"}
# PxrPhasorNoise.osl:954
#         filterWidth[fOct] /= filterWidthCount;
	aref		$tmp333 filterWidth ___565_fOct 	%line{954} %argrw{"wrr"}
	div		$tmp334 $tmp333 filterWidthCount 	%argrw{"wrr"}
	aassign		filterWidth ___565_fOct $tmp334 	%argrw{"wrr"}
# PxrPhasorNoise.osl:956
#         float hOctScale  = 1.0;
	assign		___566_hOctScale $const12 	%line{956} %argrw{"wr"}
# PxrPhasorNoise.osl:957
#         float hOctWeight = 1.0;
	assign		___566_hOctWeight $const12 	%line{957} %argrw{"wr"}
# PxrPhasorNoise.osl:958
#         float hOctOffset = 0.0;
	assign		___566_hOctOffset $const3 	%line{958} %argrw{"wr"}
# PxrPhasorNoise.osl:959
#         for (int hOct=0; hOct<harmonicOctaves; hOct++) {
	for		$tmp336 556 558 784 786 	%line{959} %argrw{"r"}
	assign		___567_hOct $const1 	%argrw{"wr"}
	lt		$tmp335 ___567_hOct harmonicOctaves 	%argrw{"wrr"}
	neq		$tmp336 $tmp335 $const1 	%argrw{"wrr"}
# PxrPhasorNoise.osl:960
#             float  weight      = fOctWeight * hOctWeight;
	mul		___568_weight fOctWeight ___566_hOctWeight 	%line{960} %argrw{"wrr"}
# PxrPhasorNoise.osl:961
#             vector pn          = phasorNoise[fOct];
	aref		___568_pn phasorNoise ___565_fOct 	%line{961} %argrw{"wrr"}
# PxrPhasorNoise.osl:962
#             float  phase       = atan2(pn[1], pn[0]) * hOctScale + hOctOffset * M_2PI;
	compref		$tmp338 ___568_pn $const10 	%line{962} %argrw{"wrr"}
	compref		$tmp339 ___568_pn $const1 	%argrw{"wrr"}
	atan2		$tmp337 $tmp338 $tmp339 	%argrw{"wrr"}
	mul		$tmp340 $tmp337 ___566_hOctScale 	%argrw{"wrr"}
	mul		$tmp341 ___566_hOctOffset $const39 	%argrw{"wrr"}
	add		___568_phase $tmp340 $tmp341 	%argrw{"wrr"}
# PxrPhasorNoise.osl:963
#             float  phaseu      = mod(phase / M_2PI + 0.5 * hOctScale, 1.0);
	div		$tmp342 ___568_phase $const39 	%line{963} %argrw{"wrr"}
	mul		$tmp343 $const34 ___566_hOctScale 	%argrw{"wrr"}
	add		$tmp344 $tmp342 $tmp343 	%argrw{"wrr"}
	functioncall	$const37 574 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:132
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp346 $tmp344 $const12 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{132} %argrw{"wrr"}
	floor		$tmp345 $tmp346 	%argrw{"wr"}
	mul		$tmp347 $const12 $tmp345 	%argrw{"wrr"}
	sub		___568_phaseu $tmp344 $tmp347 	%argrw{"wrr"}
# PxrPhasorNoise.osl:964
#             float  filterwidth = filterWidth[fOct] * hOctScale;
	aref		$tmp348 filterWidth ___565_fOct 	%filename{"PxrPhasorNoise.osl"} %line{964} %argrw{"wrr"}
	mul		___568_filterwidth $tmp348 ___566_hOctScale 	%argrw{"wrr"}
# PxrPhasorNoise.osl:968
#             if (filterwidth < 0.5) {
	lt		$tmp349 ___568_filterwidth $const34 	%line{968} %argrw{"wrr"}
	if		$tmp349 734 735 	%argrw{"r"}
# PxrPhasorNoise.osl:970
#                 if (shapingMode == SHAPINGMODE_SINE) {
	eq		$tmp350 shapingMode $const1 	%line{970} %argrw{"wrr"}
	if		$tmp350 583 653 	%argrw{"r"}
# PxrPhasorNoise.osl:971
#                     tmpVal = sin(phase) * 0.5 + 0.5;
	sin		$tmp351 ___568_phase 	%line{971} %argrw{"wr"}
	mul		$tmp352 $tmp351 $const34 	%argrw{"wrr"}
	add		tmpVal $tmp352 $const34 	%argrw{"wrr"}
# PxrPhasorNoise.osl:972
#                 } else if (shapingMode == SHAPINGMODE_COSINE) {
	eq		$tmp353 shapingMode $const10 	%line{972} %argrw{"wrr"}
	if		$tmp353 588 653 	%argrw{"r"}
# PxrPhasorNoise.osl:973
#                     tmpVal = cos(phase) * 0.5 + 0.5;
	cos		$tmp354 ___568_phase 	%line{973} %argrw{"wr"}
	mul		$tmp355 $tmp354 $const34 	%argrw{"wrr"}
	add		tmpVal $tmp355 $const34 	%argrw{"wrr"}
# PxrPhasorNoise.osl:974
#                 } else if (shapingMode == SHAPINGMODE_SAWTOOTH) {
	eq		$tmp356 shapingMode $const11 	%line{974} %argrw{"wrr"}
	if		$tmp356 591 653 	%argrw{"r"}
# PxrPhasorNoise.osl:975
#                     tmpVal = phaseu;
	assign		tmpVal ___568_phaseu 	%line{975} %argrw{"wr"}
# PxrPhasorNoise.osl:976
#                 } else if (shapingMode == SHAPINGMODE_PULSE) {
	eq		$tmp357 shapingMode $const17 	%line{976} %argrw{"wrr"}
	if		$tmp357 594 653 	%argrw{"r"}
# PxrPhasorNoise.osl:977
#                     tmpVal = phaseu;
	assign		tmpVal ___568_phaseu 	%line{977} %argrw{"wr"}
# PxrPhasorNoise.osl:978
#                 } else if (shapingMode == SHAPINGMODE_PULSECENTERED) {
	eq		$tmp358 shapingMode $const19 	%line{978} %argrw{"wrr"}
	if		$tmp358 597 653 	%argrw{"r"}
# PxrPhasorNoise.osl:979
#                     tmpVal = phaseu;
	assign		tmpVal ___568_phaseu 	%line{979} %argrw{"wr"}
# PxrPhasorNoise.osl:981
#                 } else if (shapingMode == SHAPINGMODE_GABORSINE) {
	eq		$tmp359 shapingMode $const21 	%line{981} %argrw{"wrr"}
	if		$tmp359 611 653 	%argrw{"r"}
# PxrPhasorNoise.osl:982
#                     float intensity = length(vector(pn[0], pn[1], 0.0));
	compref		$tmp361 ___568_pn $const1 	%line{982} %argrw{"wrr"}
	compref		$tmp362 ___568_pn $const10 	%argrw{"wrr"}
	vector		$tmp360 $tmp361 $tmp362 $const3 	%argrw{"wrrr"}
	length		___575_intensity $tmp360 	%argrw{"wr"}
# PxrPhasorNoise.osl:983
#                     float samples   = pn[2];
	compref		___575_samples ___568_pn $const11 	%line{983} %argrw{"wrr"}
# PxrPhasorNoise.osl:984
#                     tmpVal = sin(phase) * intensity / sqrt(samples) * 0.5 * 0.5 + 0.5;
	sin		$tmp363 ___568_phase 	%line{984} %argrw{"wr"}
	mul		$tmp364 $tmp363 ___575_intensity 	%argrw{"wrr"}
	sqrt		$tmp365 ___575_samples 	%argrw{"wr"}
	div		$tmp366 $tmp364 $tmp365 	%argrw{"wrr"}
	mul		$tmp367 $tmp366 $const34 	%argrw{"wrr"}
	mul		$tmp368 $tmp367 $const34 	%argrw{"wrr"}
	add		tmpVal $tmp368 $const34 	%argrw{"wrr"}
# PxrPhasorNoise.osl:985
#                 } else if (shapingMode == SHAPINGMODE_GABORCOSINE) {
	eq		$tmp369 shapingMode $const23 	%line{985} %argrw{"wrr"}
	if		$tmp369 625 653 	%argrw{"r"}
# PxrPhasorNoise.osl:986
#                     float intensity = length(vector(pn[0], pn[1], 0.0));
	compref		$tmp371 ___568_pn $const1 	%line{986} %argrw{"wrr"}
	compref		$tmp372 ___568_pn $const10 	%argrw{"wrr"}
	vector		$tmp370 $tmp371 $tmp372 $const3 	%argrw{"wrrr"}
	length		___576_intensity $tmp370 	%argrw{"wr"}
# PxrPhasorNoise.osl:987
#                     float samples   = pn[2];
	compref		___576_samples ___568_pn $const11 	%line{987} %argrw{"wrr"}
# PxrPhasorNoise.osl:988
#                     tmpVal = cos(phase) * intensity / sqrt(samples) * 0.5 * 0.5 + 0.5;
	cos		$tmp373 ___568_phase 	%line{988} %argrw{"wr"}
	mul		$tmp374 $tmp373 ___576_intensity 	%argrw{"wrr"}
	sqrt		$tmp375 ___576_samples 	%argrw{"wr"}
	div		$tmp376 $tmp374 $tmp375 	%argrw{"wrr"}
	mul		$tmp377 $tmp376 $const34 	%argrw{"wrr"}
	mul		$tmp378 $tmp377 $const34 	%argrw{"wrr"}
	add		tmpVal $tmp378 $const34 	%argrw{"wrr"}
# PxrPhasorNoise.osl:989
#                 } else if (shapingMode == SHAPINGMODE_SPLINE) {
	eq		$tmp379 shapingMode $const27 	%line{989} %argrw{"wrr"}
	if		$tmp379 652 653 	%argrw{"r"}
# PxrPhasorNoise.osl:990
#                     float x = phaseu;
	assign		___577_x ___568_phaseu 	%line{990} %argrw{"wr"}
# PxrPhasorNoise.osl:994
#                     currentPositions[0] = shapingSpline_Knots[0];
	aref		$tmp380 shapingSpline_Knots $const1 	%line{994} %argrw{"wrr"}
	aassign		___577_currentPositions $const1 $tmp380 	%argrw{"wrr"}
# PxrPhasorNoise.osl:995
#                     currentFloat[0] = shapingSpline_Floats[0];
	aref		$tmp381 shapingSpline_Floats $const1 	%line{995} %argrw{"wrr"}
	aassign		___577_currentFloat $const1 $tmp381 	%argrw{"wrr"}
# PxrPhasorNoise.osl:996
#                     for (int i=0; i<16; i++)
	for		$tmp383 634 636 642 644 	%line{996} %argrw{"r"}
	assign		___578_i $const1 	%argrw{"wr"}
	lt		$tmp382 ___578_i $const40 	%argrw{"wrr"}
	neq		$tmp383 $tmp382 $const1 	%argrw{"wrr"}
# PxrPhasorNoise.osl:998
#                         currentPositions[i+1] = shapingSpline_Knots[i];
	aref		$tmp384 shapingSpline_Knots ___578_i 	%line{998} %argrw{"wrr"}
	add		$tmp385 ___578_i $const10 	%argrw{"wrr"}
	aassign		___577_currentPositions $tmp385 $tmp384 	%argrw{"wrr"}
# PxrPhasorNoise.osl:999
#                         currentFloat[i+1] = shapingSpline_Floats[i];
	aref		$tmp386 shapingSpline_Floats ___578_i 	%line{999} %argrw{"wrr"}
	add		$tmp387 ___578_i $const10 	%argrw{"wrr"}
	aassign		___577_currentFloat $tmp387 $tmp386 	%argrw{"wrr"}
# PxrPhasorNoise.osl:996
#                     for (int i=0; i<16; i++)
	assign		$tmp388 ___578_i 	%line{996} %argrw{"wr"}
	add		___578_i ___578_i $const10 	%argrw{"wrr"}
# PxrPhasorNoise.osl:1001
#                     currentPositions[17] = shapingSpline_Knots[15];
	aref		$tmp389 shapingSpline_Knots $const41 	%line{1001} %argrw{"wrr"}
	aassign		___577_currentPositions $const42 $tmp389 	%argrw{"wrr"}
# PxrPhasorNoise.osl:1002
#                     currentFloat[17] = shapingSpline_Floats[15];
	aref		$tmp390 shapingSpline_Floats $const41 	%line{1002} %argrw{"wrr"}
	aassign		___577_currentFloat $const42 $tmp390 	%argrw{"wrr"}
# PxrPhasorNoise.osl:1004
#                     x = splineinverse(shapingSpline_Interpolation, x, shapingSpline + 2,
	add		$tmp391 shapingSpline $const11 	%line{1004} %argrw{"wrr"}
	splineinverse	___577_x shapingSpline_Interpolation ___577_x $tmp391 ___577_currentPositions 	%argrw{"wrrrr"}
# PxrPhasorNoise.osl:1006
#                     tmpVal = spline(shapingSpline_Interpolation, x, shapingSpline + 2,
	add		$tmp392 shapingSpline $const11 	%line{1006} %argrw{"wrr"}
	spline		tmpVal shapingSpline_Interpolation ___577_x $tmp392 ___577_currentFloat 	%argrw{"wrrrr"}
# PxrPhasorNoise.osl:1009
#                     tmpVal = 0.5;
	assign		tmpVal $const34 	%line{1009} %argrw{"wr"}
# PxrPhasorNoise.osl:1012
#                 if (shapingSoften > 0.0) {
	gt		$tmp393 shapingSoften $const3 	%line{1012} %argrw{"wrr"}
	if		$tmp393 663 663 	%argrw{"r"}
# PxrPhasorNoise.osl:1015
#                     float intensity = length(vector(pn[0], pn[1], 0.0));
	compref		$tmp395 ___568_pn $const1 	%line{1015} %argrw{"wrr"}
	compref		$tmp396 ___568_pn $const10 	%argrw{"wrr"}
	vector		$tmp394 $tmp395 $tmp396 $const3 	%argrw{"wrrr"}
	length		___581_intensity $tmp394 	%argrw{"wr"}
# PxrPhasorNoise.osl:1016
#                     tmpVal = mix(tmpVal, average, exp(-intensity / shapingSoften));
	neg		$tmp398 ___581_intensity 	%line{1016} %argrw{"wr"}
	div		$tmp399 $tmp398 shapingSoften 	%argrw{"wrr"}
	exp		$tmp397 $tmp399 	%argrw{"wr"}
	mix		tmpVal tmpVal average $tmp397 	%argrw{"wrrr"}
# PxrPhasorNoise.osl:1019
#                 if (shapingMode == SHAPINGMODE_PULSE) {
	eq		$tmp400 shapingMode $const17 	%line{1019} %argrw{"wrr"}
	if		$tmp400 685 731 	%argrw{"r"}
# PxrPhasorNoise.osl:1020
#                     tmpVal = aastep(1.0 - shapingPulseWidth, tmpVal);
	sub		$tmp401 $const12 shapingPulseWidth 	%line{1020} %argrw{"wrr"}
	functioncall	$const43 685 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:402
#     return aastep (edge, s, filterwidth(edge), filterwidth(s));
	filterwidth	$tmp402 $tmp401 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{402} %argrw{"wr"} %argderivs{1}
	filterwidth	$tmp403 tmpVal 	%argrw{"wr"} %argderivs{1}
	functioncall	$const43 685 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:393
#     float width = fabs(dedge) + fabs(ds);
	fabs		$tmp404 $tmp402 	%line{393} %argrw{"wr"}
	fabs		$tmp405 $tmp403 	%argrw{"wr"}
	add		___285_width $tmp404 $tmp405 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:394
#     float halfwidth = 0.5*width;
	mul		___285_halfwidth $const34 ___285_width 	%line{394} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:395
#     float e1 = edge-halfwidth;
	sub		___285_e1 $tmp401 ___285_halfwidth 	%line{395} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:396
#     return (s <= e1) ? 0.0 : ((s >= (edge+halfwidth)) ? 1.0 : (s-e1)/width);
	le		$tmp406 tmpVal ___285_e1 	%line{396} %argrw{"wrr"}
	if		$tmp406 678 684 	%argrw{"r"}
	assign		tmpVal $const3 	%argrw{"wr"}
	add		$tmp407 $tmp401 ___285_halfwidth 	%argrw{"wrr"}
	ge		$tmp408 tmpVal $tmp407 	%argrw{"wrr"}
	if		$tmp408 682 684 	%argrw{"r"}
	assign		tmpVal $const12 	%argrw{"wr"}
	sub		$tmp409 tmpVal ___285_e1 	%argrw{"wrr"}
	div		tmpVal $tmp409 ___285_width 	%argrw{"wrr"}
	return
# PxrPhasorNoise.osl:1021
#                 } else if (shapingMode == SHAPINGMODE_PULSECENTERED) {
	eq		$tmp410 shapingMode $const19 	%filename{"PxrPhasorNoise.osl"} %line{1021} %argrw{"wrr"}
	if		$tmp410 731 731 	%argrw{"r"}
# PxrPhasorNoise.osl:1022
#                     float tmp1 = aastep(0.5 - shapingPulseWidth * 0.5, tmpVal);
	mul		$tmp411 shapingPulseWidth $const34 	%line{1022} %argrw{"wrr"}
	sub		$tmp412 $const34 $tmp411 	%argrw{"wrr"}
	functioncall	$const43 708 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:402
#     return aastep (edge, s, filterwidth(edge), filterwidth(s));
	filterwidth	$tmp413 $tmp412 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{402} %argrw{"wr"} %argderivs{1}
	filterwidth	$tmp414 tmpVal 	%argrw{"wr"} %argderivs{1}
	functioncall	$const43 708 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:393
#     float width = fabs(dedge) + fabs(ds);
	fabs		$tmp415 $tmp413 	%line{393} %argrw{"wr"}
	fabs		$tmp416 $tmp414 	%argrw{"wr"}
	add		___285_width $tmp415 $tmp416 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:394
#     float halfwidth = 0.5*width;
	mul		___285_halfwidth $const34 ___285_width 	%line{394} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:395
#     float e1 = edge-halfwidth;
	sub		___285_e1 $tmp412 ___285_halfwidth 	%line{395} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:396
#     return (s <= e1) ? 0.0 : ((s >= (edge+halfwidth)) ? 1.0 : (s-e1)/width);
	le		$tmp417 tmpVal ___285_e1 	%line{396} %argrw{"wrr"}
	if		$tmp417 701 707 	%argrw{"r"}
	assign		___583_tmp1 $const3 	%argrw{"wr"}
	add		$tmp418 $tmp412 ___285_halfwidth 	%argrw{"wrr"}
	ge		$tmp419 tmpVal $tmp418 	%argrw{"wrr"}
	if		$tmp419 705 707 	%argrw{"r"}
	assign		___583_tmp1 $const12 	%argrw{"wr"}
	sub		$tmp420 tmpVal ___285_e1 	%argrw{"wrr"}
	div		___583_tmp1 $tmp420 ___285_width 	%argrw{"wrr"}
	return
# PxrPhasorNoise.osl:1023
#                     float tmp2 = aastep(0.5 + shapingPulseWidth * 0.5, tmpVal);
	mul		$tmp421 shapingPulseWidth $const34 	%filename{"PxrPhasorNoise.osl"} %line{1023} %argrw{"wrr"}
	add		$tmp422 $const34 $tmp421 	%argrw{"wrr"}
	functioncall	$const43 729 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:402
#     return aastep (edge, s, filterwidth(edge), filterwidth(s));
	filterwidth	$tmp423 $tmp422 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{402} %argrw{"wr"} %argderivs{1}
	filterwidth	$tmp424 tmpVal 	%argrw{"wr"} %argderivs{1}
	functioncall	$const43 729 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:393
#     float width = fabs(dedge) + fabs(ds);
	fabs		$tmp425 $tmp423 	%line{393} %argrw{"wr"}
	fabs		$tmp426 $tmp424 	%argrw{"wr"}
	add		___285_width $tmp425 $tmp426 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:394
#     float halfwidth = 0.5*width;
	mul		___285_halfwidth $const34 ___285_width 	%line{394} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:395
#     float e1 = edge-halfwidth;
	sub		___285_e1 $tmp422 ___285_halfwidth 	%line{395} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:396
#     return (s <= e1) ? 0.0 : ((s >= (edge+halfwidth)) ? 1.0 : (s-e1)/width);
	le		$tmp427 tmpVal ___285_e1 	%line{396} %argrw{"wrr"}
	if		$tmp427 722 728 	%argrw{"r"}
	assign		___583_tmp2 $const3 	%argrw{"wr"}
	add		$tmp428 $tmp422 ___285_halfwidth 	%argrw{"wrr"}
	ge		$tmp429 tmpVal $tmp428 	%argrw{"wrr"}
	if		$tmp429 726 728 	%argrw{"r"}
	assign		___583_tmp2 $const12 	%argrw{"wr"}
	sub		$tmp430 tmpVal ___285_e1 	%argrw{"wrr"}
	div		___583_tmp2 $tmp430 ___285_width 	%argrw{"wrr"}
	return
# PxrPhasorNoise.osl:1024
#                     tmpVal = tmp1 * (1.0 - tmp2);
	sub		$tmp431 $const12 ___583_tmp2 	%filename{"PxrPhasorNoise.osl"} %line{1024} %argrw{"wrr"}
	mul		tmpVal ___583_tmp1 $tmp431 	%argrw{"wrr"}
# PxrPhasorNoise.osl:1027
#                 tmpVal = StdNoise_FilterAttenuate(tmpVal, filterwidth, average);
	functioncall	$const44 734 	%line{1027} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/StdNoise.h:55
#     return (mix(x, k, smoothstep(0.125, 0.5, dx)));
	smoothstep	$tmp432 $const45 $const34 ___568_filterwidth 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/StdNoise.h"} %line{55} %argrw{"wrrr"}
	mix		tmpVal tmpVal average $tmp432 	%argrw{"wrrr"}
# PxrPhasorNoise.osl:1029
#                 tmpVal = average;
	assign		tmpVal average 	%filename{"PxrPhasorNoise.osl"} %line{1029} %argrw{"wr"}
# PxrPhasorNoise.osl:1033
#             if (fractalHarmonicMode == FRACTALHARMONICMODE_ADD) {
	eq		$tmp433 fractalHarmonicMode $const1 	%line{1033} %argrw{"wrr"}
	if		$tmp433 740 781 	%argrw{"r"}
# PxrPhasorNoise.osl:1034
#                 resultF += tmpVal * weight;
	mul		$tmp434 tmpVal ___568_weight 	%line{1034} %argrw{"wrr"}
	add		resultF resultF $tmp434 	%argrw{"wrr"}
# PxrPhasorNoise.osl:1035
#                 sum += weight;
	add		sum sum ___568_weight 	%line{1035} %argrw{"wrr"}
# PxrPhasorNoise.osl:1036
#             } else if (fractalHarmonicMode == FRACTALHARMONICMODE_SCREEN) {
	eq		$tmp435 fractalHarmonicMode $const10 	%line{1036} %argrw{"wrr"}
	if		$tmp435 748 781 	%argrw{"r"}
# PxrPhasorNoise.osl:1037
#                 resultF = 1.0 - (1.0 -resultF) * (1.0 - tmpVal * weight);
	sub		$tmp436 $const12 resultF 	%line{1037} %argrw{"wrr"}
	mul		$tmp437 tmpVal ___568_weight 	%argrw{"wrr"}
	sub		$tmp438 $const12 $tmp437 	%argrw{"wrr"}
	mul		$tmp439 $tmp436 $tmp438 	%argrw{"wrr"}
	sub		resultF $const12 $tmp439 	%argrw{"wrr"}
# PxrPhasorNoise.osl:1038
#                 sum = 1.0;
	assign		sum $const12 	%line{1038} %argrw{"wr"}
# PxrPhasorNoise.osl:1039
#             } else if (fractalHarmonicMode == FRACTALHARMONICMODE_MIX) {
	eq		$tmp440 fractalHarmonicMode $const11 	%line{1039} %argrw{"wrr"}
	if		$tmp440 752 781 	%argrw{"r"}
# PxrPhasorNoise.osl:1040
#                 resultF = mix(resultF, tmpVal, weight);
	mix		resultF resultF tmpVal ___568_weight 	%line{1040} %argrw{"wrrr"}
# PxrPhasorNoise.osl:1041
#                 sum = 1.0;
	assign		sum $const12 	%line{1041} %argrw{"wr"}
# PxrPhasorNoise.osl:1042
#             } else if (fractalHarmonicMode == FRACTALHARMONICMODE_MULTIPLY) {
	eq		$tmp441 fractalHarmonicMode $const17 	%line{1042} %argrw{"wrr"}
	if		$tmp441 759 781 	%argrw{"r"}
# PxrPhasorNoise.osl:1043
#                 resultF = resultF * (1.0 - (1.0 - tmpVal) * weight);
	sub		$tmp442 $const12 tmpVal 	%line{1043} %argrw{"wrr"}
	mul		$tmp443 $tmp442 ___568_weight 	%argrw{"wrr"}
	sub		$tmp444 $const12 $tmp443 	%argrw{"wrr"}
	mul		resultF resultF $tmp444 	%argrw{"wrr"}
# PxrPhasorNoise.osl:1044
#                 sum = 1.0;
	assign		sum $const12 	%line{1044} %argrw{"wr"}
# PxrPhasorNoise.osl:1046
#             } else if (fractalHarmonicMode == FRACTALHARMONICMODE_MAX) {
	eq		$tmp445 fractalHarmonicMode $const19 	%line{1046} %argrw{"wrr"}
	if		$tmp445 764 781 	%argrw{"r"}
# PxrPhasorNoise.osl:1047
#                 resultF = max(resultF, (tmpVal * weight));
	mul		$tmp446 tmpVal ___568_weight 	%line{1047} %argrw{"wrr"}
	max		resultF resultF $tmp446 	%argrw{"wrr"}
# PxrPhasorNoise.osl:1048
#                 sum = 1.0;
	assign		sum $const12 	%line{1048} %argrw{"wr"}
# PxrPhasorNoise.osl:1049
#             } else if (fractalHarmonicMode == FRACTALHARMONICMODE_OVERANDUNDER) {
	eq		$tmp447 fractalHarmonicMode $const21 	%line{1049} %argrw{"wrr"}
	if		$tmp447 771 781 	%argrw{"r"}
# PxrPhasorNoise.osl:1051
#                 resultF = resultF + (1.0 - resultF) * (tmpVal * weight);
	sub		$tmp448 $const12 resultF 	%line{1051} %argrw{"wrr"}
	mul		$tmp449 tmpVal ___568_weight 	%argrw{"wrr"}
	mul		$tmp450 $tmp448 $tmp449 	%argrw{"wrr"}
	add		resultF resultF $tmp450 	%argrw{"wrr"}
# PxrPhasorNoise.osl:1052
#                 sum = 1.0;
	assign		sum $const12 	%line{1052} %argrw{"wr"}
# PxrPhasorNoise.osl:1055
#             } else if (fractalHarmonicMode == FRACTALHARMONICMODE_NUDGE) {
	eq		$tmp451 fractalHarmonicMode $const23 	%line{1055} %argrw{"wrr"}
	if		$tmp451 781 781 	%argrw{"r"}
# PxrPhasorNoise.osl:1056
#                 resultF = resultF + min(resultF, 1.0 - resultF) * (tmpVal * 2.0 - 1.0) * weight;
	sub		$tmp453 $const12 resultF 	%line{1056} %argrw{"wrr"}
	min		$tmp452 resultF $tmp453 	%argrw{"wrr"}
	mul		$tmp454 tmpVal $const24 	%argrw{"wrr"}
	sub		$tmp455 $tmp454 $const12 	%argrw{"wrr"}
	mul		$tmp456 $tmp452 $tmp455 	%argrw{"wrr"}
	mul		$tmp457 $tmp456 ___568_weight 	%argrw{"wrr"}
	add		resultF resultF $tmp457 	%argrw{"wrr"}
# PxrPhasorNoise.osl:1057
#                 sum = 1.0;
	assign		sum $const12 	%line{1057} %argrw{"wr"}
# PxrPhasorNoise.osl:1060
#             hOctScale  *= 2.0;
	mul		___566_hOctScale ___566_hOctScale $const24 	%line{1060} %argrw{"wrr"}
# PxrPhasorNoise.osl:1061
#             hOctWeight *= harmonicOctaveWeight;
	mul		___566_hOctWeight ___566_hOctWeight harmonicOctaveWeight 	%line{1061} %argrw{"wrr"}
# PxrPhasorNoise.osl:1062
#             hOctOffset += harmonicOctaveOffset;
	add		___566_hOctOffset ___566_hOctOffset harmonicOctaveOffset 	%line{1062} %argrw{"wrr"}
# PxrPhasorNoise.osl:959
#         for (int hOct=0; hOct<harmonicOctaves; hOct++) {
	assign		$tmp458 ___567_hOct 	%line{959} %argrw{"wr"}
	add		___567_hOct ___567_hOct $const10 	%argrw{"wrr"}
# PxrPhasorNoise.osl:1065
#         fOctWeight *= fractalOctaveWeight;
	mul		fOctWeight fOctWeight fractalOctaveWeight 	%line{1065} %argrw{"wrr"}
# PxrPhasorNoise.osl:952
#     for (int fOct=0; fOct<fractalOctaves; fOct++) {
	assign		$tmp459 ___565_fOct 	%line{952} %argrw{"wr"}
	add		___565_fOct ___565_fOct $const10 	%argrw{"wrr"}
# PxrPhasorNoise.osl:1068
#     if (sum != 0.0) resultF /= sum;
	neq		$tmp460 sum $const3 	%line{1068} %argrw{"wrr"}
	if		$tmp460 792 792 	%argrw{"r"}
	div		resultF resultF sum 	%argrw{"wrr"}
# PxrPhasorNoise.osl:1071
#     resultF = mix(floatMin, floatMax, resultF);
	mix		resultF floatMin floatMax resultF 	%line{1071} %argrw{"wrrr"}
# PxrPhasorNoise.osl:1072
#     resultRGB = mix(colorMin, colorMax, resultF);
	mix		resultRGB colorMin colorMax resultF 	%line{1072} %argrw{"wrrr"}
# PxrPhasorNoise.osl:1074
#     if (isconnected(resultNG))
	isconnected	$tmp461 resultNG 	%line{1074} %argrw{"wr"}
	if		$tmp461 808 808 	%argrw{"r"}
# PxrPhasorNoise.osl:1076
#         normal bumpN = normalize(calculatenormal(P + N * (resultF - 0.5)));
	sub		$tmp463 resultF $const34 	%line{1076} %argrw{"wrr"}
	mul		$tmp464 N $tmp463 	%argrw{"wrr"}
	add		$tmp465 P $tmp464 	%argrw{"wrr"}
	calculatenormal	$tmp462 $tmp465 	%argrw{"wr"} %argderivs{1}
	normalize	___592_bumpN $tmp462 	%argrw{"wr"}
# PxrPhasorNoise.osl:1077
#         resultNG = surfgradFromPerturbedNormal(bumpN, N);
	functioncall	$const46 808 	%line{1077} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:100
# 	float k = dot(Nn, bN);
	dot		___497_k N ___592_bumpN 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{100} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:101
# 	return (k * Nn - bN) / max(1.0e-8, abs(k));
	mul		$tmp466 ___497_k N 	%line{101} %argrw{"wrr"}
	sub		$tmp467 $tmp466 ___592_bumpN 	%argrw{"wrr"}
	abs		$tmp469 ___497_k 	%argrw{"wr"}
	max		$tmp468 $const47 $tmp469 	%argrw{"wrr"}
	div		resultNG $tmp467 $tmp468 	%argrw{"wrr"}
	end
