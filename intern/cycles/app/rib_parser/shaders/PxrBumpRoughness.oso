OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: -DOSX -I/Users/Shared/build/ratbuild/rman/_built/osxMonterey_x86-64_clang14_external_release/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/common -I/Users/Shared/build/ratbuild/rmanshare/RIS/pattern/osl -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl -o /Users/Shared/build/ratbuild/rmanshare/_built/osxMonterey_x86-64_clang14_external_release/osl/PxrBumpRoughness.osl/obj/PxrBumpRoughness.oso
shader PxrBumpRoughness	%meta{int,rfm_nodeid,1233481} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/bump"} %meta{string,rfh_classification,"Pattern/Bump"} %meta{string,help,"Derives roughness values from a bump map."} 
param	string	b2r_texture	""		%meta{string,label,"b2r Texture"} %meta{string,widget,"assetIdInput"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,help,"This expects the first derivative map, let H be a height field, then each channel are defined as r=dH/du, g=dH/dv, b=dontcare"}  %read{125,1271} %write{2147483647,-1}
param	struct Manifold	manifold			%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{48,48} %write{2147483647,-1} %struct{"Manifold"} %structfields{Q,QN,Qradius} %structfieldtypes{"pnf"} %structnfields{3}
param	point	manifold.Q	0 0 0		%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{50,51} %write{2147483647,-1} %mystruct{manifold} %mystructfield{0} %derivs
param	normal	manifold.QN	0 0 1		%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifold} %mystructfield{1}
param	float	manifold.Qradius	0		%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifold} %mystructfield{2}
param	struct PxrManifoldMulti	manifoldMulti			%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{58,58} %write{2147483647,-1} %struct{"PxrManifoldMulti"} %structfields{minNumTextures,numTextures,textureOrder,stAlpha0,stAlpha1,stAlpha2,stAlpha3,tileidRunflag0,tileidRunflag1,tileidRunflag2,tileidRunflag3,Tn,Bn,radius,hextile0,hextile1,hextile2,hextile3} %structfieldtypes{"iiippppppppv[4]v[4]fp[4]p[4]p[4]p[4]"} %structnfields{18}
param	int	manifoldMulti.minNumTextures	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{363,363} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{0}
param	int	manifoldMulti.numTextures	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{1}
param	int	manifoldMulti.textureOrder	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{2}
param	point	manifoldMulti.stAlpha0	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{336,336} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{3} %derivs
param	point	manifoldMulti.stAlpha1	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{337,337} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{4} %derivs
param	point	manifoldMulti.stAlpha2	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{338,338} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{5} %derivs
param	point	manifoldMulti.stAlpha3	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{6}
param	point	manifoldMulti.tileidRunflag0	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{7}
param	point	manifoldMulti.tileidRunflag1	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{8}
param	point	manifoldMulti.tileidRunflag2	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{9}
param	point	manifoldMulti.tileidRunflag3	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{10}
param	vector[4]	manifoldMulti.Tn	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{0,3} %mystruct{manifoldMulti} %mystructfield{11} %initexpr
param	vector[4]	manifoldMulti.Bn	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{4,7} %mystruct{manifoldMulti} %mystructfield{12} %initexpr
param	float	manifoldMulti.radius	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{13}
param	point[4]	manifoldMulti.hextile0	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{339,345} %write{8,11} %mystruct{manifoldMulti} %mystructfield{14} %derivs %initexpr
param	point[4]	manifoldMulti.hextile1	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{347,353} %write{12,15} %mystruct{manifoldMulti} %mystructfield{15} %derivs %initexpr
param	point[4]	manifoldMulti.hextile2	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{355,361} %write{16,19} %mystruct{manifoldMulti} %mystructfield{16} %derivs %initexpr
param	point[4]	manifoldMulti.hextile3	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{20,23} %mystruct{manifoldMulti} %mystructfield{17} %initexpr
param	int	useUndisplacedPosition	0		%meta{string,widget,"checkBox"} %meta{string,label,"Use undisplaced position"} %meta{string,help,"Enable if you are using the same texture for displacement and bump to roughness"} %meta{int,connectable,0}  %read{53,56} %write{2147483647,-1}
param	float	baseRoughness	0.00100000005		%meta{string,label,"Base Roughness"} %meta{float,min,0.00100000005} %meta{float,max,1} %meta{int,slider,1} %meta{string,page,"Bump Roughness"} %meta{int,page_open,1} %meta{string,help,"This is the roughness of the base surface when fully zoomed into the detail."}  %read{456,1180} %write{2147483647,-1}
param	float	textureRoughness	-1		%meta{string,label,"Texture Roughness"} %meta{float,slidermin,0.00100000005} %meta{float,max,1} %meta{string,page,"Bump Roughness"} %meta{string,help,"Set the texture roughness to be provided by the input textures when fully zoomed out from the detail. It is combined with the base roughness. The default of -1.0 lets the texture provide its natural roughness."}  %read{60,1144} %write{2147483647,-1}
param	float	gain	1		%meta{float,min,0} %meta{float,slidermax,10} %meta{float,slidercenter,1} %meta{string,page,"Bump Roughness"} %meta{string,help,"This is a multiplier to the aggregate roughness"}  %read{35,35} %write{2147483647,-1}
param	float	bumpNormalGain	1		%meta{string,label,"Bump Normal Gain"} %meta{float,min,0} %meta{float,slidermax,10} %meta{float,slidercenter,1} %meta{string,page,"Bump Roughness"} %meta{string,help,"multiplier to the normal map magnitude"}  %read{36,36} %write{2147483647,-1}
param	float	anisotropyGain	1		%meta{string,label,"Anisotropy Gain"} %meta{float,min,0} %meta{float,max,10} %meta{float,slidercenter,1} %meta{string,page,"Bump Roughness"} %meta{string,help,"This is a multiplier to the aggregate anisotropy"}  %read{675,1411} %write{2147483647,-1}
param	int	invertBumpNormal	0		%meta{string,label,"Invert Bump Normal"} %meta{string,widget,"checkBox"} %meta{int,connectable,0} %meta{string,page,"Bump Roughness"} %meta{string,help,"This will invert the Bump Normal"}  %read{581,1305} %write{2147483647,-1}
param	int	invertT	1		%meta{string,label,"Invert T"} %meta{string,widget,"checkBox"} %meta{int,connectable,0} %meta{string,page,"Bump Roughness"} %meta{string,help,"invert t direction if not connected to a manifold."}  %read{39,39} %write{2147483647,-1}
param	float	adjustAmount	1		%meta{string,widget,"default"} %meta{string,page,"Bump Roughness"} %meta{string,help,"Amount to adjust the normals when they are facing away from the camera.<br><br>adjustAmount (float)"} %meta{string,label,"Adjust Amount"} %meta{float,max,1} %meta{float,min,0}  %read{1445,1454} %write{2147483647,-1}
param	float	surfaceNormalMix	0		%meta{string,widget,"default"} %meta{string,page,"Bump Roughness"} %meta{string,help,"The amount to mix the resulting normals with the surface normals.<br><br>surfaceNormalMix (float)"} %meta{string,label,"Surface Normal Mix"} %meta{float,max,1} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,1} %meta{float,slidermin,0}  %read{1460,1462} %write{2147483647,-1}
param	float	blur	0		%meta{string,label,"Blur"} %meta{string,page,"Advanced"} %meta{string,help,"Amount of blur to apply to texture lookup."}  %read{497,1221} %write{2147483647,-1}
param	string	filter	"smartcubic"		%meta{string,label,"Filter"} %meta{string,page,"Advanced"} %meta{string,widget,"mapper"} %meta{string,options,"linear:linear|smartcubic:smartcubic|cubic:cubic|unfiltered:closest"} %meta{string,help,"Which filter to use. (unfiltered/closest not advisable for displacement.)"} %meta{int,connectable,0}  %read{500,1224} %write{2147483647,-1}
param	float	filterScale	1		%meta{string,label,"Filter Scale"} %meta{string,page,"Advanced"} %meta{int,slider,1} %meta{float,min,0} %meta{float,max,2} %meta{string,help,"Multiplies the size of the texture filter, less than one for sharper textures."} %meta{int,connectable,0}  %read{501,1225} %write{2147483647,-1}
param	float	s	0		%meta{int,lockgeom,0} %meta{string,widget,"null"} %meta{int,connectable,0}  %read{38,38} %write{2147483647,-1} %derivs
param	float	t	0		%meta{int,lockgeom,0} %meta{string,widget,"null"} %meta{int,connectable,0}  %read{41,46} %write{2147483647,-1} %derivs
oparam	normal	resultN	0 0 0		%read{1451,1469} %write{1441,1463}
oparam	float	resultRoughness	0		%read{2147483647,-1} %write{1436,1436}
oparam	float	resultAnisotropy	0		%read{1435,1435} %write{1439,1439}
oparam	vector	resultAnisotropyDirection	0 0 0		%read{2147483647,-1} %write{1440,1440}
oparam	vector	resultNG	0 0 0		%read{1464,1464} %write{1472,1472}
global	point	P	%read{52,52} %write{2147483647,-1} %derivs
global	vector	I	%read{1442,1442} %write{2147483647,-1}
global	normal	N	%read{32,1468} %write{2147483647,-1}
global	normal	Ng	%read{78,1448} %write{2147483647,-1}
global	vector	dPdu	%read{77,887} %write{2147483647,-1}
global	vector	dPdv	%read{77,893} %write{2147483647,-1}
local	float	___636__tt	%read{103,1212} %write{100,1206} %derivs
local	float	___636_coords.s	%read{108,1213} %write{102,1207} %mystruct{___636_coords} %mystructfield{0}
local	float	___636_coords.t	%read{109,1214} %write{103,1208} %mystruct{___636_coords} %mystructfield{1}
local	float	___636_coords.dsdx	%read{110,1215} %write{104,1209} %mystruct{___636_coords} %mystructfield{2}
local	float	___636_coords.dtdx	%read{111,1216} %write{105,1210} %mystruct{___636_coords} %mystructfield{3}
local	float	___636_coords.dsdy	%read{112,1217} %write{106,1211} %mystruct{___636_coords} %mystructfield{4}
local	float	___636_coords.dtdy	%read{113,1218} %write{107,1212} %mystruct{___636_coords} %mystructfield{5}
local	int	___649_success	%read{132,1272} %write{122,1271}
local	int	___649_nchannels	%read{134,1280} %write{123,1271}
local	color	___649_finalResult	%read{150,1290} %write{124,1289}
local	color	___649_result	%read{126,1288} %write{125,1265}
local	float	___687_k	%read{1468,1470} %write{1467,1467}
local	float	___699_VdotN	%read{1452,1455} %write{1451,1451}
local	float	___736_epsilon	%read{189,1390} %write{187,1388}
local	float	___738_w1	%read{377,856} %write{377,856}
local	float	___738_w2	%read{377,856} %write{377,856}
local	vector	___739_Nn	%read{377,856} %write{377,856}
local	vector	___739_Ncross	%read{377,856} %write{377,856}
local	float	___742_Bumprough_Use2016Mode	%read{377,856} %write{377,856}
local	vector	___749_sumv	%read{377,856} %write{377,856}
local	vector	___752_dQdx	%read{377,1162} %write{377,1147}
local	vector	___752_dQdy	%read{377,1161} %write{377,1148}
local	float	___752_A	%read{377,1161} %write{377,1149}
local	float	___752_B	%read{377,1158} %write{377,1150}
local	float	___752_C	%read{377,1162} %write{377,1151}
local	float	___752_D	%read{377,1157} %write{377,1152}
local	float	___752_invdet	%read{377,1164} %write{377,1156}
local	float	___753_del	%read{241,1349} %write{239,1344}
local	float	___770_e_over.l1	%read{377,856} %write{377,856} %mystruct{___770_e_over} %mystructfield{0}
local	float	___770_e_over.l2	%read{377,856} %write{377,856} %mystruct{___770_e_over} %mystructfield{1}
local	vector	___770_e_over.v1	%read{377,856} %write{377,856} %mystruct{___770_e_over} %mystructfield{2}
local	vector	___770_e_over.v2	%read{377,856} %write{377,856} %mystruct{___770_e_over} %mystructfield{3}
local	normal	___770_e_over.n	%read{377,856} %write{377,856} %mystruct{___770_e_over} %mystructfield{4}
local	float	___773_coords.s	%read{125,1265} %write{108,1213} %mystruct{___773_coords} %mystructfield{0}
local	float	___773_coords.t	%read{125,1265} %write{109,1214} %mystruct{___773_coords} %mystructfield{1}
local	float	___773_coords.dsdx	%read{125,1265} %write{110,1215} %mystruct{___773_coords} %mystructfield{2}
local	float	___773_coords.dtdx	%read{125,1265} %write{111,1216} %mystruct{___773_coords} %mystructfield{3}
local	float	___773_coords.dsdy	%read{125,1265} %write{112,1217} %mystruct{___773_coords} %mystructfield{4}
local	float	___773_coords.dtdy	%read{125,1265} %write{113,1218} %mystruct{___773_coords} %mystructfield{5}
local	int	___773_params.firstchannel	%read{125,1265} %write{115,1260} %mystruct{___773_params} %mystructfield{0}
local	float	___773_params.blur	%read{125,1265} %write{116,1221} %mystruct{___773_params} %mystructfield{1}
local	color	___773_params.missingcolor	%read{125,1266} %write{117,1222} %mystruct{___773_params} %mystructfield{2}
local	float	___773_params.missingalpha	%read{2147483647,-1} %write{118,1223} %mystruct{___773_params} %mystructfield{3}
local	string	___773_params.interp	%read{125,1265} %write{119,1224} %mystruct{___773_params} %mystructfield{4}
local	float	___773_params.width	%read{125,1265} %write{120,1225} %mystruct{___773_params} %mystructfield{5}
local	normal	___774_PN	%read{78,1183} %write{77,1182}
local	int	___774_lefthanded	%read{80,1185} %write{79,1184}
local	normal	___774_N_	%read{83,1190} %write{81,1187}
local	float	___775_dx	%read{214,1373} %write{209,1314}
local	float	___775_dy	%read{217,1375} %write{210,1315}
local	float	___775_dxdx	%read{215,1320} %write{211,1316}
local	float	___775_dydy	%read{221,1326} %write{212,1317}
local	float	___775_dxdy	%read{218,1323} %write{213,1318}
local	float	___775_sxx	%read{226,1348} %write{216,1331}
local	float	___775_sxy	%read{227,1356} %write{219,1332}
local	float	___775_syy	%read{228,1355} %write{222,1333}
local	float	___776_varianceGainSqr	%read{226,1333} %write{225,1330}
local	float	___775_l1	%read{246,1359} %write{242,1347}
local	float	___775_l2	%read{250,1360} %write{245,1350}
local	vector	___775_v1	%read{256,1363} %write{249,1354}
local	vector	___775_v2	%read{262,1369} %write{253,1358}
local	float	___777_eps	%read{299,1406} %write{297,1402}
local	float	___777_roughnessU	%read{302,1407} %write{299,1404}
local	float	___777_roughnessV	%read{302,1407} %write{301,1406}
local	float	___777_ratio	%read{303,1409} %write{302,1407}
local	float	___777_anisotropy	%read{306,1416} %write{305,1414}
local	float	___777_alpha	%read{316,1423} %write{314,1419}
local	float	___777_variance	%read{316,1424} %write{315,1420}
local	float	___778_baseRoughnessSqr	%read{87,1397} %write{75,1180}
local	vector	___778_U	%read{85,1374} %write{84,1189}
local	vector	___778_V	%read{90,1376} %write{85,1190}
local	vector	___778_W	%read{91,1378} %write{86,1191}
local	float	___778_result.l1	%read{290,1426} %write{87,1422} %mystruct{___778_result} %mystructfield{0}
local	float	___778_result.l2	%read{292,1427} %write{88,1425} %mystruct{___778_result} %mystructfield{1}
local	vector	___778_result.v1	%read{261,1428} %write{89,1366} %mystruct{___778_result} %mystructfield{2}
local	vector	___778_result.v2	%read{267,1429} %write{90,1372} %mystruct{___778_result} %mystructfield{3}
local	normal	___778_result.n	%read{275,1430} %write{91,1380} %mystruct{___778_result} %mystructfield{4}
local	int	___778_validDs	%read{199,1304} %write{198,1303}
local	float	___783_resultRoughnessU	%read{1434,1436} %write{1432,1432}
local	float	___783_resultRoughnessV	%read{1434,1434} %write{1433,1433}
local	float	___783_rudivrv	%read{1437,1438} %write{1434,1434}
local	float	___785_textureBumpRough.l1	%read{326,1136} %write{63,1131} %mystruct{___785_textureBumpRough} %mystructfield{0}
local	float	___785_textureBumpRough.l2	%read{327,1137} %write{64,1132} %mystruct{___785_textureBumpRough} %mystructfield{1}
local	vector	___785_textureBumpRough.v1	%read{2147483647,-1} %write{65,1133} %mystruct{___785_textureBumpRough} %mystructfield{2}
local	vector	___785_textureBumpRough.v2	%read{2147483647,-1} %write{66,1134} %mystruct{___785_textureBumpRough} %mystructfield{3}
local	normal	___785_textureBumpRough.n	%read{2147483647,-1} %write{67,1135} %mystruct{___785_textureBumpRough} %mystructfield{4}
local	vector	___785_vecD1	%read{151,1020} %write{68,1017}
local	vector	___785_vecD2	%read{194,1023} %write{69,995}
local	float	___785_textureRoughnessU	%read{328,1143} %write{326,1136}
local	float	___785_textureRoughnessV	%read{328,1138} %write{327,1137}
local	float	___785_rudivrv	%read{329,1140} %write{328,1138}
local	float	___785_textureAnisotropy	%read{332,1142} %write{331,1141}
local	float	___785_textureRoughnessGain	%read{335,1145} %write{334,1144}
local	vector	dPds	%read{377,1182} %write{24,1160}
local	vector	dPdt	%read{377,1188} %write{25,1164}
local	vector	vecD1	%read{377,1315} %write{26,1312}
local	vector	vecD2	%read{377,1318} %write{27,1290}
local	float	br.l1	%read{377,1432} %write{28,1426} %mystruct{br} %mystructfield{0}
local	float	br.l2	%read{377,1433} %write{29,1427} %mystruct{br} %mystructfield{1}
local	vector	br.v1	%read{377,1440} %write{30,1428} %mystruct{br} %mystructfield{2}
local	vector	br.v2	%read{377,856} %write{31,1429} %mystruct{br} %mystructfield{3}
local	normal	br.n	%read{377,1441} %write{32,1430} %mystruct{br} %mystructfield{4}
local	float	resultBumpRoughPresence	%read{2147483647,-1} %write{33,33}
local	float	textureRoughnessGain	%read{35,36} %write{34,1145}
local	float	_gainRw	%read{377,1330} %write{35,35}
local	float	_bumpNormalGainRw	%read{377,1375} %write{36,36}
local	int	isMulti	%read{2147483647,-1} %write{37,37}
local	float	inputS	%read{377,1211} %write{38,856} %derivs
local	float	inputT	%read{377,1206} %write{45,856} %derivs
local	float	inputW	%read{377,856} %write{47,856}
local	point	Pos	%read{377,1148} %write{52,54} %derivs
local	normal	Nin	%read{81,1191} %write{55,57}
local	point[3]	___787_sta	%read{377,856} %write{336,338} %derivs
local	point[3]	___787_hex.s	%read{377,856} %write{340,356} %mystruct{___787_hex} %mystructfield{0} %derivs
local	point[3]	___787_hex.t	%read{377,856} %write{342,358} %mystruct{___787_hex} %mystructfield{1} %derivs
local	point[3]	___787_hex.w	%read{377,856} %write{344,360} %mystruct{___787_hex} %mystructfield{2}
local	point[3]	___787_hex.r	%read{377,856} %write{346,362} %mystruct{___787_hex} %mystructfield{3}
local	int	___787_numProj	%read{377,856} %write{363,363}
local	float	___787_resultBumpRough.l1	%read{377,865} %write{364,856} %mystruct{___787_resultBumpRough} %mystructfield{0}
local	float	___787_resultBumpRough.l2	%read{377,866} %write{365,856} %mystruct{___787_resultBumpRough} %mystructfield{1}
local	vector	___787_resultBumpRough.v1	%read{377,867} %write{366,856} %mystruct{___787_resultBumpRough} %mystructfield{2}
local	vector	___787_resultBumpRough.v2	%read{377,868} %write{367,856} %mystruct{___787_resultBumpRough} %mystructfield{3}
local	normal	___787_resultBumpRough.n	%read{370,869} %write{368,864} %mystruct{___787_resultBumpRough} %mystructfield{4}
local	float	___787_resultBumpRoughPresence	%read{377,856} %write{369,856}
local	vector	___787_Nc	%read{861,861} %write{370,370}
local	float	___787_wvdenom	%read{377,859} %write{373,856}
local	float	___787_sqwaccum	%read{377,856} %write{374,856}
local	int	___789_i	%read{377,856} %write{376,856} %derivs
local	int	___790_do_hextile	%read{377,856} %write{377,856}
local	int	___790_numSamples	%read{377,856} %write{377,856}
local	float	___790_weight	%read{377,856} %write{377,856}
local	float	___790_wmult	%read{2147483647,-1} %write{377,856}
local	int	___792_j	%read{377,856} %write{377,856} %derivs
local	vector	Vn	%read{1448,1456} %write{1443,1443}
const	vector	$const1	0 0 0		%read{0,7} %write{2147483647,-1}
const	int	$const2	0		%read{0,1460} %write{2147483647,-1}
const	int	$const3	1		%read{1,1369} %write{2147483647,-1}
const	int	$const4	2		%read{2,1318} %write{2147483647,-1}
const	int	$const5	3		%read{3,390} %write{2147483647,-1}
const	point	$const6	0 0 0		%read{8,23} %write{2147483647,-1}
const	point	$const7	-1 -1 -1		%read{10,384} %write{2147483647,-1}
const	float	$const8	9.99999975e-06		%read{28,874} %write{2147483647,-1}
const	vector	$const9	1 0 0		%read{30,875} %write{2147483647,-1}
const	vector	$const10	0 1 0		%read{31,876} %write{2147483647,-1}
const	float	$const11	1		%read{33,1438} %write{2147483647,-1}
const	string	$const12	"invertCoord"		%read{40,1200} %write{2147483647,-1}
temp	float	$tmp25	%read{42,42} %write{41,41} %derivs
temp	float	$tmp26	%read{45,45} %write{42,42} %derivs
temp	float	$tmp27	%read{44,44} %write{43,43} %derivs
temp	float	$tmp28	%read{45,45} %write{44,44} %derivs
temp	int	$tmp29	%read{49,49} %write{48,48}
temp	int	$tmp30	%read{2147483647,-1} %write{54,54}
const	string	$const13	"primvar"		%read{54,54} %write{2147483647,-1}
const	string	$const14	"P"		%read{54,54} %write{2147483647,-1}
temp	int	$tmp31	%read{2147483647,-1} %write{57,57}
const	string	$const15	"builtin"		%read{57,57} %write{2147483647,-1}
const	string	$const16	"Non"		%read{57,57} %write{2147483647,-1}
temp	int	$tmp32	%read{59,59} %write{58,58}
const	float	$const17	0		%read{60,1414} %write{2147483647,-1}
temp	int	$tmp33	%read{61,61} %write{60,60}
const	string	$const18	"estimateRoughnessGain"		%read{62,872} %write{2147483647,-1}
const	float	$const19	9.99999975e-05		%read{75,885} %write{2147483647,-1}
temp	float	$tmp34	%read{71,71} %write{70,70} %derivs
const	float	$const20	0.5		%read{71,1350} %write{2147483647,-1}
temp	float	$tmp35	%read{102,106} %write{71,71} %derivs
temp	float	$tmp36	%read{73,73} %write{72,72} %derivs
temp	float	$tmp37	%read{96,101} %write{73,73} %derivs
const	string	$const21	"linear"		%read{119,929} %write{2147483647,-1}
const	float	$const22	1024		%read{116,930} %write{2147483647,-1}
const	string	$const23	"ReadBumpRough"		%read{74,1179} %write{2147483647,-1}
const	string	$const24	"ComputeOrthonormalTangentSpace"		%read{76,1181} %write{2147483647,-1}
temp	float	$tmp38	%read{79,79} %write{78,78}
temp	vector	$tmp39	%read{84,84} %write{83,83}
const	string	$const25	"ReadBumpRoughTextures"		%read{92,1197} %write{2147483647,-1}
const	string	$const26	"initTxCoords"		%read{93,1198} %write{2147483647,-1}
temp	float	$tmp40	%read{97,97} %write{96,96} %derivs
temp	float	$tmp41	%read{100,100} %write{97,97} %derivs
temp	float	$tmp42	%read{99,99} %write{98,98} %derivs
temp	float	$tmp43	%read{100,100} %write{99,99} %derivs
const	color	$const27	0 0 0		%read{117,1222} %write{2147483647,-1}
const	string	$const28	"PxrTextureLookup"		%read{121,1261} %write{2147483647,-1}
const	string	$const29	"firstchannel"		%read{125,1265} %write{2147483647,-1}
const	string	$const30	"blur"		%read{125,1265} %write{2147483647,-1}
const	string	$const31	"missingcolor"		%read{125,1265} %write{2147483647,-1}
const	string	$const32	"interp"		%read{125,1265} %write{2147483647,-1}
const	string	$const33	"width"		%read{125,1265} %write{2147483647,-1}
temp	int	$tmp44	%read{127,127} %write{126,126}
const	string	$const34	"channels"		%read{131,1271} %write{2147483647,-1}
temp	int	$tmp45	%read{133,136} %write{132,135}
temp	int	$tmp46	%read{135,135} %write{134,134}
temp	int	$tmp47	%read{138,138} %write{137,137}
temp	int	$tmp48	%read{139,143} %write{138,142}
temp	int	$tmp49	%read{141,141} %write{140,140}
temp	int	$tmp50	%read{142,142} %write{141,141}
temp	float	$tmp51	%read{145,145} %write{144,144}
temp	float	$tmp52	%read{147,147} %write{146,146}
temp	float	$tmp53	%read{149,149} %write{148,148}
temp	float	$tmp54	%read{154,154} %write{153,153}
temp	float	$tmp55	%read{153,153} %write{151,151}
temp	float	$tmp56	%read{153,153} %write{152,152}
temp	int	$tmp57	%read{162,162} %write{161,161}
temp	int	$tmp58	%read{168,171} %write{167,170}
temp	int	$tmp59	%read{170,170} %write{169,169}
temp	int	$tmp60	%read{173,173} %write{172,172}
temp	int	$tmp61	%read{174,178} %write{173,177}
temp	int	$tmp62	%read{176,176} %write{175,175}
temp	int	$tmp63	%read{177,177} %write{176,176}
temp	float	$tmp64	%read{180,180} %write{179,179}
temp	float	$tmp65	%read{182,182} %write{181,181}
temp	float	$tmp66	%read{184,184} %write{183,183}
temp	int	$tmp67	%read{190,190} %write{189,189}
const	string	$const35	"_IsValidVector"		%read{186,1387} %write{2147483647,-1}
const	float	$const36	9.99999994e-09		%read{187,1471} %write{2147483647,-1}
temp	float	$tmp68	%read{189,189} %write{188,188}
temp	int	$tmp69	%read{191,198} %write{190,197}
temp	int	$tmp70	%read{196,196} %write{195,195}
temp	float	$tmp71	%read{195,195} %write{194,194}
temp	int	$tmp72	%read{197,197} %write{196,196}
temp	int	$tmp73	%read{201,201} %write{200,200}
temp	float	$tmp74	%read{203,203} %write{202,202}
temp	float	$tmp75	%read{204,204} %write{203,203}
temp	float	$tmp76	%read{206,206} %write{205,205}
temp	float	$tmp77	%read{207,207} %write{206,206}
temp	int	$tmp78	%read{289,289} %write{288,288}
const	string	$const37	"ComputeBumpRoughStruct"		%read{208,1313} %write{2147483647,-1}
const	float	$const38	2		%read{216,1418} %write{2147483647,-1}
temp	float	$tmp79	%read{215,215} %write{214,214}
temp	float	$tmp80	%read{216,216} %write{215,215}
temp	float	$tmp81	%read{218,218} %write{217,217}
temp	float	$tmp82	%read{219,219} %write{218,218}
temp	float	$tmp83	%read{221,221} %write{220,220}
temp	float	$tmp84	%read{222,222} %write{221,221}
temp	int	$tmp85	%read{224,224} %write{223,223}
const	string	$const39	"BumpRough_CovarToEigen2D"		%read{229,1334} %write{2147483647,-1}
temp	float	$tmp86	%read{233,233} %write{230,230}
const	float	$const40	4		%read{231,1336} %write{2147483647,-1}
temp	float	$tmp87	%read{232,232} %write{231,231}
temp	float	$tmp88	%read{233,233} %write{232,232}
temp	float	$tmp89	%read{236,236} %write{233,233}
temp	float	$tmp90	%read{235,235} %write{234,234}
temp	float	$tmp91	%read{236,236} %write{235,235}
temp	float	$tmp92	%read{238,238} %write{236,236}
temp	float	$tmp93	%read{238,238} %write{237,237}
temp	float	$tmp94	%read{239,239} %write{238,238}
temp	float	$tmp95	%read{241,241} %write{240,240}
temp	float	$tmp96	%read{242,242} %write{241,241}
temp	float	$tmp97	%read{244,244} %write{243,243}
temp	float	$tmp98	%read{245,245} %write{244,244}
temp	vector	$tmp99	%read{249,249} %write{248,248}
temp	float	$tmp100	%read{247,247} %write{246,246}
temp	float	$tmp101	%read{248,248} %write{247,247}
temp	vector	$tmp102	%read{253,253} %write{252,252}
temp	float	$tmp103	%read{251,251} %write{250,250}
temp	float	$tmp104	%read{252,252} %write{251,251}
temp	float	$tmp105	%read{257,257} %write{256,256}
temp	vector	$tmp106	%read{260,260} %write{257,257}
temp	float	$tmp107	%read{259,259} %write{258,258}
temp	vector	$tmp108	%read{260,260} %write{259,259}
temp	float	$tmp109	%read{263,263} %write{262,262}
temp	vector	$tmp110	%read{266,266} %write{263,263}
temp	float	$tmp111	%read{265,265} %write{264,264}
temp	vector	$tmp112	%read{266,266} %write{265,265}
temp	float	$tmp113	%read{269,269} %write{268,268}
temp	vector	$tmp114	%read{272,272} %write{269,269}
temp	float	$tmp115	%read{271,271} %write{270,270}
temp	vector	$tmp116	%read{272,272} %write{271,271}
temp	vector	$tmp117	%read{273,273} %write{272,272}
temp	vector	$tmp118	%read{274,274} %write{273,273}
temp	int	$tmp119	%read{280,280} %write{279,279}
temp	float	$tmp120	%read{279,279} %write{278,278}
temp	int	$tmp121	%read{281,288} %write{280,287}
temp	int	$tmp122	%read{286,286} %write{285,285}
temp	float	$tmp123	%read{285,285} %write{284,284}
temp	int	$tmp124	%read{287,287} %write{286,286}
temp	int	$tmp125	%read{295,295} %write{294,294}
const	string	$const41	"BumpRoughAnisotropyAdjust"		%read{296,1401} %write{2147483647,-1}
const	float	$const42	9.99999996e-13		%read{297,1402} %write{2147483647,-1}
temp	float	$tmp126	%read{299,299} %write{298,298}
temp	float	$tmp127	%read{301,301} %write{300,300}
temp	float	$tmp128	%read{305,305} %write{303,303}
temp	float	$tmp129	%read{305,305} %write{304,304}
temp	float	$tmp130	%read{308,308} %write{306,306}
const	string	$const43	"clamp"		%read{307,1412} %write{2147483647,-1}
temp	float	$tmp131	%read{309,309} %write{308,308}
temp	float	$tmp132	%read{312,312} %write{310,310}
temp	float	$tmp133	%read{312,312} %write{311,311}
temp	float	$tmp134	%read{313,313} %write{312,312}
temp	float	$tmp135	%read{314,314} %write{313,313}
temp	float	$tmp136	%read{319,319} %write{318,318}
temp	float	$tmp137	%read{331,331} %write{329,329}
temp	float	$tmp138	%read{331,331} %write{330,330}
temp	float	$tmp139	%read{333,333} %write{332,332}
temp	float	$tmp140	%read{334,334} %write{333,333}
temp	point	$tmp141	%read{340,340} %write{339,339} %derivs
temp	point	$tmp142	%read{342,342} %write{341,341} %derivs
temp	point	$tmp143	%read{344,344} %write{343,343}
temp	point	$tmp144	%read{346,346} %write{345,345}
temp	point	$tmp145	%read{348,348} %write{347,347} %derivs
temp	point	$tmp146	%read{350,350} %write{349,349} %derivs
temp	point	$tmp147	%read{352,352} %write{351,351}
temp	point	$tmp148	%read{354,354} %write{353,353}
temp	point	$tmp149	%read{356,356} %write{355,355} %derivs
temp	point	$tmp150	%read{358,358} %write{357,357} %derivs
temp	point	$tmp151	%read{360,360} %write{359,359}
temp	point	$tmp152	%read{362,362} %write{361,361}
temp	int	$tmp153	%read{377,856} %write{377,856}
temp	int	$tmp154	%read{375,856} %write{376,856}
temp	point	$tmp155.s	%read{2147483647,-1} %write{377,856}
temp	point	$tmp155.t	%read{2147483647,-1} %write{377,856}
temp	point	$tmp155.w	%read{377,856} %write{377,856}
temp	point	$tmp155.r	%read{2147483647,-1} %write{377,856}
const	string	$const44	"validHexTileData"		%read{383,383} %write{2147483647,-1}
temp	int	$tmp157	%read{377,856} %write{377,856}
temp	point	$tmp158	%read{377,856} %write{377,856}
const	float	$const45	3		%read{396,396} %write{2147483647,-1}
temp	int	$tmp159	%read{377,856} %write{377,856}
temp	int	$tmp160	%read{377,856} %write{377,856}
temp	int	$tmp161	%read{377,856} %write{377,856}
temp	int	$tmp162	%read{377,856} %write{377,856}
temp	point	$tmp163	%read{377,856} %write{377,856} %derivs
temp	point	$tmp164	%read{377,856} %write{377,856} %derivs
temp	int	$tmp165	%read{377,856} %write{377,856}
temp	point	$tmp166	%read{377,856} %write{377,856} %derivs
temp	point	$tmp167	%read{377,856} %write{377,856} %derivs
temp	int	$tmp168	%read{377,856} %write{377,856}
temp	point	$tmp169	%read{377,856} %write{377,856}
temp	float	$tmp170	%read{377,856} %write{377,856}
temp	int	$tmp171	%read{2147483647,-1} %write{377,856}
const	string	$const46	"BumpRough_PartialDeriv"		%read{423,1146} %write{2147483647,-1}
temp	float	$tmp172	%read{377,856} %write{377,856}
temp	float	$tmp173	%read{377,856} %write{377,856}
temp	float	$tmp174	%read{377,856} %write{377,856}
temp	vector	$tmp175	%read{377,856} %write{377,856}
temp	vector	$tmp176	%read{377,856} %write{377,856}
temp	vector	$tmp177	%read{377,856} %write{377,856}
temp	vector	$tmp178	%read{377,856} %write{377,856}
temp	vector	$tmp179	%read{377,856} %write{377,856}
temp	vector	$tmp180	%read{377,856} %write{377,856}
temp	int	$tmp181	%read{377,856} %write{377,856}
temp	float	$tmp182	%read{377,856} %write{377,856}
temp	int	$tmp183	%read{377,856} %write{377,856}
temp	int	$tmp184	%read{377,856} %write{377,856}
temp	float	$tmp185	%read{377,856} %write{377,856}
temp	int	$tmp186	%read{377,856} %write{377,856}
temp	float	$tmp187	%read{377,856} %write{377,856}
temp	vector	$tmp188	%read{377,856} %write{377,856}
temp	float	$tmp189	%read{377,856} %write{377,856} %derivs
temp	float	$tmp190	%read{377,856} %write{377,856} %derivs
temp	float	$tmp191	%read{377,856} %write{377,856} %derivs
temp	float	$tmp192	%read{377,856} %write{377,856} %derivs
temp	int	$tmp193	%read{377,856} %write{377,856}
temp	int	$tmp194	%read{377,856} %write{377,856}
temp	int	$tmp195	%read{377,856} %write{377,856}
temp	int	$tmp196	%read{377,856} %write{377,856}
temp	int	$tmp197	%read{377,856} %write{377,856}
temp	int	$tmp198	%read{377,856} %write{377,856}
temp	int	$tmp199	%read{377,856} %write{377,856}
temp	float	$tmp200	%read{377,856} %write{377,856}
temp	float	$tmp201	%read{377,856} %write{377,856}
temp	float	$tmp202	%read{377,856} %write{377,856}
temp	float	$tmp203	%read{377,856} %write{377,856}
temp	float	$tmp204	%read{377,856} %write{377,856}
temp	float	$tmp205	%read{377,856} %write{377,856}
temp	int	$tmp206	%read{377,856} %write{377,856}
temp	int	$tmp207	%read{377,856} %write{377,856}
temp	int	$tmp208	%read{377,856} %write{377,856}
temp	int	$tmp209	%read{377,856} %write{377,856}
temp	int	$tmp210	%read{377,856} %write{377,856}
temp	int	$tmp211	%read{377,856} %write{377,856}
temp	int	$tmp212	%read{377,856} %write{377,856}
temp	float	$tmp213	%read{377,856} %write{377,856}
temp	float	$tmp214	%read{377,856} %write{377,856}
temp	float	$tmp215	%read{377,856} %write{377,856}
temp	int	$tmp216	%read{377,856} %write{377,856}
temp	float	$tmp217	%read{377,856} %write{377,856}
temp	int	$tmp218	%read{377,856} %write{377,856}
temp	int	$tmp219	%read{377,856} %write{377,856}
temp	float	$tmp220	%read{377,856} %write{377,856}
temp	int	$tmp221	%read{377,856} %write{377,856}
temp	int	$tmp222	%read{377,856} %write{377,856}
temp	float	$tmp223	%read{377,856} %write{377,856}
temp	float	$tmp224	%read{377,856} %write{377,856}
temp	float	$tmp225	%read{377,856} %write{377,856}
temp	float	$tmp226	%read{377,856} %write{377,856}
temp	int	$tmp227	%read{377,856} %write{377,856}
temp	float	$tmp228	%read{377,856} %write{377,856}
temp	float	$tmp229	%read{377,856} %write{377,856}
temp	float	$tmp230	%read{377,856} %write{377,856}
temp	float	$tmp231	%read{377,856} %write{377,856}
temp	float	$tmp232	%read{377,856} %write{377,856}
temp	float	$tmp233	%read{377,856} %write{377,856}
temp	int	$tmp234	%read{377,856} %write{377,856}
temp	float	$tmp235	%read{377,856} %write{377,856}
temp	float	$tmp236	%read{377,856} %write{377,856}
temp	float	$tmp237	%read{377,856} %write{377,856}
temp	float	$tmp238	%read{377,856} %write{377,856}
temp	float	$tmp239	%read{377,856} %write{377,856}
temp	float	$tmp240	%read{377,856} %write{377,856}
temp	float	$tmp241	%read{377,856} %write{377,856}
temp	float	$tmp242	%read{377,856} %write{377,856}
temp	float	$tmp243	%read{377,856} %write{377,856}
temp	float	$tmp244	%read{377,856} %write{377,856}
temp	float	$tmp245	%read{377,856} %write{377,856}
temp	float	$tmp246	%read{377,856} %write{377,856}
temp	float	$tmp247	%read{377,856} %write{377,856}
temp	vector	$tmp248	%read{377,856} %write{377,856}
temp	float	$tmp249	%read{377,856} %write{377,856}
temp	float	$tmp250	%read{377,856} %write{377,856}
temp	vector	$tmp251	%read{377,856} %write{377,856}
temp	float	$tmp252	%read{377,856} %write{377,856}
temp	float	$tmp253	%read{377,856} %write{377,856}
temp	float	$tmp254	%read{377,856} %write{377,856}
temp	vector	$tmp255	%read{377,856} %write{377,856}
temp	float	$tmp256	%read{377,856} %write{377,856}
temp	vector	$tmp257	%read{377,856} %write{377,856}
temp	float	$tmp258	%read{377,856} %write{377,856}
temp	vector	$tmp259	%read{377,856} %write{377,856}
temp	float	$tmp260	%read{377,856} %write{377,856}
temp	vector	$tmp261	%read{377,856} %write{377,856}
temp	float	$tmp262	%read{377,856} %write{377,856}
temp	vector	$tmp263	%read{377,856} %write{377,856}
temp	float	$tmp264	%read{377,856} %write{377,856}
temp	vector	$tmp265	%read{377,856} %write{377,856}
temp	vector	$tmp266	%read{377,856} %write{377,856}
temp	vector	$tmp267	%read{377,856} %write{377,856}
temp	int	$tmp268	%read{377,856} %write{377,856}
temp	float	$tmp269	%read{377,856} %write{377,856}
temp	int	$tmp270	%read{377,856} %write{377,856}
temp	int	$tmp271	%read{377,856} %write{377,856}
temp	float	$tmp272	%read{377,856} %write{377,856}
temp	int	$tmp273	%read{377,856} %write{377,856}
temp	int	$tmp274	%read{377,856} %write{377,856}
temp	float	$tmp275	%read{377,856} %write{377,856}
temp	float	$tmp276	%read{377,856} %write{377,856}
temp	float	$tmp277	%read{377,856} %write{377,856}
temp	float	$tmp278	%read{377,856} %write{377,856}
temp	float	$tmp279	%read{377,856} %write{377,856}
temp	float	$tmp280	%read{377,856} %write{377,856}
temp	float	$tmp281	%read{377,856} %write{377,856}
temp	float	$tmp282	%read{377,856} %write{377,856}
temp	float	$tmp283	%read{377,856} %write{377,856}
temp	float	$tmp284	%read{377,856} %write{377,856}
temp	float	$tmp285	%read{377,856} %write{377,856}
temp	float	$tmp286	%read{377,856} %write{377,856}
const	string	$const47	"BumpRough_EigenBlend_AddNormalWeightedVariance"		%read{708,708} %write{2147483647,-1}
temp	int	$tmp287	%read{377,856} %write{377,856}
const	string	$const48	"BumpRough_CombineEigens2D"		%read{727,727} %write{2147483647,-1}
temp	int	$tmp288	%read{377,856} %write{377,856}
temp	int	$tmp289	%read{377,856} %write{377,856}
temp	int	$tmp290	%read{377,856} %write{377,856}
temp	int	$tmp291	%read{377,856} %write{377,856}
temp	int	$tmp292	%read{377,856} %write{377,856}
temp	int	$tmp293	%read{377,856} %write{377,856}
temp	int	$tmp294	%read{377,856} %write{377,856}
temp	int	$tmp295	%read{377,856} %write{377,856}
const	string	$const49	"_combineEigens2D"		%read{752,752} %write{2147483647,-1}
const	string	$const50	"_normalizeEigen2D"		%read{753,760} %write{2147483647,-1}
temp	int	$tmp296	%read{377,856} %write{377,856}
const	string	$const51	"_swapEigen2D"		%read{769,776} %write{2147483647,-1}
temp	int	$tmp297	%read{377,856} %write{377,856}
const	string	$const52	"_forceRhandEigen2D"		%read{781,794} %write{2147483647,-1}
temp	normal	$tmp298	%read{377,856} %write{377,856}
temp	vector	$tmp299	%read{377,856} %write{377,856}
temp	float	$tmp300	%read{377,856} %write{377,856}
temp	int	$tmp301	%read{377,856} %write{377,856}
temp	normal	$tmp302	%read{377,856} %write{377,856}
temp	vector	$tmp303	%read{377,856} %write{377,856}
temp	float	$tmp304	%read{377,856} %write{377,856}
temp	int	$tmp305	%read{377,856} %write{377,856}
const	string	$const53	"_alignEigenB2D"		%read{807,807} %write{2147483647,-1}
temp	int	$tmp306	%read{2147483647,-1} %write{377,856}
const	string	$const54	""		%read{809,809} %write{2147483647,-1}
const	string	$const55	"user:Bumprough_Use2016Mode"		%read{809,809} %write{2147483647,-1}
temp	int	$tmp307	%read{377,856} %write{377,856}
temp	float	$tmp308	%read{377,856} %write{377,856}
temp	int	$tmp309	%read{377,856} %write{377,856}
temp	float	$tmp310	%read{377,856} %write{377,856}
temp	int	$tmp311	%read{377,856} %write{377,856}
temp	vector	$tmp312	%read{377,856} %write{377,856}
temp	vector	$tmp313	%read{377,856} %write{377,856}
temp	vector	$tmp314	%read{377,856} %write{377,856}
temp	vector	$tmp315	%read{377,856} %write{377,856}
temp	normal	$tmp316	%read{377,856} %write{377,856}
temp	float	$tmp317	%read{377,856} %write{377,856}
temp	float	$tmp318	%read{377,856} %write{377,856}
temp	int	$tmp319	%read{2147483647,-1} %write{377,856}
temp	float	$tmp320	%read{377,856} %write{377,856}
temp	float	$tmp321	%read{377,856} %write{377,856}
temp	int	$tmp322	%read{2147483647,-1} %write{377,856}
temp	int	$tmp323	%read{858,858} %write{857,857}
temp	float	$tmp324	%read{860,860} %write{859,859}
temp	normal	$tmp325	%read{861,861} %write{860,860}
temp	int	$tmp326	%read{871,871} %write{870,870}
temp	float	$tmp327	%read{881,881} %write{880,880} %derivs
temp	float	$tmp328	%read{912,916} %write{881,881} %derivs
temp	float	$tmp329	%read{883,883} %write{882,882} %derivs
temp	float	$tmp330	%read{906,911} %write{883,883} %derivs
temp	float	$tmp331	%read{889,889} %write{888,888}
temp	vector	$tmp332	%read{894,894} %write{893,893}
temp	float	$tmp333	%read{907,907} %write{906,906} %derivs
temp	float	$tmp334	%read{910,910} %write{907,907} %derivs
temp	float	$tmp335	%read{909,909} %write{908,908} %derivs
temp	float	$tmp336	%read{910,910} %write{909,909} %derivs
temp	int	$tmp337	%read{937,937} %write{936,936}
temp	int	$tmp338	%read{943,946} %write{942,945}
temp	int	$tmp339	%read{945,945} %write{944,944}
temp	int	$tmp340	%read{948,948} %write{947,947}
temp	int	$tmp341	%read{949,953} %write{948,952}
temp	int	$tmp342	%read{951,951} %write{950,950}
temp	int	$tmp343	%read{952,952} %write{951,951}
temp	float	$tmp344	%read{955,955} %write{954,954}
temp	float	$tmp345	%read{957,957} %write{956,956}
temp	float	$tmp346	%read{959,959} %write{958,958}
temp	float	$tmp347	%read{964,964} %write{963,963}
temp	float	$tmp348	%read{963,963} %write{961,961}
temp	float	$tmp349	%read{963,963} %write{962,962}
temp	int	$tmp350	%read{972,972} %write{971,971}
temp	int	$tmp351	%read{978,981} %write{977,980}
temp	int	$tmp352	%read{980,980} %write{979,979}
temp	int	$tmp353	%read{983,983} %write{982,982}
temp	int	$tmp354	%read{984,988} %write{983,987}
temp	int	$tmp355	%read{986,986} %write{985,985}
temp	int	$tmp356	%read{987,987} %write{986,986}
temp	float	$tmp357	%read{990,990} %write{989,989}
temp	float	$tmp358	%read{992,992} %write{991,991}
temp	float	$tmp359	%read{994,994} %write{993,993}
temp	int	$tmp360	%read{1000,1000} %write{999,999}
temp	float	$tmp361	%read{999,999} %write{998,998}
temp	int	$tmp362	%read{1001,1008} %write{1000,1007}
temp	int	$tmp363	%read{1006,1006} %write{1005,1005}
temp	float	$tmp364	%read{1005,1005} %write{1004,1004}
temp	int	$tmp365	%read{1007,1007} %write{1006,1006}
temp	int	$tmp366	%read{1011,1011} %write{1010,1010}
temp	float	$tmp367	%read{1013,1013} %write{1012,1012}
temp	float	$tmp368	%read{1014,1014} %write{1013,1013}
temp	float	$tmp369	%read{1016,1016} %write{1015,1015}
temp	float	$tmp370	%read{1017,1017} %write{1016,1016}
temp	int	$tmp371	%read{1099,1099} %write{1098,1098}
temp	float	$tmp372	%read{1025,1025} %write{1024,1024}
temp	float	$tmp373	%read{1026,1026} %write{1025,1025}
temp	float	$tmp374	%read{1028,1028} %write{1027,1027}
temp	float	$tmp375	%read{1029,1029} %write{1028,1028}
temp	float	$tmp376	%read{1031,1031} %write{1030,1030}
temp	float	$tmp377	%read{1032,1032} %write{1031,1031}
temp	int	$tmp378	%read{1034,1034} %write{1033,1033}
temp	float	$tmp379	%read{1043,1043} %write{1040,1040}
temp	float	$tmp380	%read{1042,1042} %write{1041,1041}
temp	float	$tmp381	%read{1043,1043} %write{1042,1042}
temp	float	$tmp382	%read{1046,1046} %write{1043,1043}
temp	float	$tmp383	%read{1045,1045} %write{1044,1044}
temp	float	$tmp384	%read{1046,1046} %write{1045,1045}
temp	float	$tmp385	%read{1048,1048} %write{1046,1046}
temp	float	$tmp386	%read{1048,1048} %write{1047,1047}
temp	float	$tmp387	%read{1049,1049} %write{1048,1048}
temp	float	$tmp388	%read{1051,1051} %write{1050,1050}
temp	float	$tmp389	%read{1052,1052} %write{1051,1051}
temp	float	$tmp390	%read{1054,1054} %write{1053,1053}
temp	float	$tmp391	%read{1055,1055} %write{1054,1054}
temp	vector	$tmp392	%read{1059,1059} %write{1058,1058}
temp	float	$tmp393	%read{1057,1057} %write{1056,1056}
temp	float	$tmp394	%read{1058,1058} %write{1057,1057}
temp	vector	$tmp395	%read{1063,1063} %write{1062,1062}
temp	float	$tmp396	%read{1061,1061} %write{1060,1060}
temp	float	$tmp397	%read{1062,1062} %write{1061,1061}
temp	float	$tmp398	%read{1067,1067} %write{1066,1066}
temp	vector	$tmp399	%read{1070,1070} %write{1067,1067}
temp	float	$tmp400	%read{1069,1069} %write{1068,1068}
temp	vector	$tmp401	%read{1070,1070} %write{1069,1069}
temp	float	$tmp402	%read{1073,1073} %write{1072,1072}
temp	vector	$tmp403	%read{1076,1076} %write{1073,1073}
temp	float	$tmp404	%read{1075,1075} %write{1074,1074}
temp	vector	$tmp405	%read{1076,1076} %write{1075,1075}
temp	float	$tmp406	%read{1079,1079} %write{1078,1078}
temp	vector	$tmp407	%read{1082,1082} %write{1079,1079}
temp	float	$tmp408	%read{1081,1081} %write{1080,1080}
temp	vector	$tmp409	%read{1082,1082} %write{1081,1081}
temp	vector	$tmp410	%read{1083,1083} %write{1082,1082}
temp	vector	$tmp411	%read{1084,1084} %write{1083,1083}
temp	int	$tmp412	%read{1090,1090} %write{1089,1089}
temp	float	$tmp413	%read{1089,1089} %write{1088,1088}
temp	int	$tmp414	%read{1091,1098} %write{1090,1097}
temp	int	$tmp415	%read{1096,1096} %write{1095,1095}
temp	float	$tmp416	%read{1095,1095} %write{1094,1094}
temp	int	$tmp417	%read{1097,1097} %write{1096,1096}
temp	int	$tmp418	%read{1105,1105} %write{1104,1104}
temp	float	$tmp419	%read{1109,1109} %write{1108,1108}
temp	float	$tmp420	%read{1111,1111} %write{1110,1110}
temp	float	$tmp421	%read{1115,1115} %write{1113,1113}
temp	float	$tmp422	%read{1115,1115} %write{1114,1114}
temp	float	$tmp423	%read{1118,1118} %write{1116,1116}
temp	float	$tmp424	%read{1119,1119} %write{1118,1118}
temp	float	$tmp425	%read{1122,1122} %write{1120,1120}
temp	float	$tmp426	%read{1122,1122} %write{1121,1121}
temp	float	$tmp427	%read{1123,1123} %write{1122,1122}
temp	float	$tmp428	%read{1124,1124} %write{1123,1123}
temp	float	$tmp429	%read{1129,1129} %write{1128,1128}
temp	float	$tmp430	%read{1141,1141} %write{1139,1139}
temp	float	$tmp431	%read{1141,1141} %write{1140,1140}
temp	float	$tmp432	%read{1143,1143} %write{1142,1142}
temp	float	$tmp433	%read{1144,1144} %write{1143,1143}
temp	int	$tmp434	%read{1178,1178} %write{1177,1177}
temp	float	$tmp435	%read{1155,1155} %write{1153,1153}
temp	float	$tmp436	%read{1155,1155} %write{1154,1154}
temp	float	$tmp437	%read{1156,1156} %write{1155,1155}
temp	vector	$tmp438	%read{1159,1159} %write{1157,1157}
temp	vector	$tmp439	%read{1159,1159} %write{1158,1158}
temp	vector	$tmp440	%read{1160,1160} %write{1159,1159}
temp	vector	$tmp441	%read{1163,1163} %write{1161,1161}
temp	vector	$tmp442	%read{1163,1163} %write{1162,1162}
temp	vector	$tmp443	%read{1164,1164} %write{1163,1163}
temp	int	$tmp444	%read{1169,1169} %write{1168,1168}
temp	float	$tmp445	%read{1168,1168} %write{1167,1167}
temp	int	$tmp446	%read{1170,1177} %write{1169,1176}
temp	int	$tmp447	%read{1175,1175} %write{1174,1174}
temp	float	$tmp448	%read{1174,1174} %write{1173,1173}
temp	int	$tmp449	%read{1176,1176} %write{1175,1175}
temp	float	$tmp450	%read{1184,1184} %write{1183,1183}
temp	vector	$tmp451	%read{1189,1189} %write{1188,1188}
temp	float	$tmp452	%read{1202,1202} %write{1201,1201} %derivs
temp	float	$tmp453	%read{1205,1205} %write{1202,1202} %derivs
temp	float	$tmp454	%read{1204,1204} %write{1203,1203} %derivs
temp	float	$tmp455	%read{1205,1205} %write{1204,1204} %derivs
temp	int	$tmp456	%read{1232,1232} %write{1231,1231}
temp	int	$tmp457	%read{1238,1241} %write{1237,1240}
temp	int	$tmp458	%read{1240,1240} %write{1239,1239}
temp	int	$tmp459	%read{1243,1243} %write{1242,1242}
temp	int	$tmp460	%read{1244,1248} %write{1243,1247}
temp	int	$tmp461	%read{1246,1246} %write{1245,1245}
temp	int	$tmp462	%read{1247,1247} %write{1246,1246}
temp	float	$tmp463	%read{1250,1250} %write{1249,1249}
temp	float	$tmp464	%read{1252,1252} %write{1251,1251}
temp	float	$tmp465	%read{1254,1254} %write{1253,1253}
temp	float	$tmp466	%read{1259,1259} %write{1258,1258}
temp	float	$tmp467	%read{1258,1258} %write{1256,1256}
temp	float	$tmp468	%read{1258,1258} %write{1257,1257}
temp	int	$tmp469	%read{1267,1267} %write{1266,1266}
temp	int	$tmp470	%read{1273,1276} %write{1272,1275}
temp	int	$tmp471	%read{1275,1275} %write{1274,1274}
temp	int	$tmp472	%read{1278,1278} %write{1277,1277}
temp	int	$tmp473	%read{1279,1283} %write{1278,1282}
temp	int	$tmp474	%read{1281,1281} %write{1280,1280}
temp	int	$tmp475	%read{1282,1282} %write{1281,1281}
temp	float	$tmp476	%read{1285,1285} %write{1284,1284}
temp	float	$tmp477	%read{1287,1287} %write{1286,1286}
temp	float	$tmp478	%read{1289,1289} %write{1288,1288}
temp	int	$tmp479	%read{1295,1295} %write{1294,1294}
temp	float	$tmp480	%read{1294,1294} %write{1293,1293}
temp	int	$tmp481	%read{1296,1303} %write{1295,1302}
temp	int	$tmp482	%read{1301,1301} %write{1300,1300}
temp	float	$tmp483	%read{1300,1300} %write{1299,1299}
temp	int	$tmp484	%read{1302,1302} %write{1301,1301}
temp	int	$tmp485	%read{1306,1306} %write{1305,1305}
temp	float	$tmp486	%read{1308,1308} %write{1307,1307}
temp	float	$tmp487	%read{1309,1309} %write{1308,1308}
temp	float	$tmp488	%read{1311,1311} %write{1310,1310}
temp	float	$tmp489	%read{1312,1312} %write{1311,1311}
temp	int	$tmp490	%read{1394,1394} %write{1393,1393}
temp	float	$tmp491	%read{1320,1320} %write{1319,1319}
temp	float	$tmp492	%read{1321,1321} %write{1320,1320}
temp	float	$tmp493	%read{1323,1323} %write{1322,1322}
temp	float	$tmp494	%read{1324,1324} %write{1323,1323}
temp	float	$tmp495	%read{1326,1326} %write{1325,1325}
temp	float	$tmp496	%read{1327,1327} %write{1326,1326}
temp	int	$tmp497	%read{1329,1329} %write{1328,1328}
temp	float	$tmp498	%read{1338,1338} %write{1335,1335}
temp	float	$tmp499	%read{1337,1337} %write{1336,1336}
temp	float	$tmp500	%read{1338,1338} %write{1337,1337}
temp	float	$tmp501	%read{1341,1341} %write{1338,1338}
temp	float	$tmp502	%read{1340,1340} %write{1339,1339}
temp	float	$tmp503	%read{1341,1341} %write{1340,1340}
temp	float	$tmp504	%read{1343,1343} %write{1341,1341}
temp	float	$tmp505	%read{1343,1343} %write{1342,1342}
temp	float	$tmp506	%read{1344,1344} %write{1343,1343}
temp	float	$tmp507	%read{1346,1346} %write{1345,1345}
temp	float	$tmp508	%read{1347,1347} %write{1346,1346}
temp	float	$tmp509	%read{1349,1349} %write{1348,1348}
temp	float	$tmp510	%read{1350,1350} %write{1349,1349}
temp	vector	$tmp511	%read{1354,1354} %write{1353,1353}
temp	float	$tmp512	%read{1352,1352} %write{1351,1351}
temp	float	$tmp513	%read{1353,1353} %write{1352,1352}
temp	vector	$tmp514	%read{1358,1358} %write{1357,1357}
temp	float	$tmp515	%read{1356,1356} %write{1355,1355}
temp	float	$tmp516	%read{1357,1357} %write{1356,1356}
temp	float	$tmp517	%read{1362,1362} %write{1361,1361}
temp	vector	$tmp518	%read{1365,1365} %write{1362,1362}
temp	float	$tmp519	%read{1364,1364} %write{1363,1363}
temp	vector	$tmp520	%read{1365,1365} %write{1364,1364}
temp	float	$tmp521	%read{1368,1368} %write{1367,1367}
temp	vector	$tmp522	%read{1371,1371} %write{1368,1368}
temp	float	$tmp523	%read{1370,1370} %write{1369,1369}
temp	vector	$tmp524	%read{1371,1371} %write{1370,1370}
temp	float	$tmp525	%read{1374,1374} %write{1373,1373}
temp	vector	$tmp526	%read{1377,1377} %write{1374,1374}
temp	float	$tmp527	%read{1376,1376} %write{1375,1375}
temp	vector	$tmp528	%read{1377,1377} %write{1376,1376}
temp	vector	$tmp529	%read{1378,1378} %write{1377,1377}
temp	vector	$tmp530	%read{1379,1379} %write{1378,1378}
temp	int	$tmp531	%read{1385,1385} %write{1384,1384}
temp	float	$tmp532	%read{1384,1384} %write{1383,1383}
temp	int	$tmp533	%read{1386,1393} %write{1385,1392}
temp	int	$tmp534	%read{1391,1391} %write{1390,1390}
temp	float	$tmp535	%read{1390,1390} %write{1389,1389}
temp	int	$tmp536	%read{1392,1392} %write{1391,1391}
temp	int	$tmp537	%read{1400,1400} %write{1399,1399}
temp	float	$tmp538	%read{1404,1404} %write{1403,1403}
temp	float	$tmp539	%read{1406,1406} %write{1405,1405}
temp	float	$tmp540	%read{1410,1410} %write{1408,1408}
temp	float	$tmp541	%read{1410,1410} %write{1409,1409}
temp	float	$tmp542	%read{1413,1413} %write{1411,1411}
temp	float	$tmp543	%read{1414,1414} %write{1413,1413}
temp	float	$tmp544	%read{1417,1417} %write{1415,1415}
temp	float	$tmp545	%read{1417,1417} %write{1416,1416}
temp	float	$tmp546	%read{1418,1418} %write{1417,1417}
temp	float	$tmp547	%read{1419,1419} %write{1418,1418}
temp	float	$tmp548	%read{1424,1424} %write{1423,1423}
const	string	$const56	"bumpRoughComponents"		%read{1431,1431} %write{2147483647,-1}
temp	float	$tmp549	%read{1436,1436} %write{1435,1435}
temp	float	$tmp550	%read{1439,1439} %write{1437,1437}
temp	float	$tmp551	%read{1439,1439} %write{1438,1438}
temp	vector	$tmp552	%read{1443,1443} %write{1442,1442}
const	string	$const57	"RixAdjustNormal"		%read{1444,1444} %write{2147483647,-1}
temp	int	$tmp553	%read{1446,1446} %write{1445,1445}
temp	float	$tmp554	%read{1449,1449} %write{1448,1448}
temp	int	$tmp555	%read{1450,1450} %write{1449,1449}
temp	int	$tmp556	%read{1453,1453} %write{1452,1452}
const	float	$const58	1.00999999		%read{1454,1454} %write{2147483647,-1}
temp	float	$tmp557	%read{1455,1455} %write{1454,1454}
temp	float	$tmp558	%read{1456,1456} %write{1455,1455}
temp	vector	$tmp559	%read{1457,1457} %write{1456,1456}
const	string	$const59	"RixBlendWithNormal"		%read{1459,1459} %write{2147483647,-1}
temp	int	$tmp560	%read{1461,1461} %write{1460,1460}
temp	normal	$tmp561	%read{1463,1463} %write{1462,1462}
temp	int	$tmp562	%read{1465,1465} %write{1464,1464}
const	string	$const60	"surfgradFromPerturbedNormal"		%read{1466,1466} %write{2147483647,-1}
temp	vector	$tmp563	%read{1469,1469} %write{1468,1468}
temp	vector	$tmp564	%read{1472,1472} %write{1469,1469}
temp	float	$tmp565	%read{1472,1472} %write{1471,1471}
temp	float	$tmp566	%read{1471,1471} %write{1470,1470}
code manifoldMulti.Tn
# PxrBumpRoughness.osl:92
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.Tn $const2 $const1 	%filename{"PxrBumpRoughness.osl"} %line{92} %argrw{"wrr"}
	aassign		manifoldMulti.Tn $const3 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Tn $const4 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Tn $const5 $const1 	%argrw{"wrr"}
code manifoldMulti.Bn
# PxrBumpRoughness.osl:92
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.Bn $const2 $const1 	%filename{"PxrBumpRoughness.osl"} %line{92} %argrw{"wrr"}
	aassign		manifoldMulti.Bn $const3 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Bn $const4 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Bn $const5 $const1 	%argrw{"wrr"}
code manifoldMulti.hextile0
# PxrBumpRoughness.osl:92
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile0 $const2 $const6 	%filename{"PxrBumpRoughness.osl"} %line{92} %argrw{"wrr"}
	aassign		manifoldMulti.hextile0 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile0 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile0 $const5 $const6 	%argrw{"wrr"}
code manifoldMulti.hextile1
# PxrBumpRoughness.osl:92
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile1 $const2 $const6 	%filename{"PxrBumpRoughness.osl"} %line{92} %argrw{"wrr"}
	aassign		manifoldMulti.hextile1 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile1 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile1 $const5 $const6 	%argrw{"wrr"}
code manifoldMulti.hextile2
# PxrBumpRoughness.osl:92
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile2 $const2 $const6 	%filename{"PxrBumpRoughness.osl"} %line{92} %argrw{"wrr"}
	aassign		manifoldMulti.hextile2 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile2 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile2 $const5 $const6 	%argrw{"wrr"}
code manifoldMulti.hextile3
# PxrBumpRoughness.osl:92
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile3 $const2 $const6 	%filename{"PxrBumpRoughness.osl"} %line{92} %argrw{"wrr"}
	aassign		manifoldMulti.hextile3 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile3 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile3 $const5 $const6 	%argrw{"wrr"}
code ___main___
# PxrBumpRoughness.osl:235
#     vector dPds = 0, dPdt = 0;
	assign		dPds $const2 	%filename{"PxrBumpRoughness.osl"} %line{235} %argrw{"wr"}
	assign		dPdt $const2 	%argrw{"wr"}
# PxrBumpRoughness.osl:236
#     vector vecD1 = 0, vecD2 = 0;
	assign		vecD1 $const2 	%line{236} %argrw{"wr"}
	assign		vecD2 $const2 	%argrw{"wr"}
# PxrBumpRoughness.osl:237
#     BumpRough br = NEUTRAL_BUMPROUGH;
	assign		br.l1 $const8 	%line{237} %argrw{"wr"}
	assign		br.l2 $const8 	%argrw{"wr"}
	assign		br.v1 $const9 	%argrw{"wr"}
	assign		br.v2 $const10 	%argrw{"wr"}
	assign		br.n N 	%argrw{"wr"}
# PxrBumpRoughness.osl:238
#     float resultBumpRoughPresence = 1.0;
	assign		resultBumpRoughPresence $const11 	%line{238} %argrw{"wr"}
# PxrBumpRoughness.osl:240
#     float textureRoughnessGain = 1.0;
	assign		textureRoughnessGain $const11 	%line{240} %argrw{"wr"}
# PxrBumpRoughness.osl:241
#     float _gainRw = gain * textureRoughnessGain;
	mul		_gainRw gain textureRoughnessGain 	%line{241} %argrw{"wrr"}
# PxrBumpRoughness.osl:242
#     float _bumpNormalGainRw = bumpNormalGain * textureRoughnessGain;
	mul		_bumpNormalGainRw bumpNormalGain textureRoughnessGain 	%line{242} %argrw{"wrr"}
# PxrBumpRoughness.osl:243
#     int isMulti = 0;
	assign		isMulti $const2 	%line{243} %argrw{"wr"}
# PxrBumpRoughness.osl:246
#     float inputS = s, inputT = invertT ? invertCoord(t) : t, inputW = 0;
	assign		inputS s 	%line{246} %argrw{"wr"}
	if		invertT 46 47 	%argrw{"r"}
	functioncall	$const12 46 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp25 t 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{48} %argrw{"wr"}
	add		$tmp26 $tmp25 $const11 	%argrw{"wrr"}
	floor		$tmp27 t 	%argrw{"wr"}
	sub		$tmp28 t $tmp27 	%argrw{"wrr"}
	sub		inputT $tmp26 $tmp28 	%argrw{"wrr"}
# PxrBumpRoughness.osl:246
#     float inputS = s, inputT = invertT ? invertCoord(t) : t, inputW = 0;
	assign		inputT t 	%filename{"PxrBumpRoughness.osl"} %line{246} %argrw{"wr"}
	assign		inputW $const2 	%argrw{"wr"}
# PxrBumpRoughness.osl:247
#     if (isconnected(manifold))
	isconnected	$tmp29 manifold 	%line{247} %argrw{"wr"}
	if		$tmp29 52 52 	%argrw{"r"}
# PxrBumpRoughness.osl:249
#         inputS = manifold.Q[0];
	compref		inputS manifold.Q $const2 	%line{249} %argrw{"wrr"}
# PxrBumpRoughness.osl:250
#         inputT = manifold.Q[1];
	compref		inputT manifold.Q $const3 	%line{250} %argrw{"wrr"}
# PxrBumpRoughness.osl:253
#     point Pos = P;
	assign		Pos P 	%line{253} %argrw{"wr"}
# PxrBumpRoughness.osl:254
#     if (useUndisplacedPosition) getattribute("primvar", "P", Pos);
	if		useUndisplacedPosition 55 55 	%line{254} %argrw{"r"}
	getattribute	$tmp30 $const13 $const14 Pos 	%argrw{"wrrw"}
# PxrBumpRoughness.osl:255
#     normal Nin = N;
	assign		Nin N 	%line{255} %argrw{"wr"}
# PxrBumpRoughness.osl:256
#     if (useUndisplacedPosition) getattribute("builtin", "Non", Nin);
	if		useUndisplacedPosition 58 58 	%line{256} %argrw{"r"}
	getattribute	$tmp31 $const15 $const16 Nin 	%argrw{"wrrw"}
# PxrBumpRoughness.osl:258
#     if (isconnected(manifoldMulti))
	isconnected	$tmp32 manifoldMulti 	%line{258} %argrw{"wr"}
	if		$tmp32 870 1431 	%argrw{"r"}
# PxrBumpRoughness.osl:260
#         if (textureRoughness > 0.0)
	gt		$tmp33 textureRoughness $const17 	%line{260} %argrw{"wrr"}
	if		$tmp33 336 336 	%argrw{"r"}
# PxrBumpRoughness.osl:262
#             textureRoughnessGain = estimateRoughnessGain(b2r_texture, 0.0, 0.0,
	functioncall	$const18 336 	%line{262} %argrw{"r"}
# PxrBumpRoughness.osl:47
#     BumpRough textureBumpRough = NEUTRAL_BUMPROUGH;
	assign		___785_textureBumpRough.l1 $const8 	%line{47} %argrw{"wr"}
	assign		___785_textureBumpRough.l2 $const8 	%argrw{"wr"}
	assign		___785_textureBumpRough.v1 $const9 	%argrw{"wr"}
	assign		___785_textureBumpRough.v2 $const10 	%argrw{"wr"}
	assign		___785_textureBumpRough.n N 	%argrw{"wr"}
# PxrBumpRoughness.osl:48
#     vector vecD1 = 0, vecD2 = 0;
	assign		___785_vecD1 $const2 	%line{48} %argrw{"wr"}
	assign		___785_vecD2 $const2 	%argrw{"wr"}
# PxrBumpRoughness.osl:53
#                                         1e-04, floor(ss) + 0.5, floor(tt) + 0.5,
	floor		$tmp34 $const17 	%line{53} %argrw{"wr"}
	add		$tmp35 $tmp34 $const20 	%argrw{"wrr"}
	floor		$tmp36 $const17 	%argrw{"wr"}
	add		$tmp37 $tmp36 $const20 	%argrw{"wrr"}
# PxrBumpRoughness.osl:52
#     textureBumpRough = ReadBumpRough(b2r_texture,
	functioncall	$const23 326 	%line{52} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:633
#     float baseRoughnessSqr = baseRoughness * baseRoughness;
	mul		___778_baseRoughnessSqr $const19 $const19 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{633} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:636
#     ComputeOrthonormalTangentSpace(Nin, dPds, dPdt, U, V, W);
	functioncall	$const24 87 	%line{636} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:518
#     normal PN = cross(dPds, dPdt);
	cross		___774_PN dPdu dPdv 	%line{518} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:523
#     int lefthanded = dot(PN, Ng) < 0;
	dot		$tmp38 ___774_PN Ng 	%line{523} %argrw{"wrr"}
	lt		___774_lefthanded $tmp38 $const2 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:524
#     normal N_ = lefthanded ? -Nin : Nin;
	if		___774_lefthanded 82 83 	%line{524} %argrw{"r"}
	neg		___774_N_ Nin 	%argrw{"wr"}
	assign		___774_N_ Nin 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:526
#     U = normalize(cross(dPdt, N_));
	cross		$tmp39 dPdv ___774_N_ 	%line{526} %argrw{"wrr"}
	normalize	___778_U $tmp39 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:527
#     V = cross(N_, U);
	cross		___778_V ___774_N_ ___778_U 	%line{527} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:528
#     W = Nin;
	assign		___778_W Nin 	%line{528} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:639
#     BumpRough result = {baseRoughnessSqr, baseRoughnessSqr, U, V, W};
	assign		___778_result.l1 ___778_baseRoughnessSqr 	%line{639} %argrw{"wr"}
	assign		___778_result.l2 ___778_baseRoughnessSqr 	%argrw{"wr"}
	assign		___778_result.v1 ___778_U 	%argrw{"wr"}
	assign		___778_result.v2 ___778_V 	%argrw{"wr"}
	assign		___778_result.n ___778_W 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:641
#     int validDs = ReadBumpRoughTextures(filenameD1D2, inputS, inputT,
	functioncall	$const25 199 	%line{641} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:482
#     TxCoords coords = initTxCoords(inputS, inputT, 0);
	functioncall	$const26 115 	%line{482} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 101 102 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{102} %argrw{"r"}
	functioncall	$const12 101 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp40 $tmp37 	%line{48} %argrw{"wr"}
	add		$tmp41 $tmp40 $const11 	%argrw{"wrr"}
	floor		$tmp42 $tmp37 	%argrw{"wr"}
	sub		$tmp43 $tmp37 $tmp42 	%argrw{"wrr"}
	sub		___636__tt $tmp41 $tmp43 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp37 	%line{102} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:103
#     TxCoords coords = { ss, _tt, Dx(ss), Dx(_tt), Dy(ss), Dy(_tt) };
	assign		___636_coords.s $tmp35 	%line{103} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp35 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp35 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:104
#     return coords;
	assign		___773_coords.s ___636_coords.s 	%line{104} %argrw{"wr"}
	assign		___773_coords.t ___636_coords.t 	%argrw{"wr"}
	assign		___773_coords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___773_coords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___773_coords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___773_coords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:483
#     TxParams params = {0, textureBlur, color(0), 0.0, textureFilter, textureFilterScale};
	assign		___773_params.firstchannel $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{483} %argrw{"wr"}
	assign		___773_params.blur $const22 	%argrw{"wr"}
	assign		___773_params.missingcolor $const27 	%argrw{"wr"}
	assign		___773_params.missingalpha $const17 	%argrw{"wr"}
	assign		___773_params.interp $const21 	%argrw{"wr"}
	assign		___773_params.width $const22 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:488
#     d1 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 151 	%line{488} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     int success = 0;
	assign		___649_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{187} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:188
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{188} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{189} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:191
#     color result = texture(filename,
	texture		___649_result b2r_texture ___773_coords.s ___773_coords.t ___773_coords.dsdx ___773_coords.dtdx ___773_coords.dsdy ___773_coords.dtdy $const29 ___773_params.firstchannel $const30 ___773_params.blur $const31 ___773_params.missingcolor $const32 ___773_params.interp $const33 ___773_params.width 	%line{191} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:201
#     if (result == params.missingcolor) return result;
	eq		$tmp44 ___649_result ___773_params.missingcolor 	%line{201} %argrw{"wrr"}
	if		$tmp44 130 130 	%argrw{"r"}
	assign		___785_vecD1 ___649_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:204
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{204} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:207
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const34 ___649_nchannels 	%line{207} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#     if (success && nchannels)
	neq		$tmp45 ___649_success $const2 	%line{208} %argrw{"wrr"}
	if		$tmp45 136 136 	%argrw{"r"}
	neq		$tmp46 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp45 $tmp46 	%argrw{"wr"}
	if		$tmp45 150 150 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:210
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp47 ___649_nchannels $const3 	%line{210} %argrw{"wrr"}
	neq		$tmp48 $tmp47 $const2 	%argrw{"wrr"}
	if		$tmp48 140 143 	%argrw{"r"}
	eq		$tmp49 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp50 $tmp49 $const2 	%argrw{"wrr"}
	assign		$tmp48 $tmp50 	%argrw{"wr"}
	if		$tmp48 150 150 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[0] = result[0];
	compref		$tmp51 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp51 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:214
#             finalResult[1] = result[0];
	compref		$tmp52 ___649_result $const2 	%line{214} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp52 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:215
#             finalResult[2] = result[0];
	compref		$tmp53 ___649_result $const2 	%line{215} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp53 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:219
#     return finalResult;
	assign		___785_vecD1 ___649_finalResult 	%line{219} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:489
#     d1[2] = max(d1[0], d1[1]);
	compref		$tmp55 ___785_vecD1 $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{489} %argrw{"wrr"}
	compref		$tmp56 ___785_vecD1 $const3 	%argrw{"wrr"}
	max		$tmp54 $tmp55 $tmp56 	%argrw{"wrr"}
	compassign	___785_vecD1 $const4 $tmp54 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:491
#     params.firstchannel = 2;
	assign		___773_params.firstchannel $const4 	%line{491} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:492
#     d2 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 186 	%line{492} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     int success = 0;
	assign		___649_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{187} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:188
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{188} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{189} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:191
#     color result = texture(filename,
	texture		___649_result b2r_texture ___773_coords.s ___773_coords.t ___773_coords.dsdx ___773_coords.dtdx ___773_coords.dsdy ___773_coords.dtdy $const29 ___773_params.firstchannel $const30 ___773_params.blur $const31 ___773_params.missingcolor $const32 ___773_params.interp $const33 ___773_params.width 	%line{191} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:201
#     if (result == params.missingcolor) return result;
	eq		$tmp57 ___649_result ___773_params.missingcolor 	%line{201} %argrw{"wrr"}
	if		$tmp57 165 165 	%argrw{"r"}
	assign		___785_vecD2 ___649_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:204
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{204} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:207
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const34 ___649_nchannels 	%line{207} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#     if (success && nchannels)
	neq		$tmp58 ___649_success $const2 	%line{208} %argrw{"wrr"}
	if		$tmp58 171 171 	%argrw{"r"}
	neq		$tmp59 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp58 $tmp59 	%argrw{"wr"}
	if		$tmp58 185 185 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:210
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp60 ___649_nchannels $const3 	%line{210} %argrw{"wrr"}
	neq		$tmp61 $tmp60 $const2 	%argrw{"wrr"}
	if		$tmp61 175 178 	%argrw{"r"}
	eq		$tmp62 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp63 $tmp62 $const2 	%argrw{"wrr"}
	assign		$tmp61 $tmp63 	%argrw{"wr"}
	if		$tmp61 185 185 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[0] = result[0];
	compref		$tmp64 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp64 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:214
#             finalResult[1] = result[0];
	compref		$tmp65 ___649_result $const2 	%line{214} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp65 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:215
#             finalResult[2] = result[0];
	compref		$tmp66 ___649_result $const2 	%line{215} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp66 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:219
#     return finalResult;
	assign		___785_vecD2 ___649_finalResult 	%line{219} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	functioncall	$const35 190 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{494} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp68 ___785_vecD1 ___785_vecD1 	%line{62} %argrw{"wrr"}
	ge		$tmp67 $tmp68 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp69 $tmp67 $const2 	%line{494} %argrw{"wrr"}
	if		$tmp69 198 198 	%argrw{"r"}
	functioncall	$const35 196 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp71 ___785_vecD2 ___785_vecD2 	%line{62} %argrw{"wrr"}
	ge		$tmp70 $tmp71 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp72 $tmp70 $const2 	%line{494} %argrw{"wrr"}
	assign		$tmp69 $tmp72 	%argrw{"wr"}
	assign		___778_validDs $tmp69 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#     if (validDs)
	if		___778_validDs 321 321 	%line{644} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:648
#         if (invertBumpNormal == 0) {
	eq		$tmp73 $const2 $const2 	%line{648} %argrw{"wrr"}
	if		$tmp73 208 208 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:649
#             d1[0] = -d1[0];
	compref		$tmp74 ___785_vecD1 $const2 	%line{649} %argrw{"wrr"}
	neg		$tmp75 $tmp74 	%argrw{"wr"}
	compassign	___785_vecD1 $const2 $tmp75 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:650
#             d1[1] = -d1[1];
	compref		$tmp76 ___785_vecD1 $const3 	%line{650} %argrw{"wrr"}
	neg		$tmp77 $tmp76 	%argrw{"wr"}
	compassign	___785_vecD1 $const3 $tmp77 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	functioncall	$const37 289 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:542
#     float dx = d1[0];
	compref		___775_dx ___785_vecD1 $const2 	%line{542} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:543
#     float dy = d1[1];
	compref		___775_dy ___785_vecD1 $const3 	%line{543} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:544
#     float dxdx = d2[0];
	compref		___775_dxdx ___785_vecD2 $const2 	%line{544} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:545
#     float dydy = d2[1];
	compref		___775_dydy ___785_vecD2 $const3 	%line{545} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:546
#     float dxdy = d2[2];
	compref		___775_dxdy ___785_vecD2 $const4 	%line{546} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:554
#     float sxx = 2.0 * (dxdx - dx*dx);
	mul		$tmp79 ___775_dx ___775_dx 	%line{554} %argrw{"wrr"}
	sub		$tmp80 ___775_dxdx $tmp79 	%argrw{"wrr"}
	mul		___775_sxx $const38 $tmp80 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:555
#     float sxy = 2.0 * (dxdy - dx*dy);
	mul		$tmp81 ___775_dx ___775_dy 	%line{555} %argrw{"wrr"}
	sub		$tmp82 ___775_dxdy $tmp81 	%argrw{"wrr"}
	mul		___775_sxy $const38 $tmp82 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:556
#     float syy = 2.0 * (dydy - dy*dy);
	mul		$tmp83 ___775_dy ___775_dy 	%line{556} %argrw{"wrr"}
	sub		$tmp84 ___775_dydy $tmp83 	%argrw{"wrr"}
	mul		___775_syy $const38 $tmp84 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:558
#     if (varianceGain != 1.0) {
	neq		$tmp85 $const11 $const11 	%line{558} %argrw{"wrr"}
	if		$tmp85 229 229 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:559
#         float varianceGainSqr = varianceGain * varianceGain;
	mul		___776_varianceGainSqr $const11 $const11 	%line{559} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:560
#         sxx *= varianceGainSqr;
	mul		___775_sxx ___775_sxx ___776_varianceGainSqr 	%line{560} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:561
#         sxy *= varianceGainSqr;
	mul		___775_sxy ___775_sxy ___776_varianceGainSqr 	%line{561} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:562
#         syy *= varianceGainSqr;
	mul		___775_syy ___775_syy ___776_varianceGainSqr 	%line{562} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:569
#     BumpRough_CovarToEigen2D(sxx, sxy, syy, l1, l2, v1, v2);
	functioncall	$const39 254 	%line{569} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:219
#     float del = sqrt(a*a + 4.0*b*b - 2.0*a*c + c*c);
	mul		$tmp86 ___775_sxx ___775_sxx 	%line{219} %argrw{"wrr"}
	mul		$tmp87 $const40 ___775_sxy 	%argrw{"wrr"}
	mul		$tmp88 $tmp87 ___775_sxy 	%argrw{"wrr"}
	add		$tmp89 $tmp86 $tmp88 	%argrw{"wrr"}
	mul		$tmp90 $const38 ___775_sxx 	%argrw{"wrr"}
	mul		$tmp91 $tmp90 ___775_syy 	%argrw{"wrr"}
	sub		$tmp92 $tmp89 $tmp91 	%argrw{"wrr"}
	mul		$tmp93 ___775_syy ___775_syy 	%argrw{"wrr"}
	add		$tmp94 $tmp92 $tmp93 	%argrw{"wrr"}
	sqrt		___753_del $tmp94 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:222
#     l1 = 0.5 * (a + c + del);
	add		$tmp95 ___775_sxx ___775_syy 	%line{222} %argrw{"wrr"}
	add		$tmp96 $tmp95 ___753_del 	%argrw{"wrr"}
	mul		___775_l1 $const20 $tmp96 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:223
#     l2 = 0.5 * (a + c - del);
	add		$tmp97 ___775_sxx ___775_syy 	%line{223} %argrw{"wrr"}
	sub		$tmp98 $tmp97 ___753_del 	%argrw{"wrr"}
	mul		___775_l2 $const20 $tmp98 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:226
#     v1 = normalize(vector((l1 - c)/b, 1.0, 0.0));
	sub		$tmp100 ___775_l1 ___775_syy 	%line{226} %argrw{"wrr"}
	div		$tmp101 $tmp100 ___775_sxy 	%argrw{"wrr"}
	vector		$tmp99 $tmp101 $const11 $const17 	%argrw{"wrrr"}
	normalize	___775_v1 $tmp99 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:227
#     v2 = normalize(vector((l2 - c)/b, 1.0, 0.0));
	sub		$tmp103 ___775_l2 ___775_syy 	%line{227} %argrw{"wrr"}
	div		$tmp104 $tmp103 ___775_sxy 	%argrw{"wrr"}
	vector		$tmp102 $tmp104 $const11 $const17 	%argrw{"wrrr"}
	normalize	___775_v2 $tmp102 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:572
#     bumpRough.l1 = l1;
	assign		___778_result.l1 ___775_l1 	%line{572} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:573
#     bumpRough.l2 = l2;
	assign		___778_result.l2 ___775_l2 	%line{573} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     bumpRough.v1 = U * v1[0] + V * v1[1];
	compref		$tmp105 ___775_v1 $const2 	%line{578} %argrw{"wrr"}
	mul		$tmp106 ___778_U $tmp105 	%argrw{"wrr"}
	compref		$tmp107 ___775_v1 $const3 	%argrw{"wrr"}
	mul		$tmp108 ___778_V $tmp107 	%argrw{"wrr"}
	add		___778_result.v1 $tmp106 $tmp108 	%argrw{"wrr"}
	assign		___778_result.v1 ___778_result.v1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:579
#     bumpRough.v2 = U * v2[0] + V * v2[1];
	compref		$tmp109 ___775_v2 $const2 	%line{579} %argrw{"wrr"}
	mul		$tmp110 ___778_U $tmp109 	%argrw{"wrr"}
	compref		$tmp111 ___775_v2 $const3 	%argrw{"wrr"}
	mul		$tmp112 ___778_V $tmp111 	%argrw{"wrr"}
	add		___778_result.v2 $tmp110 $tmp112 	%argrw{"wrr"}
	assign		___778_result.v2 ___778_result.v2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	mul		$tmp113 $const11 ___775_dx 	%line{582} %argrw{"wrr"}
	mul		$tmp114 $tmp113 ___778_U 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	mul		$tmp115 $const11 ___775_dy 	%line{583} %argrw{"wrr"}
	mul		$tmp116 $tmp115 ___778_V 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	add		$tmp117 $tmp114 $tmp116 	%line{582} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	add		$tmp118 $tmp117 ___778_W 	%line{583} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	normalize	___778_result.n $tmp118 	%line{582} %argrw{"wr"}
	assign		___778_result.n ___778_result.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	functioncall	$const35 280 	%line{586} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp120 ___778_result.v1 ___778_result.v1 	%line{62} %argrw{"wrr"}
	ge		$tmp119 $tmp120 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp121 $tmp119 $const2 	%line{586} %argrw{"wrr"}
	if		$tmp121 288 288 	%argrw{"r"}
	functioncall	$const35 286 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp123 ___778_result.v2 ___778_result.v2 	%line{62} %argrw{"wrr"}
	ge		$tmp122 $tmp123 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp124 $tmp122 $const2 	%line{586} %argrw{"wrr"}
	assign		$tmp121 $tmp124 	%argrw{"wr"}
	assign		$tmp78 $tmp121 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	if		$tmp78 321 321 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:659
#             result.l1 += baseRoughnessSqr;
	add		___778_result.l1 ___778_result.l1 ___778_baseRoughnessSqr 	%line{659} %argrw{"wrr"}
	assign		___778_result.l1 ___778_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:660
#             result.l2 += baseRoughnessSqr;
	add		___778_result.l2 ___778_result.l2 ___778_baseRoughnessSqr 	%line{660} %argrw{"wrr"}
	assign		___778_result.l2 ___778_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:662
#             if (anisotropyGain != 1.0) {
	neq		$tmp125 $const11 $const11 	%line{662} %argrw{"wrr"}
	if		$tmp125 321 321 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:663
#                 BumpRoughAnisotropyAdjust(anisotropyGain, result);
	functioncall	$const41 321 	%line{663} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:596
#     float eps = 1.e-12;
	assign		___777_eps $const42 	%line{596} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:597
#     float roughnessU = sqrt(bumpRough.l1) + eps;
	sqrt		$tmp126 ___778_result.l1 	%line{597} %argrw{"wr"}
	add		___777_roughnessU $tmp126 ___777_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:598
#     float roughnessV = sqrt(bumpRough.l2) + eps;
	sqrt		$tmp127 ___778_result.l2 	%line{598} %argrw{"wr"}
	add		___777_roughnessV $tmp127 ___777_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:600
#     float ratio = roughnessU / roughnessV;
	div		___777_ratio ___777_roughnessU ___777_roughnessV 	%line{600} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:601
#     float anisotropy = (ratio - 1.0) / (ratio + 1.0);
	sub		$tmp128 ___777_ratio $const11 	%line{601} %argrw{"wrr"}
	add		$tmp129 ___777_ratio $const11 	%argrw{"wrr"}
	div		___777_anisotropy $tmp128 $tmp129 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:603
#     anisotropy = clamp(anisotropy * anisotropyGain, 0.0, 1.0);
	mul		$tmp130 ___777_anisotropy $const11 	%line{603} %argrw{"wrr"}
	functioncall	$const43 310 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxMonterey_x86-64_clang14_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp131 $tmp130 $const11 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxMonterey_x86-64_clang14_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		___777_anisotropy $tmp131 $const17 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:605
#     float alpha = 1.0 / (anisotropy*anisotropy - 2.0 * anisotropy + 2.0);
	mul		$tmp132 ___777_anisotropy ___777_anisotropy 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{605} %argrw{"wrr"}
	mul		$tmp133 $const38 ___777_anisotropy 	%argrw{"wrr"}
	sub		$tmp134 $tmp132 $tmp133 	%argrw{"wrr"}
	add		$tmp135 $tmp134 $const38 	%argrw{"wrr"}
	div		___777_alpha $const11 $tmp135 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:607
#     float variance = bumpRough.l1 + bumpRough.l2;
	add		___777_variance ___778_result.l1 ___778_result.l2 	%line{607} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:609
#     bumpRough.l1 = variance * alpha;
	mul		___778_result.l1 ___777_variance ___777_alpha 	%line{609} %argrw{"wrr"}
	assign		___778_result.l1 ___778_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:610
#     bumpRough.l2 = variance * (1.0 - alpha);
	sub		$tmp136 $const11 ___777_alpha 	%line{610} %argrw{"wrr"}
	mul		___778_result.l2 ___777_variance $tmp136 	%argrw{"wrr"}
	assign		___778_result.l2 ___778_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:668
#     return result;
	assign		___785_textureBumpRough.l1 ___778_result.l1 	%line{668} %argrw{"wr"}
	assign		___785_textureBumpRough.l2 ___778_result.l2 	%argrw{"wr"}
	assign		___785_textureBumpRough.v1 ___778_result.v1 	%argrw{"wr"}
	assign		___785_textureBumpRough.v2 ___778_result.v2 	%argrw{"wr"}
	assign		___785_textureBumpRough.n ___778_result.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:58
#     float textureRoughnessU = sqrt(textureBumpRough.l1);
	sqrt		___785_textureRoughnessU ___785_textureBumpRough.l1 	%filename{"PxrBumpRoughness.osl"} %line{58} %argrw{"wr"}
# PxrBumpRoughness.osl:59
#     float textureRoughnessV = sqrt(textureBumpRough.l2);
	sqrt		___785_textureRoughnessV ___785_textureBumpRough.l2 	%line{59} %argrw{"wr"}
# PxrBumpRoughness.osl:60
#     float rudivrv = textureRoughnessU/textureRoughnessV;
	div		___785_rudivrv ___785_textureRoughnessU ___785_textureRoughnessV 	%line{60} %argrw{"wrr"}
# PxrBumpRoughness.osl:62
#     float textureAnisotropy = (rudivrv-1.0)/(rudivrv+1.0);
	sub		$tmp137 ___785_rudivrv $const11 	%line{62} %argrw{"wrr"}
	add		$tmp138 ___785_rudivrv $const11 	%argrw{"wrr"}
	div		___785_textureAnisotropy $tmp137 $tmp138 	%argrw{"wrr"}
# PxrBumpRoughness.osl:63
#     float textureRoughnessGain = textureRoughness / (textureRoughnessU / (1 + textureAnisotropy));
	add		$tmp139 $const11 ___785_textureAnisotropy 	%line{63} %argrw{"wrr"}
	div		$tmp140 ___785_textureRoughnessU $tmp139 	%argrw{"wrr"}
	div		___785_textureRoughnessGain textureRoughness $tmp140 	%argrw{"wrr"}
# PxrBumpRoughness.osl:68
#     return textureRoughnessGain;
	assign		textureRoughnessGain ___785_textureRoughnessGain 	%line{68} %argrw{"wr"}
# PxrBumpRoughness.osl:265
#         point sta[3] = {manifoldMulti.stAlpha0,
	aassign		___787_sta $const2 manifoldMulti.stAlpha0 	%line{265} %argrw{"wrr"}
	aassign		___787_sta $const3 manifoldMulti.stAlpha1 	%argrw{"wrr"}
	aassign		___787_sta $const4 manifoldMulti.stAlpha2 	%argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aref		$tmp141 manifoldMulti.hextile0 $const2 	%line{268} %argrw{"wrr"}
	aassign		___787_hex.s $const2 $tmp141 	%argrw{"wrr"}
	aref		$tmp142 manifoldMulti.hextile0 $const3 	%argrw{"wrr"}
	aassign		___787_hex.t $const2 $tmp142 	%argrw{"wrr"}
	aref		$tmp143 manifoldMulti.hextile0 $const4 	%argrw{"wrr"}
	aassign		___787_hex.w $const2 $tmp143 	%argrw{"wrr"}
	aref		$tmp144 manifoldMulti.hextile0 $const5 	%argrw{"wrr"}
	aassign		___787_hex.r $const2 $tmp144 	%argrw{"wrr"}
# PxrBumpRoughness.osl:269
#                               FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp145 manifoldMulti.hextile1 $const2 	%line{269} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___787_hex.s $const3 $tmp145 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:269
#                               FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp146 manifoldMulti.hextile1 $const3 	%line{269} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___787_hex.t $const3 $tmp146 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:269
#                               FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp147 manifoldMulti.hextile1 $const4 	%line{269} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___787_hex.w $const3 $tmp147 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:269
#                               FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp148 manifoldMulti.hextile1 $const5 	%line{269} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___787_hex.r $const3 $tmp148 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:270
#                               FromFlatHexTileData(manifoldMulti.hextile2)};
	aref		$tmp149 manifoldMulti.hextile2 $const2 	%line{270} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___787_hex.s $const4 $tmp149 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:270
#                               FromFlatHexTileData(manifoldMulti.hextile2)};
	aref		$tmp150 manifoldMulti.hextile2 $const3 	%line{270} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___787_hex.t $const4 $tmp150 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:270
#                               FromFlatHexTileData(manifoldMulti.hextile2)};
	aref		$tmp151 manifoldMulti.hextile2 $const4 	%line{270} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___787_hex.w $const4 $tmp151 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:270
#                               FromFlatHexTileData(manifoldMulti.hextile2)};
	aref		$tmp152 manifoldMulti.hextile2 $const5 	%line{270} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___787_hex.r $const4 $tmp152 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:271
#         int numProj = manifoldMulti.minNumTextures;
	assign		___787_numProj manifoldMulti.minNumTextures 	%line{271} %argrw{"wr"}
# PxrBumpRoughness.osl:273
#         BumpRough resultBumpRough = NEUTRAL_BUMPROUGH;
	assign		___787_resultBumpRough.l1 $const8 	%line{273} %argrw{"wr"}
	assign		___787_resultBumpRough.l2 $const8 	%argrw{"wr"}
	assign		___787_resultBumpRough.v1 $const9 	%argrw{"wr"}
	assign		___787_resultBumpRough.v2 $const10 	%argrw{"wr"}
	assign		___787_resultBumpRough.n N 	%argrw{"wr"}
# PxrBumpRoughness.osl:274
#         float resultBumpRoughPresence = 1.0;
	assign		___787_resultBumpRoughPresence $const11 	%line{274} %argrw{"wr"}
# PxrBumpRoughness.osl:279
#         vector Nc = resultBumpRough.n;
	assign		___787_Nc ___787_resultBumpRough.n 	%line{279} %argrw{"wr"}
# PxrBumpRoughness.osl:280
#         resultBumpRough.n = -resultBumpRough.n;
	neg		___787_resultBumpRough.n ___787_resultBumpRough.n 	%line{280} %argrw{"wr"}
	assign		___787_resultBumpRough.n ___787_resultBumpRough.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:281
#         float wvdenom = 0.0, sqwaccum = 0.0;
	assign		___787_wvdenom $const17 	%line{281} %argrw{"wr"}
	assign		___787_sqwaccum $const17 	%argrw{"wr"}
# PxrBumpRoughness.osl:283
#         for (int i = 0; i < numProj; i++)
	for		$tmp154 377 379 855 857 	%line{283} %argrw{"r"}
	assign		___789_i $const2 	%argrw{"wr"}
	lt		$tmp153 ___789_i ___787_numProj 	%argrw{"wrr"}
	neq		$tmp154 $tmp153 $const2 	%argrw{"wrr"}
# PxrBumpRoughness.osl:286
#             int do_hextile = validHexTileData(hex[i]);
	aref		$tmp155.s ___787_hex.s ___789_i 	%line{286} %argrw{"wrr"}
	aref		$tmp155.t ___787_hex.t ___789_i 	%argrw{"wrr"}
	aref		$tmp155.w ___787_hex.w ___789_i 	%argrw{"wrr"}
	aref		$tmp155.r ___787_hex.r ___789_i 	%argrw{"wrr"}
	functioncall	$const44 389 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:78
#     return hxt.w == INVALID_HEXTILE_WEIGHT ? 0 : 1;
	eq		$tmp157 $tmp155.w $const7 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{78} %argrw{"wrr"}
	if		$tmp157 387 388 	%argrw{"r"}
	assign		___790_do_hextile $const2 	%argrw{"wr"}
	assign		___790_do_hextile $const3 	%argrw{"wr"}
	return
# PxrBumpRoughness.osl:290
#             int numSamples = do_hextile ? 3 : 1;
	if		___790_do_hextile 391 392 	%filename{"PxrBumpRoughness.osl"} %line{290} %argrw{"r"}
	assign		___790_numSamples $const5 	%argrw{"wr"}
	assign		___790_numSamples $const3 	%argrw{"wr"}
# PxrBumpRoughness.osl:291
#             float weight = sta[i][2];  // hexTile.Weights[i];
	aref		$tmp158 ___787_sta ___789_i 	%line{291} %argrw{"wrr"}
	compref		___790_weight $tmp158 $const4 	%argrw{"wrr"}
# PxrBumpRoughness.osl:292
#             float wmult = do_hextile ? 1.0 : 3.0;
	if		___790_do_hextile 396 397 	%line{292} %argrw{"r"}
	assign		___790_wmult $const11 	%argrw{"wr"}
	assign		___790_wmult $const45 	%argrw{"wr"}
# PxrBumpRoughness.osl:293
#             if (weight > 0.0)
	gt		$tmp159 ___790_weight $const17 	%line{293} %argrw{"wrr"}
	if		$tmp159 855 855 	%argrw{"r"}
# PxrBumpRoughness.osl:295
#                 sqwaccum = 0.0;
	assign		___787_sqwaccum $const17 	%line{295} %argrw{"wr"}
# PxrBumpRoughness.osl:296
#                 for (int j = 0; j < numSamples; j++)
	for		$tmp161 402 404 850 852 	%line{296} %argrw{"r"}
	assign		___792_j $const2 	%argrw{"wr"}
	lt		$tmp160 ___792_j ___790_numSamples 	%argrw{"wrr"}
	neq		$tmp161 $tmp160 $const2 	%argrw{"wrr"}
# PxrBumpRoughness.osl:299
#                     inputS = numSamples == 1 ? sta[i][0] : hex[i].s[j];
	eq		$tmp162 ___790_numSamples $const3 	%line{299} %argrw{"wrr"}
	if		$tmp162 408 410 	%argrw{"r"}
	aref		$tmp163 ___787_sta ___789_i 	%argrw{"wrr"}
	compref		inputS $tmp163 $const2 	%argrw{"wrr"}
	aref		$tmp164 ___787_hex.s ___789_i 	%argrw{"wrr"}
	compref		inputS $tmp164 ___792_j 	%argrw{"wrr"}
# PxrBumpRoughness.osl:300
#                     inputT = numSamples == 1 ? sta[i][1] : hex[i].t[j];
	eq		$tmp165 ___790_numSamples $const3 	%line{300} %argrw{"wrr"}
	if		$tmp165 414 416 	%argrw{"r"}
	aref		$tmp166 ___787_sta ___789_i 	%argrw{"wrr"}
	compref		inputT $tmp166 $const3 	%argrw{"wrr"}
	aref		$tmp167 ___787_hex.t ___789_i 	%argrw{"wrr"}
	compref		inputT $tmp167 ___792_j 	%argrw{"wrr"}
# PxrBumpRoughness.osl:301
#                     inputW = numSamples == 1 ? 1.0       : hex[i].w[j];
	eq		$tmp168 ___790_numSamples $const3 	%line{301} %argrw{"wrr"}
	if		$tmp168 419 421 	%argrw{"r"}
	assign		inputW $const11 	%argrw{"wr"}
	aref		$tmp169 ___787_hex.w ___789_i 	%argrw{"wrr"}
	compref		inputW $tmp169 ___792_j 	%argrw{"wrr"}
# PxrBumpRoughness.osl:305
#                     sqwaccum += inputW * inputW;
	mul		$tmp170 inputW inputW 	%line{305} %argrw{"wrr"}
	add		___787_sqwaccum ___787_sqwaccum $tmp170 	%argrw{"wrr"}
# PxrBumpRoughness.osl:307
#                     BumpRough_PartialDeriv(Pos, inputS, inputT, dPds, dPdt);
	functioncall	$const46 455 	%line{307} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:192
#     vector dQdx = Dx(Q);
	Dx		___752_dQdx Pos 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{192} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:193
#     vector dQdy = Dy(Q);
	Dy		___752_dQdy Pos 	%line{193} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:195
#     float A = Dx(a);
	Dx		___752_A inputS 	%line{195} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:196
#     float B = Dx(b);
	Dx		___752_B inputT 	%line{196} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:197
#     float C = Dy(a);
	Dy		___752_C inputS 	%line{197} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:198
#     float D = Dy(b);
	Dy		___752_D inputT 	%line{198} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:200
#     float invdet = 1./(A*D - B*C);
	mul		$tmp172 ___752_A ___752_D 	%line{200} %argrw{"wrr"}
	mul		$tmp173 ___752_B ___752_C 	%argrw{"wrr"}
	sub		$tmp174 $tmp172 $tmp173 	%argrw{"wrr"}
	div		___752_invdet $const11 $tmp174 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:202
#     dQda = (dQdx*D-dQdy*B)*invdet;
	mul		$tmp175 ___752_dQdx ___752_D 	%line{202} %argrw{"wrr"}
	mul		$tmp176 ___752_dQdy ___752_B 	%argrw{"wrr"}
	sub		$tmp177 $tmp175 $tmp176 	%argrw{"wrr"}
	mul		dPds $tmp177 ___752_invdet 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:203
#     dQdb = (dQdy*A-dQdx*C)*invdet;
	mul		$tmp178 ___752_dQdy ___752_A 	%line{203} %argrw{"wrr"}
	mul		$tmp179 ___752_dQdx ___752_C 	%argrw{"wrr"}
	sub		$tmp180 $tmp178 $tmp179 	%argrw{"wrr"}
	mul		dPdt $tmp180 ___752_invdet 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	functioncall	$const35 446 	%line{205} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp182 dPds dPds 	%line{62} %argrw{"wrr"}
	ge		$tmp181 $tmp182 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	neq		$tmp183 $tmp181 $const2 	%line{205} %argrw{"wrr"}
	if		$tmp183 454 454 	%argrw{"r"}
	functioncall	$const35 452 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp185 dPdt dPdt 	%line{62} %argrw{"wrr"}
	ge		$tmp184 $tmp185 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	neq		$tmp186 $tmp184 $const2 	%line{205} %argrw{"wrr"}
	assign		$tmp183 $tmp186 	%argrw{"wr"}
	assign		$tmp171 $tmp183 	%argrw{"wr"}
# PxrBumpRoughness.osl:308
#                     br = ReadBumpRough(b2r_texture,
	functioncall	$const23 707 	%filename{"PxrBumpRoughness.osl"} %line{308} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:633
#     float baseRoughnessSqr = baseRoughness * baseRoughness;
	mul		___778_baseRoughnessSqr baseRoughness baseRoughness 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{633} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:636
#     ComputeOrthonormalTangentSpace(Nin, dPds, dPdt, U, V, W);
	functioncall	$const24 468 	%line{636} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:518
#     normal PN = cross(dPds, dPdt);
	cross		___774_PN dPds dPdt 	%line{518} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:523
#     int lefthanded = dot(PN, Ng) < 0;
	dot		$tmp187 ___774_PN Ng 	%line{523} %argrw{"wrr"}
	lt		___774_lefthanded $tmp187 $const2 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:524
#     normal N_ = lefthanded ? -Nin : Nin;
	if		___774_lefthanded 463 464 	%line{524} %argrw{"r"}
	neg		___774_N_ Nin 	%argrw{"wr"}
	assign		___774_N_ Nin 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:526
#     U = normalize(cross(dPdt, N_));
	cross		$tmp188 dPdt ___774_N_ 	%line{526} %argrw{"wrr"}
	normalize	___778_U $tmp188 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:527
#     V = cross(N_, U);
	cross		___778_V ___774_N_ ___778_U 	%line{527} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:528
#     W = Nin;
	assign		___778_W Nin 	%line{528} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:639
#     BumpRough result = {baseRoughnessSqr, baseRoughnessSqr, U, V, W};
	assign		___778_result.l1 ___778_baseRoughnessSqr 	%line{639} %argrw{"wr"}
	assign		___778_result.l2 ___778_baseRoughnessSqr 	%argrw{"wr"}
	assign		___778_result.v1 ___778_U 	%argrw{"wr"}
	assign		___778_result.v2 ___778_V 	%argrw{"wr"}
	assign		___778_result.n ___778_W 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:641
#     int validDs = ReadBumpRoughTextures(filenameD1D2, inputS, inputT,
	functioncall	$const25 580 	%line{641} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:482
#     TxCoords coords = initTxCoords(inputS, inputT, 0);
	functioncall	$const26 496 	%line{482} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 482 483 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{102} %argrw{"r"}
	functioncall	$const12 482 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp189 inputT 	%line{48} %argrw{"wr"}
	add		$tmp190 $tmp189 $const11 	%argrw{"wrr"}
	floor		$tmp191 inputT 	%argrw{"wr"}
	sub		$tmp192 inputT $tmp191 	%argrw{"wrr"}
	sub		___636__tt $tmp190 $tmp192 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt inputT 	%line{102} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:103
#     TxCoords coords = { ss, _tt, Dx(ss), Dx(_tt), Dy(ss), Dy(_tt) };
	assign		___636_coords.s inputS 	%line{103} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx inputS 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy inputS 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:104
#     return coords;
	assign		___773_coords.s ___636_coords.s 	%line{104} %argrw{"wr"}
	assign		___773_coords.t ___636_coords.t 	%argrw{"wr"}
	assign		___773_coords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___773_coords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___773_coords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___773_coords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:483
#     TxParams params = {0, textureBlur, color(0), 0.0, textureFilter, textureFilterScale};
	assign		___773_params.firstchannel $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{483} %argrw{"wr"}
	assign		___773_params.blur blur 	%argrw{"wr"}
	assign		___773_params.missingcolor $const27 	%argrw{"wr"}
	assign		___773_params.missingalpha $const17 	%argrw{"wr"}
	assign		___773_params.interp filter 	%argrw{"wr"}
	assign		___773_params.width filterScale 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:488
#     d1 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 532 	%line{488} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     int success = 0;
	assign		___649_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{187} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:188
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{188} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{189} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:191
#     color result = texture(filename,
	texture		___649_result b2r_texture ___773_coords.s ___773_coords.t ___773_coords.dsdx ___773_coords.dtdx ___773_coords.dsdy ___773_coords.dtdy $const29 ___773_params.firstchannel $const30 ___773_params.blur $const31 ___773_params.missingcolor $const32 ___773_params.interp $const33 ___773_params.width 	%line{191} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:201
#     if (result == params.missingcolor) return result;
	eq		$tmp193 ___649_result ___773_params.missingcolor 	%line{201} %argrw{"wrr"}
	if		$tmp193 511 511 	%argrw{"r"}
	assign		vecD1 ___649_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:204
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{204} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:207
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const34 ___649_nchannels 	%line{207} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#     if (success && nchannels)
	neq		$tmp194 ___649_success $const2 	%line{208} %argrw{"wrr"}
	if		$tmp194 517 517 	%argrw{"r"}
	neq		$tmp195 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp194 $tmp195 	%argrw{"wr"}
	if		$tmp194 531 531 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:210
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp196 ___649_nchannels $const3 	%line{210} %argrw{"wrr"}
	neq		$tmp197 $tmp196 $const2 	%argrw{"wrr"}
	if		$tmp197 521 524 	%argrw{"r"}
	eq		$tmp198 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp199 $tmp198 $const2 	%argrw{"wrr"}
	assign		$tmp197 $tmp199 	%argrw{"wr"}
	if		$tmp197 531 531 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[0] = result[0];
	compref		$tmp200 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp200 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:214
#             finalResult[1] = result[0];
	compref		$tmp201 ___649_result $const2 	%line{214} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp201 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:215
#             finalResult[2] = result[0];
	compref		$tmp202 ___649_result $const2 	%line{215} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp202 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:219
#     return finalResult;
	assign		vecD1 ___649_finalResult 	%line{219} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:489
#     d1[2] = max(d1[0], d1[1]);
	compref		$tmp204 vecD1 $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{489} %argrw{"wrr"}
	compref		$tmp205 vecD1 $const3 	%argrw{"wrr"}
	max		$tmp203 $tmp204 $tmp205 	%argrw{"wrr"}
	compassign	vecD1 $const4 $tmp203 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:491
#     params.firstchannel = 2;
	assign		___773_params.firstchannel $const4 	%line{491} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:492
#     d2 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 567 	%line{492} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     int success = 0;
	assign		___649_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{187} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:188
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{188} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{189} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:191
#     color result = texture(filename,
	texture		___649_result b2r_texture ___773_coords.s ___773_coords.t ___773_coords.dsdx ___773_coords.dtdx ___773_coords.dsdy ___773_coords.dtdy $const29 ___773_params.firstchannel $const30 ___773_params.blur $const31 ___773_params.missingcolor $const32 ___773_params.interp $const33 ___773_params.width 	%line{191} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:201
#     if (result == params.missingcolor) return result;
	eq		$tmp206 ___649_result ___773_params.missingcolor 	%line{201} %argrw{"wrr"}
	if		$tmp206 546 546 	%argrw{"r"}
	assign		vecD2 ___649_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:204
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{204} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:207
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const34 ___649_nchannels 	%line{207} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#     if (success && nchannels)
	neq		$tmp207 ___649_success $const2 	%line{208} %argrw{"wrr"}
	if		$tmp207 552 552 	%argrw{"r"}
	neq		$tmp208 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp207 $tmp208 	%argrw{"wr"}
	if		$tmp207 566 566 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:210
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp209 ___649_nchannels $const3 	%line{210} %argrw{"wrr"}
	neq		$tmp210 $tmp209 $const2 	%argrw{"wrr"}
	if		$tmp210 556 559 	%argrw{"r"}
	eq		$tmp211 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp212 $tmp211 $const2 	%argrw{"wrr"}
	assign		$tmp210 $tmp212 	%argrw{"wr"}
	if		$tmp210 566 566 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[0] = result[0];
	compref		$tmp213 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp213 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:214
#             finalResult[1] = result[0];
	compref		$tmp214 ___649_result $const2 	%line{214} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp214 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:215
#             finalResult[2] = result[0];
	compref		$tmp215 ___649_result $const2 	%line{215} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp215 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:219
#     return finalResult;
	assign		vecD2 ___649_finalResult 	%line{219} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	functioncall	$const35 571 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{494} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp217 vecD1 vecD1 	%line{62} %argrw{"wrr"}
	ge		$tmp216 $tmp217 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp218 $tmp216 $const2 	%line{494} %argrw{"wrr"}
	if		$tmp218 579 579 	%argrw{"r"}
	functioncall	$const35 577 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp220 vecD2 vecD2 	%line{62} %argrw{"wrr"}
	ge		$tmp219 $tmp220 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp221 $tmp219 $const2 	%line{494} %argrw{"wrr"}
	assign		$tmp218 $tmp221 	%argrw{"wr"}
	assign		___778_validDs $tmp218 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#     if (validDs)
	if		___778_validDs 702 702 	%line{644} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:648
#         if (invertBumpNormal == 0) {
	eq		$tmp222 invertBumpNormal $const2 	%line{648} %argrw{"wrr"}
	if		$tmp222 589 589 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:649
#             d1[0] = -d1[0];
	compref		$tmp223 vecD1 $const2 	%line{649} %argrw{"wrr"}
	neg		$tmp224 $tmp223 	%argrw{"wr"}
	compassign	vecD1 $const2 $tmp224 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:650
#             d1[1] = -d1[1];
	compref		$tmp225 vecD1 $const3 	%line{650} %argrw{"wrr"}
	neg		$tmp226 $tmp225 	%argrw{"wr"}
	compassign	vecD1 $const3 $tmp226 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	functioncall	$const37 670 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:542
#     float dx = d1[0];
	compref		___775_dx vecD1 $const2 	%line{542} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:543
#     float dy = d1[1];
	compref		___775_dy vecD1 $const3 	%line{543} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:544
#     float dxdx = d2[0];
	compref		___775_dxdx vecD2 $const2 	%line{544} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:545
#     float dydy = d2[1];
	compref		___775_dydy vecD2 $const3 	%line{545} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:546
#     float dxdy = d2[2];
	compref		___775_dxdy vecD2 $const4 	%line{546} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:554
#     float sxx = 2.0 * (dxdx - dx*dx);
	mul		$tmp228 ___775_dx ___775_dx 	%line{554} %argrw{"wrr"}
	sub		$tmp229 ___775_dxdx $tmp228 	%argrw{"wrr"}
	mul		___775_sxx $const38 $tmp229 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:555
#     float sxy = 2.0 * (dxdy - dx*dy);
	mul		$tmp230 ___775_dx ___775_dy 	%line{555} %argrw{"wrr"}
	sub		$tmp231 ___775_dxdy $tmp230 	%argrw{"wrr"}
	mul		___775_sxy $const38 $tmp231 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:556
#     float syy = 2.0 * (dydy - dy*dy);
	mul		$tmp232 ___775_dy ___775_dy 	%line{556} %argrw{"wrr"}
	sub		$tmp233 ___775_dydy $tmp232 	%argrw{"wrr"}
	mul		___775_syy $const38 $tmp233 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:558
#     if (varianceGain != 1.0) {
	neq		$tmp234 _gainRw $const11 	%line{558} %argrw{"wrr"}
	if		$tmp234 610 610 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:559
#         float varianceGainSqr = varianceGain * varianceGain;
	mul		___776_varianceGainSqr _gainRw _gainRw 	%line{559} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:560
#         sxx *= varianceGainSqr;
	mul		___775_sxx ___775_sxx ___776_varianceGainSqr 	%line{560} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:561
#         sxy *= varianceGainSqr;
	mul		___775_sxy ___775_sxy ___776_varianceGainSqr 	%line{561} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:562
#         syy *= varianceGainSqr;
	mul		___775_syy ___775_syy ___776_varianceGainSqr 	%line{562} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:569
#     BumpRough_CovarToEigen2D(sxx, sxy, syy, l1, l2, v1, v2);
	functioncall	$const39 635 	%line{569} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:219
#     float del = sqrt(a*a + 4.0*b*b - 2.0*a*c + c*c);
	mul		$tmp235 ___775_sxx ___775_sxx 	%line{219} %argrw{"wrr"}
	mul		$tmp236 $const40 ___775_sxy 	%argrw{"wrr"}
	mul		$tmp237 $tmp236 ___775_sxy 	%argrw{"wrr"}
	add		$tmp238 $tmp235 $tmp237 	%argrw{"wrr"}
	mul		$tmp239 $const38 ___775_sxx 	%argrw{"wrr"}
	mul		$tmp240 $tmp239 ___775_syy 	%argrw{"wrr"}
	sub		$tmp241 $tmp238 $tmp240 	%argrw{"wrr"}
	mul		$tmp242 ___775_syy ___775_syy 	%argrw{"wrr"}
	add		$tmp243 $tmp241 $tmp242 	%argrw{"wrr"}
	sqrt		___753_del $tmp243 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:222
#     l1 = 0.5 * (a + c + del);
	add		$tmp244 ___775_sxx ___775_syy 	%line{222} %argrw{"wrr"}
	add		$tmp245 $tmp244 ___753_del 	%argrw{"wrr"}
	mul		___775_l1 $const20 $tmp245 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:223
#     l2 = 0.5 * (a + c - del);
	add		$tmp246 ___775_sxx ___775_syy 	%line{223} %argrw{"wrr"}
	sub		$tmp247 $tmp246 ___753_del 	%argrw{"wrr"}
	mul		___775_l2 $const20 $tmp247 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:226
#     v1 = normalize(vector((l1 - c)/b, 1.0, 0.0));
	sub		$tmp249 ___775_l1 ___775_syy 	%line{226} %argrw{"wrr"}
	div		$tmp250 $tmp249 ___775_sxy 	%argrw{"wrr"}
	vector		$tmp248 $tmp250 $const11 $const17 	%argrw{"wrrr"}
	normalize	___775_v1 $tmp248 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:227
#     v2 = normalize(vector((l2 - c)/b, 1.0, 0.0));
	sub		$tmp252 ___775_l2 ___775_syy 	%line{227} %argrw{"wrr"}
	div		$tmp253 $tmp252 ___775_sxy 	%argrw{"wrr"}
	vector		$tmp251 $tmp253 $const11 $const17 	%argrw{"wrrr"}
	normalize	___775_v2 $tmp251 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:572
#     bumpRough.l1 = l1;
	assign		___778_result.l1 ___775_l1 	%line{572} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:573
#     bumpRough.l2 = l2;
	assign		___778_result.l2 ___775_l2 	%line{573} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     bumpRough.v1 = U * v1[0] + V * v1[1];
	compref		$tmp254 ___775_v1 $const2 	%line{578} %argrw{"wrr"}
	mul		$tmp255 ___778_U $tmp254 	%argrw{"wrr"}
	compref		$tmp256 ___775_v1 $const3 	%argrw{"wrr"}
	mul		$tmp257 ___778_V $tmp256 	%argrw{"wrr"}
	add		___778_result.v1 $tmp255 $tmp257 	%argrw{"wrr"}
	assign		___778_result.v1 ___778_result.v1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:579
#     bumpRough.v2 = U * v2[0] + V * v2[1];
	compref		$tmp258 ___775_v2 $const2 	%line{579} %argrw{"wrr"}
	mul		$tmp259 ___778_U $tmp258 	%argrw{"wrr"}
	compref		$tmp260 ___775_v2 $const3 	%argrw{"wrr"}
	mul		$tmp261 ___778_V $tmp260 	%argrw{"wrr"}
	add		___778_result.v2 $tmp259 $tmp261 	%argrw{"wrr"}
	assign		___778_result.v2 ___778_result.v2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	mul		$tmp262 _bumpNormalGainRw ___775_dx 	%line{582} %argrw{"wrr"}
	mul		$tmp263 $tmp262 ___778_U 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	mul		$tmp264 _bumpNormalGainRw ___775_dy 	%line{583} %argrw{"wrr"}
	mul		$tmp265 $tmp264 ___778_V 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	add		$tmp266 $tmp263 $tmp265 	%line{582} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	add		$tmp267 $tmp266 ___778_W 	%line{583} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	normalize	___778_result.n $tmp267 	%line{582} %argrw{"wr"}
	assign		___778_result.n ___778_result.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	functioncall	$const35 661 	%line{586} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp269 ___778_result.v1 ___778_result.v1 	%line{62} %argrw{"wrr"}
	ge		$tmp268 $tmp269 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp270 $tmp268 $const2 	%line{586} %argrw{"wrr"}
	if		$tmp270 669 669 	%argrw{"r"}
	functioncall	$const35 667 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp272 ___778_result.v2 ___778_result.v2 	%line{62} %argrw{"wrr"}
	ge		$tmp271 $tmp272 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp273 $tmp271 $const2 	%line{586} %argrw{"wrr"}
	assign		$tmp270 $tmp273 	%argrw{"wr"}
	assign		$tmp227 $tmp270 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	if		$tmp227 702 702 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:659
#             result.l1 += baseRoughnessSqr;
	add		___778_result.l1 ___778_result.l1 ___778_baseRoughnessSqr 	%line{659} %argrw{"wrr"}
	assign		___778_result.l1 ___778_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:660
#             result.l2 += baseRoughnessSqr;
	add		___778_result.l2 ___778_result.l2 ___778_baseRoughnessSqr 	%line{660} %argrw{"wrr"}
	assign		___778_result.l2 ___778_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:662
#             if (anisotropyGain != 1.0) {
	neq		$tmp274 anisotropyGain $const11 	%line{662} %argrw{"wrr"}
	if		$tmp274 702 702 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:663
#                 BumpRoughAnisotropyAdjust(anisotropyGain, result);
	functioncall	$const41 702 	%line{663} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:596
#     float eps = 1.e-12;
	assign		___777_eps $const42 	%line{596} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:597
#     float roughnessU = sqrt(bumpRough.l1) + eps;
	sqrt		$tmp275 ___778_result.l1 	%line{597} %argrw{"wr"}
	add		___777_roughnessU $tmp275 ___777_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:598
#     float roughnessV = sqrt(bumpRough.l2) + eps;
	sqrt		$tmp276 ___778_result.l2 	%line{598} %argrw{"wr"}
	add		___777_roughnessV $tmp276 ___777_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:600
#     float ratio = roughnessU / roughnessV;
	div		___777_ratio ___777_roughnessU ___777_roughnessV 	%line{600} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:601
#     float anisotropy = (ratio - 1.0) / (ratio + 1.0);
	sub		$tmp277 ___777_ratio $const11 	%line{601} %argrw{"wrr"}
	add		$tmp278 ___777_ratio $const11 	%argrw{"wrr"}
	div		___777_anisotropy $tmp277 $tmp278 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:603
#     anisotropy = clamp(anisotropy * anisotropyGain, 0.0, 1.0);
	mul		$tmp279 ___777_anisotropy anisotropyGain 	%line{603} %argrw{"wrr"}
	functioncall	$const43 691 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxMonterey_x86-64_clang14_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp280 $tmp279 $const11 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxMonterey_x86-64_clang14_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		___777_anisotropy $tmp280 $const17 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:605
#     float alpha = 1.0 / (anisotropy*anisotropy - 2.0 * anisotropy + 2.0);
	mul		$tmp281 ___777_anisotropy ___777_anisotropy 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{605} %argrw{"wrr"}
	mul		$tmp282 $const38 ___777_anisotropy 	%argrw{"wrr"}
	sub		$tmp283 $tmp281 $tmp282 	%argrw{"wrr"}
	add		$tmp284 $tmp283 $const38 	%argrw{"wrr"}
	div		___777_alpha $const11 $tmp284 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:607
#     float variance = bumpRough.l1 + bumpRough.l2;
	add		___777_variance ___778_result.l1 ___778_result.l2 	%line{607} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:609
#     bumpRough.l1 = variance * alpha;
	mul		___778_result.l1 ___777_variance ___777_alpha 	%line{609} %argrw{"wrr"}
	assign		___778_result.l1 ___778_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:610
#     bumpRough.l2 = variance * (1.0 - alpha);
	sub		$tmp285 $const11 ___777_alpha 	%line{610} %argrw{"wrr"}
	mul		___778_result.l2 ___777_variance $tmp285 	%argrw{"wrr"}
	assign		___778_result.l2 ___778_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:668
#     return result;
	assign		br.l1 ___778_result.l1 	%line{668} %argrw{"wr"}
	assign		br.l2 ___778_result.l2 	%argrw{"wr"}
	assign		br.v1 ___778_result.v1 	%argrw{"wr"}
	assign		br.v2 ___778_result.v2 	%argrw{"wr"}
	assign		br.n ___778_result.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:314
#                         Nin, br, weight * inputW,
	mul		$tmp286 ___790_weight inputW 	%filename{"PxrBumpRoughness.osl"} %line{314} %argrw{"wrr"}
# PxrBumpRoughness.osl:313
#                     BumpRough_EigenBlend_AddNormalWeightedVariance(
	functioncall	$const47 850 	%line{313} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:423
#     if(Oover<=0.){
	le		$tmp287 $tmp286 $const17 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{423} %argrw{"wrr"}
	if		$tmp287 718 718 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:424
#         Eout = Eunder;
	assign		___787_resultBumpRough.l1 ___787_resultBumpRough.l1 	%line{424} %argrw{"wr"}
	assign		___787_resultBumpRough.l2 ___787_resultBumpRough.l2 	%argrw{"wr"}
	assign		___787_resultBumpRough.v1 ___787_resultBumpRough.v1 	%argrw{"wr"}
	assign		___787_resultBumpRough.v2 ___787_resultBumpRough.v2 	%argrw{"wr"}
	assign		___787_resultBumpRough.n ___787_resultBumpRough.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:425
#         Oout = Ounder;
	assign		___787_resultBumpRoughPresence ___787_resultBumpRoughPresence 	%line{425} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:426
#         return;
	return	%line{426}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:430
#     BumpRough e_over = Eover;
	assign		___770_e_over.l1 br.l1 	%line{430} %argrw{"wr"}
	assign		___770_e_over.l2 br.l2 	%argrw{"wr"}
	assign		___770_e_over.v1 br.v1 	%argrw{"wr"}
	assign		___770_e_over.v2 br.v2 	%argrw{"wr"}
	assign		___770_e_over.n br.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:431
#     e_over.l1 = Oover*Eover.l1;
	mul		___770_e_over.l1 $tmp286 br.l1 	%line{431} %argrw{"wrr"}
	assign		___770_e_over.l1 ___770_e_over.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:432
#     e_over.l2 = Oover*Eover.l2;
	mul		___770_e_over.l2 $tmp286 br.l2 	%line{432} %argrw{"wrr"}
	assign		___770_e_over.l2 ___770_e_over.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:433
#     BumpRough_CombineEigens2D(Nin, e_over, Eunder, Eout);
	functioncall	$const48 844 	%line{433} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:236
#     if(a.l1==0. && a.l2==0.){
	eq		$tmp288 ___770_e_over.l1 $const17 	%line{236} %argrw{"wrr"}
	neq		$tmp289 $tmp288 $const2 	%argrw{"wrr"}
	if		$tmp289 734 734 	%argrw{"r"}
	eq		$tmp290 ___770_e_over.l2 $const17 	%argrw{"wrr"}
	neq		$tmp291 $tmp290 $const2 	%argrw{"wrr"}
	assign		$tmp289 $tmp291 	%argrw{"wr"}
	if		$tmp289 740 844 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:237
#         c = b;
	assign		___787_resultBumpRough.l1 ___787_resultBumpRough.l1 	%line{237} %argrw{"wr"}
	assign		___787_resultBumpRough.l2 ___787_resultBumpRough.l2 	%argrw{"wr"}
	assign		___787_resultBumpRough.v1 ___787_resultBumpRough.v1 	%argrw{"wr"}
	assign		___787_resultBumpRough.v2 ___787_resultBumpRough.v2 	%argrw{"wr"}
	assign		___787_resultBumpRough.n ___787_resultBumpRough.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:238
#     } else if (b.l1==0. && b.l2==0.){
	eq		$tmp292 ___787_resultBumpRough.l1 $const17 	%line{238} %argrw{"wrr"}
	neq		$tmp293 $tmp292 $const2 	%argrw{"wrr"}
	if		$tmp293 746 746 	%argrw{"r"}
	eq		$tmp294 ___787_resultBumpRough.l2 $const17 	%argrw{"wrr"}
	neq		$tmp295 $tmp294 $const2 	%argrw{"wrr"}
	assign		$tmp293 $tmp295 	%argrw{"wr"}
	if		$tmp293 752 844 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:239
#         c = a;
	assign		___787_resultBumpRough.l1 ___770_e_over.l1 	%line{239} %argrw{"wr"}
	assign		___787_resultBumpRough.l2 ___770_e_over.l2 	%argrw{"wr"}
	assign		___787_resultBumpRough.v1 ___770_e_over.v1 	%argrw{"wr"}
	assign		___787_resultBumpRough.v2 ___770_e_over.v2 	%argrw{"wr"}
	assign		___787_resultBumpRough.n ___770_e_over.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:241
#         _combineEigens2D(Nin,
	functioncall	$const49 844 	%line{241} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:157
#     _normalizeEigen2D(al1, al2, av1, av2, al1, al2, av1, av2);
	functioncall	$const50 760 	%line{157} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:81
#     float w1 = length(av1);
	length		___738_w1 ___770_e_over.v1 	%line{81} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:82
#     float w2 = length(av2);
	length		___738_w2 ___770_e_over.v2 	%line{82} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:83
#     ov1 = normalize(av1);
	normalize	___770_e_over.v1 ___770_e_over.v1 	%line{83} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:84
#     ov2 = normalize(av2);
	normalize	___770_e_over.v2 ___770_e_over.v2 	%line{84} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:85
#     ol1 = al1*w1;
	mul		___770_e_over.l1 ___770_e_over.l1 ___738_w1 	%line{85} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:86
#     ol2 = al2*w2;
	mul		___770_e_over.l2 ___770_e_over.l2 ___738_w2 	%line{86} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:158
#     _normalizeEigen2D(bl1, bl2, bv1, bv2, bl1, bl2, bv1, bv2);
	functioncall	$const50 767 	%line{158} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:81
#     float w1 = length(av1);
	length		___738_w1 ___787_resultBumpRough.v1 	%line{81} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:82
#     float w2 = length(av2);
	length		___738_w2 ___787_resultBumpRough.v2 	%line{82} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:83
#     ov1 = normalize(av1);
	normalize	___787_resultBumpRough.v1 ___787_resultBumpRough.v1 	%line{83} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:84
#     ov2 = normalize(av2);
	normalize	___787_resultBumpRough.v2 ___787_resultBumpRough.v2 	%line{84} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:85
#     ol1 = al1*w1;
	mul		___787_resultBumpRough.l1 ___787_resultBumpRough.l1 ___738_w1 	%line{85} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:86
#     ol2 = al2*w2;
	mul		___787_resultBumpRough.l2 ___787_resultBumpRough.l2 ___738_w2 	%line{86} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:159
#     if(al1<al2){
	lt		$tmp296 ___770_e_over.l1 ___770_e_over.l2 	%line{159} %argrw{"wrr"}
	if		$tmp296 774 774 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:160
#         _swapEigen2D(al1, al2, av1, av2, al1, al2, av1, av2);
	functioncall	$const51 774 	%line{160} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:70
#     ol1 = al2;
	assign		___770_e_over.l1 ___770_e_over.l2 	%line{70} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:71
#     ov1 = av2;
	assign		___770_e_over.v1 ___770_e_over.v2 	%line{71} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:72
#     ol2 = al1;
	assign		___770_e_over.l2 ___770_e_over.l1 	%line{72} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:73
#     ov2 = av1;
	assign		___770_e_over.v2 ___770_e_over.v1 	%line{73} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:162
#     if(bl1<bl2){
	lt		$tmp297 ___787_resultBumpRough.l1 ___787_resultBumpRough.l2 	%line{162} %argrw{"wrr"}
	if		$tmp297 781 781 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:163
#         _swapEigen2D(bl1, bl2, bv1, bv2, bl1, bl2, bv1, bv2);
	functioncall	$const51 781 	%line{163} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:70
#     ol1 = al2;
	assign		___787_resultBumpRough.l1 ___787_resultBumpRough.l2 	%line{70} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:71
#     ov1 = av2;
	assign		___787_resultBumpRough.v1 ___787_resultBumpRough.v2 	%line{71} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:72
#     ol2 = al1;
	assign		___787_resultBumpRough.l2 ___787_resultBumpRough.l1 	%line{72} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:73
#     ov2 = av1;
	assign		___787_resultBumpRough.v2 ___787_resultBumpRough.v1 	%line{73} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:165
#     _forceRhandEigen2D(Nin, al1, al2, av1, av2, al1, al2, av1, av2);
	functioncall	$const52 794 	%line{165} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:97
#     ol1 = al1;
	assign		___770_e_over.l1 ___770_e_over.l1 	%line{97} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:98
#     ol2 = al2;
	assign		___770_e_over.l2 ___770_e_over.l2 	%line{98} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:99
#     ov1 = av1;
	assign		___770_e_over.v1 ___770_e_over.v1 	%line{99} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:100
#     vector Nn = vector(normalize(Nin));
	normalize	$tmp298 Nin 	%line{100} %argrw{"wr"}
	assign		___739_Nn $tmp298 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:101
#     vector Ncross = vector(cross(av1, av2));
	cross		$tmp299 ___770_e_over.v1 ___770_e_over.v2 	%line{101} %argrw{"wrr"}
	assign		___739_Ncross $tmp299 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:102
#     if(dot(Nn,Ncross)<.0){
	dot		$tmp300 ___739_Nn ___739_Ncross 	%line{102} %argrw{"wrr"}
	lt		$tmp301 $tmp300 $const17 	%argrw{"wrr"}
	if		$tmp301 793 794 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:103
#         ov2 = -av2;
	neg		___770_e_over.v2 ___770_e_over.v2 	%line{103} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:105
#         ov2 = av2;
	assign		___770_e_over.v2 ___770_e_over.v2 	%line{105} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:166
#     _forceRhandEigen2D(Nin, bl1, bl2, bv1, bv2, bl1, bl2, bv1, bv2);
	functioncall	$const52 807 	%line{166} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:97
#     ol1 = al1;
	assign		___787_resultBumpRough.l1 ___787_resultBumpRough.l1 	%line{97} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:98
#     ol2 = al2;
	assign		___787_resultBumpRough.l2 ___787_resultBumpRough.l2 	%line{98} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:99
#     ov1 = av1;
	assign		___787_resultBumpRough.v1 ___787_resultBumpRough.v1 	%line{99} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:100
#     vector Nn = vector(normalize(Nin));
	normalize	$tmp302 Nin 	%line{100} %argrw{"wr"}
	assign		___739_Nn $tmp302 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:101
#     vector Ncross = vector(cross(av1, av2));
	cross		$tmp303 ___787_resultBumpRough.v1 ___787_resultBumpRough.v2 	%line{101} %argrw{"wrr"}
	assign		___739_Ncross $tmp303 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:102
#     if(dot(Nn,Ncross)<.0){
	dot		$tmp304 ___739_Nn ___739_Ncross 	%line{102} %argrw{"wrr"}
	lt		$tmp305 $tmp304 $const17 	%argrw{"wrr"}
	if		$tmp305 806 807 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:103
#         ov2 = -av2;
	neg		___787_resultBumpRough.v2 ___787_resultBumpRough.v2 	%line{103} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:105
#         ov2 = av2;
	assign		___787_resultBumpRough.v2 ___787_resultBumpRough.v2 	%line{105} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:167
#     _alignEigenB2D(al1, al2, av1, av2,
	functioncall	$const53 834 	%line{167} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:120
#     float Bumprough_Use2016Mode = 1.0;
	assign		___742_Bumprough_Use2016Mode $const11 	%line{120} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:121
#     getattribute("", "user:Bumprough_Use2016Mode", Bumprough_Use2016Mode);
	getattribute	$tmp306 $const54 $const55 ___742_Bumprough_Use2016Mode 	%line{121} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:123
#     if (Bumprough_Use2016Mode == 1.0){
	eq		$tmp307 ___742_Bumprough_Use2016Mode $const11 	%line{123} %argrw{"wrr"}
	if		$tmp307 823 834 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:124
#         if (dot(av1,bv1)<.0) {
	dot		$tmp308 ___770_e_over.v1 ___787_resultBumpRough.v1 	%line{124} %argrw{"wrr"}
	lt		$tmp309 $tmp308 $const17 	%argrw{"wrr"}
	if		$tmp309 819 823 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:125
#             ol1 = bl1;
	assign		___787_resultBumpRough.l1 ___787_resultBumpRough.l1 	%line{125} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:126
#             ol2 = bl2;
	assign		___787_resultBumpRough.l2 ___787_resultBumpRough.l2 	%line{126} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:127
#             ov1 = bv1;
	assign		___787_resultBumpRough.v1 ___787_resultBumpRough.v1 	%line{127} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:128
#             ov2 = bv2;
	assign		___787_resultBumpRough.v2 ___787_resultBumpRough.v2 	%line{128} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:130
#             ol1 = bl1;
	assign		___787_resultBumpRough.l1 ___787_resultBumpRough.l1 	%line{130} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:131
#             ol2 = bl2;
	assign		___787_resultBumpRough.l2 ___787_resultBumpRough.l2 	%line{131} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:132
#             ov1 = -bv1;
	neg		___787_resultBumpRough.v1 ___787_resultBumpRough.v1 	%line{132} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:133
#             ov2 = -bv2;
	neg		___787_resultBumpRough.v2 ___787_resultBumpRough.v2 	%line{133} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:136
#         if (dot(av1,bv1)>=.0) {
	dot		$tmp310 ___770_e_over.v1 ___787_resultBumpRough.v1 	%line{136} %argrw{"wrr"}
	ge		$tmp311 $tmp310 $const17 	%argrw{"wrr"}
	if		$tmp311 830 834 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:137
#             ol1 = bl1;
	assign		___787_resultBumpRough.l1 ___787_resultBumpRough.l1 	%line{137} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:138
#             ol2 = bl2;
	assign		___787_resultBumpRough.l2 ___787_resultBumpRough.l2 	%line{138} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:139
#             ov1 = bv1;
	assign		___787_resultBumpRough.v1 ___787_resultBumpRough.v1 	%line{139} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:140
#             ov2 = bv2;
	assign		___787_resultBumpRough.v2 ___787_resultBumpRough.v2 	%line{140} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:142
#             ol1 = bl1;
	assign		___787_resultBumpRough.l1 ___787_resultBumpRough.l1 	%line{142} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:143
#             ol2 = bl2;
	assign		___787_resultBumpRough.l2 ___787_resultBumpRough.l2 	%line{143} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:144
#             ov1 = -bv1;
	neg		___787_resultBumpRough.v1 ___787_resultBumpRough.v1 	%line{144} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:145
#             ov2 = -bv2;
	neg		___787_resultBumpRough.v2 ___787_resultBumpRough.v2 	%line{145} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:171
#     vector sumv = al1*av1+bl1*bv1;
	mul		$tmp312 ___770_e_over.l1 ___770_e_over.v1 	%line{171} %argrw{"wrr"}
	mul		$tmp313 ___787_resultBumpRough.l1 ___787_resultBumpRough.v1 	%argrw{"wrr"}
	add		___749_sumv $tmp312 $tmp313 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:173
#     ol1 = al1+bl1;
	add		___787_resultBumpRough.l1 ___770_e_over.l1 ___787_resultBumpRough.l1 	%line{173} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:174
#     ol2 = al2+bl2;
	add		___787_resultBumpRough.l2 ___770_e_over.l2 ___787_resultBumpRough.l2 	%line{174} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:175
#     ov1 = normalize(sumv);
	normalize	___787_resultBumpRough.v1 ___749_sumv 	%line{175} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:178
#     ov2 = normalize(cross(Nin, ov1));
	cross		$tmp314 Nin ___787_resultBumpRough.v1 	%line{178} %argrw{"wrr"}
	normalize	___787_resultBumpRough.v2 $tmp314 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:179
#     ov1 = normalize(cross(ov2, Nin));
	cross		$tmp315 ___787_resultBumpRough.v2 Nin 	%line{179} %argrw{"wrr"}
	normalize	___787_resultBumpRough.v1 $tmp315 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:435
#     Eout.n += Oover * e_over.n;
	mul		$tmp316 $tmp286 ___770_e_over.n 	%line{435} %argrw{"wrr"}
	add		___787_resultBumpRough.n ___787_resultBumpRough.n $tmp316 	%argrw{"wrr"}
	assign		___787_resultBumpRough.n ___787_resultBumpRough.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:438
#     Oout = Oover + (1.-Oover)*Ounder;
	sub		$tmp317 $const11 $tmp286 	%line{438} %argrw{"wrr"}
	mul		$tmp318 $tmp317 ___787_resultBumpRoughPresence 	%argrw{"wrr"}
	add		___787_resultBumpRoughPresence $tmp286 $tmp318 	%argrw{"wrr"}
# PxrBumpRoughness.osl:296
#                 for (int j = 0; j < numSamples; j++)
	assign		$tmp319 ___792_j 	%filename{"PxrBumpRoughness.osl"} %line{296} %argrw{"wr"}
	add		___792_j ___792_j $const3 	%argrw{"wrr"}
# PxrBumpRoughness.osl:318
#                 wvdenom += weight * weight * sqwaccum;
	mul		$tmp320 ___790_weight ___790_weight 	%line{318} %argrw{"wrr"}
	mul		$tmp321 $tmp320 ___787_sqwaccum 	%argrw{"wrr"}
	add		___787_wvdenom ___787_wvdenom $tmp321 	%argrw{"wrr"}
# PxrBumpRoughness.osl:283
#         for (int i = 0; i < numProj; i++)
	assign		$tmp322 ___789_i 	%line{283} %argrw{"wr"}
	add		___789_i ___789_i $const3 	%argrw{"wrr"}
# PxrBumpRoughness.osl:322
#         if (wvdenom > 0.0)
	gt		$tmp323 ___787_wvdenom $const17 	%line{322} %argrw{"wrr"}
	if		$tmp323 863 863 	%argrw{"r"}
# PxrBumpRoughness.osl:324
#             resultBumpRough.n = resultBumpRough.n / sqrt(wvdenom) + Nc;
	sqrt		$tmp324 ___787_wvdenom 	%line{324} %argrw{"wr"}
	div		$tmp325 ___787_resultBumpRough.n $tmp324 	%argrw{"wrr"}
	add		___787_resultBumpRough.n $tmp325 ___787_Nc 	%argrw{"wrr"}
	assign		___787_resultBumpRough.n ___787_resultBumpRough.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:326
#         resultBumpRough.n = normalize(resultBumpRough.n);
	normalize	___787_resultBumpRough.n ___787_resultBumpRough.n 	%line{326} %argrw{"wr"}
	assign		___787_resultBumpRough.n ___787_resultBumpRough.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:327
#         br = resultBumpRough;
	assign		br.l1 ___787_resultBumpRough.l1 	%line{327} %argrw{"wr"}
	assign		br.l2 ___787_resultBumpRough.l2 	%argrw{"wr"}
	assign		br.v1 ___787_resultBumpRough.v1 	%argrw{"wr"}
	assign		br.v2 ___787_resultBumpRough.v2 	%argrw{"wr"}
	assign		br.n ___787_resultBumpRough.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:331
#         if (textureRoughness > 0.0)
	gt		$tmp326 textureRoughness $const17 	%line{331} %argrw{"wrr"}
	if		$tmp326 1146 1146 	%argrw{"r"}
# PxrBumpRoughness.osl:333
#             textureRoughnessGain = estimateRoughnessGain(b2r_texture, inputS, inputT,
	functioncall	$const18 1146 	%line{333} %argrw{"r"}
# PxrBumpRoughness.osl:47
#     BumpRough textureBumpRough = NEUTRAL_BUMPROUGH;
	assign		___785_textureBumpRough.l1 $const8 	%line{47} %argrw{"wr"}
	assign		___785_textureBumpRough.l2 $const8 	%argrw{"wr"}
	assign		___785_textureBumpRough.v1 $const9 	%argrw{"wr"}
	assign		___785_textureBumpRough.v2 $const10 	%argrw{"wr"}
	assign		___785_textureBumpRough.n N 	%argrw{"wr"}
# PxrBumpRoughness.osl:48
#     vector vecD1 = 0, vecD2 = 0;
	assign		___785_vecD1 $const2 	%line{48} %argrw{"wr"}
	assign		___785_vecD2 $const2 	%argrw{"wr"}
# PxrBumpRoughness.osl:53
#                                         1e-04, floor(ss) + 0.5, floor(tt) + 0.5,
	floor		$tmp327 inputS 	%line{53} %argrw{"wr"}
	add		$tmp328 $tmp327 $const20 	%argrw{"wrr"}
	floor		$tmp329 inputT 	%argrw{"wr"}
	add		$tmp330 $tmp329 $const20 	%argrw{"wrr"}
# PxrBumpRoughness.osl:52
#     textureBumpRough = ReadBumpRough(b2r_texture,
	functioncall	$const23 1136 	%line{52} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:633
#     float baseRoughnessSqr = baseRoughness * baseRoughness;
	mul		___778_baseRoughnessSqr $const19 $const19 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{633} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:636
#     ComputeOrthonormalTangentSpace(Nin, dPds, dPdt, U, V, W);
	functioncall	$const24 897 	%line{636} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:518
#     normal PN = cross(dPds, dPdt);
	cross		___774_PN dPdu dPdv 	%line{518} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:523
#     int lefthanded = dot(PN, Ng) < 0;
	dot		$tmp331 ___774_PN Ng 	%line{523} %argrw{"wrr"}
	lt		___774_lefthanded $tmp331 $const2 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:524
#     normal N_ = lefthanded ? -Nin : Nin;
	if		___774_lefthanded 892 893 	%line{524} %argrw{"r"}
	neg		___774_N_ Nin 	%argrw{"wr"}
	assign		___774_N_ Nin 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:526
#     U = normalize(cross(dPdt, N_));
	cross		$tmp332 dPdv ___774_N_ 	%line{526} %argrw{"wrr"}
	normalize	___778_U $tmp332 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:527
#     V = cross(N_, U);
	cross		___778_V ___774_N_ ___778_U 	%line{527} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:528
#     W = Nin;
	assign		___778_W Nin 	%line{528} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:639
#     BumpRough result = {baseRoughnessSqr, baseRoughnessSqr, U, V, W};
	assign		___778_result.l1 ___778_baseRoughnessSqr 	%line{639} %argrw{"wr"}
	assign		___778_result.l2 ___778_baseRoughnessSqr 	%argrw{"wr"}
	assign		___778_result.v1 ___778_U 	%argrw{"wr"}
	assign		___778_result.v2 ___778_V 	%argrw{"wr"}
	assign		___778_result.n ___778_W 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:641
#     int validDs = ReadBumpRoughTextures(filenameD1D2, inputS, inputT,
	functioncall	$const25 1009 	%line{641} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:482
#     TxCoords coords = initTxCoords(inputS, inputT, 0);
	functioncall	$const26 925 	%line{482} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 911 912 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{102} %argrw{"r"}
	functioncall	$const12 911 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp333 $tmp330 	%line{48} %argrw{"wr"}
	add		$tmp334 $tmp333 $const11 	%argrw{"wrr"}
	floor		$tmp335 $tmp330 	%argrw{"wr"}
	sub		$tmp336 $tmp330 $tmp335 	%argrw{"wrr"}
	sub		___636__tt $tmp334 $tmp336 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt $tmp330 	%line{102} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:103
#     TxCoords coords = { ss, _tt, Dx(ss), Dx(_tt), Dy(ss), Dy(_tt) };
	assign		___636_coords.s $tmp328 	%line{103} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx $tmp328 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy $tmp328 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:104
#     return coords;
	assign		___773_coords.s ___636_coords.s 	%line{104} %argrw{"wr"}
	assign		___773_coords.t ___636_coords.t 	%argrw{"wr"}
	assign		___773_coords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___773_coords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___773_coords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___773_coords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:483
#     TxParams params = {0, textureBlur, color(0), 0.0, textureFilter, textureFilterScale};
	assign		___773_params.firstchannel $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{483} %argrw{"wr"}
	assign		___773_params.blur $const22 	%argrw{"wr"}
	assign		___773_params.missingcolor $const27 	%argrw{"wr"}
	assign		___773_params.missingalpha $const17 	%argrw{"wr"}
	assign		___773_params.interp $const21 	%argrw{"wr"}
	assign		___773_params.width $const22 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:488
#     d1 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 961 	%line{488} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     int success = 0;
	assign		___649_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{187} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:188
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{188} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{189} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:191
#     color result = texture(filename,
	texture		___649_result b2r_texture ___773_coords.s ___773_coords.t ___773_coords.dsdx ___773_coords.dtdx ___773_coords.dsdy ___773_coords.dtdy $const29 ___773_params.firstchannel $const30 ___773_params.blur $const31 ___773_params.missingcolor $const32 ___773_params.interp $const33 ___773_params.width 	%line{191} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:201
#     if (result == params.missingcolor) return result;
	eq		$tmp337 ___649_result ___773_params.missingcolor 	%line{201} %argrw{"wrr"}
	if		$tmp337 940 940 	%argrw{"r"}
	assign		___785_vecD1 ___649_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:204
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{204} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:207
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const34 ___649_nchannels 	%line{207} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#     if (success && nchannels)
	neq		$tmp338 ___649_success $const2 	%line{208} %argrw{"wrr"}
	if		$tmp338 946 946 	%argrw{"r"}
	neq		$tmp339 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp338 $tmp339 	%argrw{"wr"}
	if		$tmp338 960 960 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:210
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp340 ___649_nchannels $const3 	%line{210} %argrw{"wrr"}
	neq		$tmp341 $tmp340 $const2 	%argrw{"wrr"}
	if		$tmp341 950 953 	%argrw{"r"}
	eq		$tmp342 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp343 $tmp342 $const2 	%argrw{"wrr"}
	assign		$tmp341 $tmp343 	%argrw{"wr"}
	if		$tmp341 960 960 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[0] = result[0];
	compref		$tmp344 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp344 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:214
#             finalResult[1] = result[0];
	compref		$tmp345 ___649_result $const2 	%line{214} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp345 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:215
#             finalResult[2] = result[0];
	compref		$tmp346 ___649_result $const2 	%line{215} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp346 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:219
#     return finalResult;
	assign		___785_vecD1 ___649_finalResult 	%line{219} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:489
#     d1[2] = max(d1[0], d1[1]);
	compref		$tmp348 ___785_vecD1 $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{489} %argrw{"wrr"}
	compref		$tmp349 ___785_vecD1 $const3 	%argrw{"wrr"}
	max		$tmp347 $tmp348 $tmp349 	%argrw{"wrr"}
	compassign	___785_vecD1 $const4 $tmp347 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:491
#     params.firstchannel = 2;
	assign		___773_params.firstchannel $const4 	%line{491} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:492
#     d2 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 996 	%line{492} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     int success = 0;
	assign		___649_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{187} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:188
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{188} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{189} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:191
#     color result = texture(filename,
	texture		___649_result b2r_texture ___773_coords.s ___773_coords.t ___773_coords.dsdx ___773_coords.dtdx ___773_coords.dsdy ___773_coords.dtdy $const29 ___773_params.firstchannel $const30 ___773_params.blur $const31 ___773_params.missingcolor $const32 ___773_params.interp $const33 ___773_params.width 	%line{191} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:201
#     if (result == params.missingcolor) return result;
	eq		$tmp350 ___649_result ___773_params.missingcolor 	%line{201} %argrw{"wrr"}
	if		$tmp350 975 975 	%argrw{"r"}
	assign		___785_vecD2 ___649_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:204
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{204} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:207
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const34 ___649_nchannels 	%line{207} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#     if (success && nchannels)
	neq		$tmp351 ___649_success $const2 	%line{208} %argrw{"wrr"}
	if		$tmp351 981 981 	%argrw{"r"}
	neq		$tmp352 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp351 $tmp352 	%argrw{"wr"}
	if		$tmp351 995 995 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:210
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp353 ___649_nchannels $const3 	%line{210} %argrw{"wrr"}
	neq		$tmp354 $tmp353 $const2 	%argrw{"wrr"}
	if		$tmp354 985 988 	%argrw{"r"}
	eq		$tmp355 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp356 $tmp355 $const2 	%argrw{"wrr"}
	assign		$tmp354 $tmp356 	%argrw{"wr"}
	if		$tmp354 995 995 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[0] = result[0];
	compref		$tmp357 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp357 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:214
#             finalResult[1] = result[0];
	compref		$tmp358 ___649_result $const2 	%line{214} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp358 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:215
#             finalResult[2] = result[0];
	compref		$tmp359 ___649_result $const2 	%line{215} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp359 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:219
#     return finalResult;
	assign		___785_vecD2 ___649_finalResult 	%line{219} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	functioncall	$const35 1000 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{494} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp361 ___785_vecD1 ___785_vecD1 	%line{62} %argrw{"wrr"}
	ge		$tmp360 $tmp361 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp362 $tmp360 $const2 	%line{494} %argrw{"wrr"}
	if		$tmp362 1008 1008 	%argrw{"r"}
	functioncall	$const35 1006 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp364 ___785_vecD2 ___785_vecD2 	%line{62} %argrw{"wrr"}
	ge		$tmp363 $tmp364 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp365 $tmp363 $const2 	%line{494} %argrw{"wrr"}
	assign		$tmp362 $tmp365 	%argrw{"wr"}
	assign		___778_validDs $tmp362 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#     if (validDs)
	if		___778_validDs 1131 1131 	%line{644} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:648
#         if (invertBumpNormal == 0) {
	eq		$tmp366 $const2 $const2 	%line{648} %argrw{"wrr"}
	if		$tmp366 1018 1018 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:649
#             d1[0] = -d1[0];
	compref		$tmp367 ___785_vecD1 $const2 	%line{649} %argrw{"wrr"}
	neg		$tmp368 $tmp367 	%argrw{"wr"}
	compassign	___785_vecD1 $const2 $tmp368 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:650
#             d1[1] = -d1[1];
	compref		$tmp369 ___785_vecD1 $const3 	%line{650} %argrw{"wrr"}
	neg		$tmp370 $tmp369 	%argrw{"wr"}
	compassign	___785_vecD1 $const3 $tmp370 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	functioncall	$const37 1099 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:542
#     float dx = d1[0];
	compref		___775_dx ___785_vecD1 $const2 	%line{542} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:543
#     float dy = d1[1];
	compref		___775_dy ___785_vecD1 $const3 	%line{543} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:544
#     float dxdx = d2[0];
	compref		___775_dxdx ___785_vecD2 $const2 	%line{544} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:545
#     float dydy = d2[1];
	compref		___775_dydy ___785_vecD2 $const3 	%line{545} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:546
#     float dxdy = d2[2];
	compref		___775_dxdy ___785_vecD2 $const4 	%line{546} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:554
#     float sxx = 2.0 * (dxdx - dx*dx);
	mul		$tmp372 ___775_dx ___775_dx 	%line{554} %argrw{"wrr"}
	sub		$tmp373 ___775_dxdx $tmp372 	%argrw{"wrr"}
	mul		___775_sxx $const38 $tmp373 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:555
#     float sxy = 2.0 * (dxdy - dx*dy);
	mul		$tmp374 ___775_dx ___775_dy 	%line{555} %argrw{"wrr"}
	sub		$tmp375 ___775_dxdy $tmp374 	%argrw{"wrr"}
	mul		___775_sxy $const38 $tmp375 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:556
#     float syy = 2.0 * (dydy - dy*dy);
	mul		$tmp376 ___775_dy ___775_dy 	%line{556} %argrw{"wrr"}
	sub		$tmp377 ___775_dydy $tmp376 	%argrw{"wrr"}
	mul		___775_syy $const38 $tmp377 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:558
#     if (varianceGain != 1.0) {
	neq		$tmp378 $const11 $const11 	%line{558} %argrw{"wrr"}
	if		$tmp378 1039 1039 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:559
#         float varianceGainSqr = varianceGain * varianceGain;
	mul		___776_varianceGainSqr $const11 $const11 	%line{559} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:560
#         sxx *= varianceGainSqr;
	mul		___775_sxx ___775_sxx ___776_varianceGainSqr 	%line{560} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:561
#         sxy *= varianceGainSqr;
	mul		___775_sxy ___775_sxy ___776_varianceGainSqr 	%line{561} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:562
#         syy *= varianceGainSqr;
	mul		___775_syy ___775_syy ___776_varianceGainSqr 	%line{562} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:569
#     BumpRough_CovarToEigen2D(sxx, sxy, syy, l1, l2, v1, v2);
	functioncall	$const39 1064 	%line{569} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:219
#     float del = sqrt(a*a + 4.0*b*b - 2.0*a*c + c*c);
	mul		$tmp379 ___775_sxx ___775_sxx 	%line{219} %argrw{"wrr"}
	mul		$tmp380 $const40 ___775_sxy 	%argrw{"wrr"}
	mul		$tmp381 $tmp380 ___775_sxy 	%argrw{"wrr"}
	add		$tmp382 $tmp379 $tmp381 	%argrw{"wrr"}
	mul		$tmp383 $const38 ___775_sxx 	%argrw{"wrr"}
	mul		$tmp384 $tmp383 ___775_syy 	%argrw{"wrr"}
	sub		$tmp385 $tmp382 $tmp384 	%argrw{"wrr"}
	mul		$tmp386 ___775_syy ___775_syy 	%argrw{"wrr"}
	add		$tmp387 $tmp385 $tmp386 	%argrw{"wrr"}
	sqrt		___753_del $tmp387 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:222
#     l1 = 0.5 * (a + c + del);
	add		$tmp388 ___775_sxx ___775_syy 	%line{222} %argrw{"wrr"}
	add		$tmp389 $tmp388 ___753_del 	%argrw{"wrr"}
	mul		___775_l1 $const20 $tmp389 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:223
#     l2 = 0.5 * (a + c - del);
	add		$tmp390 ___775_sxx ___775_syy 	%line{223} %argrw{"wrr"}
	sub		$tmp391 $tmp390 ___753_del 	%argrw{"wrr"}
	mul		___775_l2 $const20 $tmp391 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:226
#     v1 = normalize(vector((l1 - c)/b, 1.0, 0.0));
	sub		$tmp393 ___775_l1 ___775_syy 	%line{226} %argrw{"wrr"}
	div		$tmp394 $tmp393 ___775_sxy 	%argrw{"wrr"}
	vector		$tmp392 $tmp394 $const11 $const17 	%argrw{"wrrr"}
	normalize	___775_v1 $tmp392 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:227
#     v2 = normalize(vector((l2 - c)/b, 1.0, 0.0));
	sub		$tmp396 ___775_l2 ___775_syy 	%line{227} %argrw{"wrr"}
	div		$tmp397 $tmp396 ___775_sxy 	%argrw{"wrr"}
	vector		$tmp395 $tmp397 $const11 $const17 	%argrw{"wrrr"}
	normalize	___775_v2 $tmp395 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:572
#     bumpRough.l1 = l1;
	assign		___778_result.l1 ___775_l1 	%line{572} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:573
#     bumpRough.l2 = l2;
	assign		___778_result.l2 ___775_l2 	%line{573} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     bumpRough.v1 = U * v1[0] + V * v1[1];
	compref		$tmp398 ___775_v1 $const2 	%line{578} %argrw{"wrr"}
	mul		$tmp399 ___778_U $tmp398 	%argrw{"wrr"}
	compref		$tmp400 ___775_v1 $const3 	%argrw{"wrr"}
	mul		$tmp401 ___778_V $tmp400 	%argrw{"wrr"}
	add		___778_result.v1 $tmp399 $tmp401 	%argrw{"wrr"}
	assign		___778_result.v1 ___778_result.v1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:579
#     bumpRough.v2 = U * v2[0] + V * v2[1];
	compref		$tmp402 ___775_v2 $const2 	%line{579} %argrw{"wrr"}
	mul		$tmp403 ___778_U $tmp402 	%argrw{"wrr"}
	compref		$tmp404 ___775_v2 $const3 	%argrw{"wrr"}
	mul		$tmp405 ___778_V $tmp404 	%argrw{"wrr"}
	add		___778_result.v2 $tmp403 $tmp405 	%argrw{"wrr"}
	assign		___778_result.v2 ___778_result.v2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	mul		$tmp406 $const11 ___775_dx 	%line{582} %argrw{"wrr"}
	mul		$tmp407 $tmp406 ___778_U 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	mul		$tmp408 $const11 ___775_dy 	%line{583} %argrw{"wrr"}
	mul		$tmp409 $tmp408 ___778_V 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	add		$tmp410 $tmp407 $tmp409 	%line{582} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	add		$tmp411 $tmp410 ___778_W 	%line{583} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	normalize	___778_result.n $tmp411 	%line{582} %argrw{"wr"}
	assign		___778_result.n ___778_result.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	functioncall	$const35 1090 	%line{586} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp413 ___778_result.v1 ___778_result.v1 	%line{62} %argrw{"wrr"}
	ge		$tmp412 $tmp413 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp414 $tmp412 $const2 	%line{586} %argrw{"wrr"}
	if		$tmp414 1098 1098 	%argrw{"r"}
	functioncall	$const35 1096 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp416 ___778_result.v2 ___778_result.v2 	%line{62} %argrw{"wrr"}
	ge		$tmp415 $tmp416 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp417 $tmp415 $const2 	%line{586} %argrw{"wrr"}
	assign		$tmp414 $tmp417 	%argrw{"wr"}
	assign		$tmp371 $tmp414 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	if		$tmp371 1131 1131 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:659
#             result.l1 += baseRoughnessSqr;
	add		___778_result.l1 ___778_result.l1 ___778_baseRoughnessSqr 	%line{659} %argrw{"wrr"}
	assign		___778_result.l1 ___778_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:660
#             result.l2 += baseRoughnessSqr;
	add		___778_result.l2 ___778_result.l2 ___778_baseRoughnessSqr 	%line{660} %argrw{"wrr"}
	assign		___778_result.l2 ___778_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:662
#             if (anisotropyGain != 1.0) {
	neq		$tmp418 $const11 $const11 	%line{662} %argrw{"wrr"}
	if		$tmp418 1131 1131 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:663
#                 BumpRoughAnisotropyAdjust(anisotropyGain, result);
	functioncall	$const41 1131 	%line{663} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:596
#     float eps = 1.e-12;
	assign		___777_eps $const42 	%line{596} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:597
#     float roughnessU = sqrt(bumpRough.l1) + eps;
	sqrt		$tmp419 ___778_result.l1 	%line{597} %argrw{"wr"}
	add		___777_roughnessU $tmp419 ___777_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:598
#     float roughnessV = sqrt(bumpRough.l2) + eps;
	sqrt		$tmp420 ___778_result.l2 	%line{598} %argrw{"wr"}
	add		___777_roughnessV $tmp420 ___777_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:600
#     float ratio = roughnessU / roughnessV;
	div		___777_ratio ___777_roughnessU ___777_roughnessV 	%line{600} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:601
#     float anisotropy = (ratio - 1.0) / (ratio + 1.0);
	sub		$tmp421 ___777_ratio $const11 	%line{601} %argrw{"wrr"}
	add		$tmp422 ___777_ratio $const11 	%argrw{"wrr"}
	div		___777_anisotropy $tmp421 $tmp422 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:603
#     anisotropy = clamp(anisotropy * anisotropyGain, 0.0, 1.0);
	mul		$tmp423 ___777_anisotropy $const11 	%line{603} %argrw{"wrr"}
	functioncall	$const43 1120 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxMonterey_x86-64_clang14_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp424 $tmp423 $const11 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxMonterey_x86-64_clang14_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		___777_anisotropy $tmp424 $const17 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:605
#     float alpha = 1.0 / (anisotropy*anisotropy - 2.0 * anisotropy + 2.0);
	mul		$tmp425 ___777_anisotropy ___777_anisotropy 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{605} %argrw{"wrr"}
	mul		$tmp426 $const38 ___777_anisotropy 	%argrw{"wrr"}
	sub		$tmp427 $tmp425 $tmp426 	%argrw{"wrr"}
	add		$tmp428 $tmp427 $const38 	%argrw{"wrr"}
	div		___777_alpha $const11 $tmp428 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:607
#     float variance = bumpRough.l1 + bumpRough.l2;
	add		___777_variance ___778_result.l1 ___778_result.l2 	%line{607} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:609
#     bumpRough.l1 = variance * alpha;
	mul		___778_result.l1 ___777_variance ___777_alpha 	%line{609} %argrw{"wrr"}
	assign		___778_result.l1 ___778_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:610
#     bumpRough.l2 = variance * (1.0 - alpha);
	sub		$tmp429 $const11 ___777_alpha 	%line{610} %argrw{"wrr"}
	mul		___778_result.l2 ___777_variance $tmp429 	%argrw{"wrr"}
	assign		___778_result.l2 ___778_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:668
#     return result;
	assign		___785_textureBumpRough.l1 ___778_result.l1 	%line{668} %argrw{"wr"}
	assign		___785_textureBumpRough.l2 ___778_result.l2 	%argrw{"wr"}
	assign		___785_textureBumpRough.v1 ___778_result.v1 	%argrw{"wr"}
	assign		___785_textureBumpRough.v2 ___778_result.v2 	%argrw{"wr"}
	assign		___785_textureBumpRough.n ___778_result.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:58
#     float textureRoughnessU = sqrt(textureBumpRough.l1);
	sqrt		___785_textureRoughnessU ___785_textureBumpRough.l1 	%filename{"PxrBumpRoughness.osl"} %line{58} %argrw{"wr"}
# PxrBumpRoughness.osl:59
#     float textureRoughnessV = sqrt(textureBumpRough.l2);
	sqrt		___785_textureRoughnessV ___785_textureBumpRough.l2 	%line{59} %argrw{"wr"}
# PxrBumpRoughness.osl:60
#     float rudivrv = textureRoughnessU/textureRoughnessV;
	div		___785_rudivrv ___785_textureRoughnessU ___785_textureRoughnessV 	%line{60} %argrw{"wrr"}
# PxrBumpRoughness.osl:62
#     float textureAnisotropy = (rudivrv-1.0)/(rudivrv+1.0);
	sub		$tmp430 ___785_rudivrv $const11 	%line{62} %argrw{"wrr"}
	add		$tmp431 ___785_rudivrv $const11 	%argrw{"wrr"}
	div		___785_textureAnisotropy $tmp430 $tmp431 	%argrw{"wrr"}
# PxrBumpRoughness.osl:63
#     float textureRoughnessGain = textureRoughness / (textureRoughnessU / (1 + textureAnisotropy));
	add		$tmp432 $const11 ___785_textureAnisotropy 	%line{63} %argrw{"wrr"}
	div		$tmp433 ___785_textureRoughnessU $tmp432 	%argrw{"wrr"}
	div		___785_textureRoughnessGain textureRoughness $tmp433 	%argrw{"wrr"}
# PxrBumpRoughness.osl:68
#     return textureRoughnessGain;
	assign		textureRoughnessGain ___785_textureRoughnessGain 	%line{68} %argrw{"wr"}
# PxrBumpRoughness.osl:336
#         if (BumpRough_PartialDeriv(Pos, inputS, inputT, dPds, dPdt))
	functioncall	$const46 1178 	%line{336} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:192
#     vector dQdx = Dx(Q);
	Dx		___752_dQdx Pos 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{192} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:193
#     vector dQdy = Dy(Q);
	Dy		___752_dQdy Pos 	%line{193} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:195
#     float A = Dx(a);
	Dx		___752_A inputS 	%line{195} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:196
#     float B = Dx(b);
	Dx		___752_B inputT 	%line{196} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:197
#     float C = Dy(a);
	Dy		___752_C inputS 	%line{197} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:198
#     float D = Dy(b);
	Dy		___752_D inputT 	%line{198} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:200
#     float invdet = 1./(A*D - B*C);
	mul		$tmp435 ___752_A ___752_D 	%line{200} %argrw{"wrr"}
	mul		$tmp436 ___752_B ___752_C 	%argrw{"wrr"}
	sub		$tmp437 $tmp435 $tmp436 	%argrw{"wrr"}
	div		___752_invdet $const11 $tmp437 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:202
#     dQda = (dQdx*D-dQdy*B)*invdet;
	mul		$tmp438 ___752_dQdx ___752_D 	%line{202} %argrw{"wrr"}
	mul		$tmp439 ___752_dQdy ___752_B 	%argrw{"wrr"}
	sub		$tmp440 $tmp438 $tmp439 	%argrw{"wrr"}
	mul		dPds $tmp440 ___752_invdet 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:203
#     dQdb = (dQdy*A-dQdx*C)*invdet;
	mul		$tmp441 ___752_dQdy ___752_A 	%line{203} %argrw{"wrr"}
	mul		$tmp442 ___752_dQdx ___752_C 	%argrw{"wrr"}
	sub		$tmp443 $tmp441 $tmp442 	%argrw{"wrr"}
	mul		dPdt $tmp443 ___752_invdet 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	functioncall	$const35 1169 	%line{205} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp445 dPds dPds 	%line{62} %argrw{"wrr"}
	ge		$tmp444 $tmp445 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	neq		$tmp446 $tmp444 $const2 	%line{205} %argrw{"wrr"}
	if		$tmp446 1177 1177 	%argrw{"r"}
	functioncall	$const35 1175 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp448 dPdt dPdt 	%line{62} %argrw{"wrr"}
	ge		$tmp447 $tmp448 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	neq		$tmp449 $tmp447 $const2 	%line{205} %argrw{"wrr"}
	assign		$tmp446 $tmp449 	%argrw{"wr"}
	assign		$tmp434 $tmp446 	%argrw{"wr"}
# PxrBumpRoughness.osl:336
#         if (BumpRough_PartialDeriv(Pos, inputS, inputT, dPds, dPdt))
	if		$tmp434 1431 1431 	%filename{"PxrBumpRoughness.osl"} %line{336} %argrw{"r"}
# PxrBumpRoughness.osl:338
#             br = ReadBumpRough(b2r_texture,
	functioncall	$const23 1431 	%line{338} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:633
#     float baseRoughnessSqr = baseRoughness * baseRoughness;
	mul		___778_baseRoughnessSqr baseRoughness baseRoughness 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{633} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:636
#     ComputeOrthonormalTangentSpace(Nin, dPds, dPdt, U, V, W);
	functioncall	$const24 1192 	%line{636} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:518
#     normal PN = cross(dPds, dPdt);
	cross		___774_PN dPds dPdt 	%line{518} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:523
#     int lefthanded = dot(PN, Ng) < 0;
	dot		$tmp450 ___774_PN Ng 	%line{523} %argrw{"wrr"}
	lt		___774_lefthanded $tmp450 $const2 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:524
#     normal N_ = lefthanded ? -Nin : Nin;
	if		___774_lefthanded 1187 1188 	%line{524} %argrw{"r"}
	neg		___774_N_ Nin 	%argrw{"wr"}
	assign		___774_N_ Nin 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:526
#     U = normalize(cross(dPdt, N_));
	cross		$tmp451 dPdt ___774_N_ 	%line{526} %argrw{"wrr"}
	normalize	___778_U $tmp451 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:527
#     V = cross(N_, U);
	cross		___778_V ___774_N_ ___778_U 	%line{527} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:528
#     W = Nin;
	assign		___778_W Nin 	%line{528} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:639
#     BumpRough result = {baseRoughnessSqr, baseRoughnessSqr, U, V, W};
	assign		___778_result.l1 ___778_baseRoughnessSqr 	%line{639} %argrw{"wr"}
	assign		___778_result.l2 ___778_baseRoughnessSqr 	%argrw{"wr"}
	assign		___778_result.v1 ___778_U 	%argrw{"wr"}
	assign		___778_result.v2 ___778_V 	%argrw{"wr"}
	assign		___778_result.n ___778_W 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:641
#     int validDs = ReadBumpRoughTextures(filenameD1D2, inputS, inputT,
	functioncall	$const25 1304 	%line{641} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:482
#     TxCoords coords = initTxCoords(inputS, inputT, 0);
	functioncall	$const26 1220 	%line{482} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 1206 1207 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{102} %argrw{"r"}
	functioncall	$const12 1206 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp452 inputT 	%line{48} %argrw{"wr"}
	add		$tmp453 $tmp452 $const11 	%argrw{"wrr"}
	floor		$tmp454 inputT 	%argrw{"wr"}
	sub		$tmp455 inputT $tmp454 	%argrw{"wrr"}
	sub		___636__tt $tmp453 $tmp455 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:102
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___636__tt inputT 	%line{102} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:103
#     TxCoords coords = { ss, _tt, Dx(ss), Dx(_tt), Dy(ss), Dy(_tt) };
	assign		___636_coords.s inputS 	%line{103} %argrw{"wr"}
	assign		___636_coords.t ___636__tt 	%argrw{"wr"}
	Dx		___636_coords.dsdx inputS 	%argrw{"wr"} %argderivs{1}
	Dx		___636_coords.dtdx ___636__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dsdy inputS 	%argrw{"wr"} %argderivs{1}
	Dy		___636_coords.dtdy ___636__tt 	%argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:104
#     return coords;
	assign		___773_coords.s ___636_coords.s 	%line{104} %argrw{"wr"}
	assign		___773_coords.t ___636_coords.t 	%argrw{"wr"}
	assign		___773_coords.dsdx ___636_coords.dsdx 	%argrw{"wr"}
	assign		___773_coords.dtdx ___636_coords.dtdx 	%argrw{"wr"}
	assign		___773_coords.dsdy ___636_coords.dsdy 	%argrw{"wr"}
	assign		___773_coords.dtdy ___636_coords.dtdy 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:483
#     TxParams params = {0, textureBlur, color(0), 0.0, textureFilter, textureFilterScale};
	assign		___773_params.firstchannel $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{483} %argrw{"wr"}
	assign		___773_params.blur blur 	%argrw{"wr"}
	assign		___773_params.missingcolor $const27 	%argrw{"wr"}
	assign		___773_params.missingalpha $const17 	%argrw{"wr"}
	assign		___773_params.interp filter 	%argrw{"wr"}
	assign		___773_params.width filterScale 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:488
#     d1 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 1256 	%line{488} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     int success = 0;
	assign		___649_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{187} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:188
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{188} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{189} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:191
#     color result = texture(filename,
	texture		___649_result b2r_texture ___773_coords.s ___773_coords.t ___773_coords.dsdx ___773_coords.dtdx ___773_coords.dsdy ___773_coords.dtdy $const29 ___773_params.firstchannel $const30 ___773_params.blur $const31 ___773_params.missingcolor $const32 ___773_params.interp $const33 ___773_params.width 	%line{191} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:201
#     if (result == params.missingcolor) return result;
	eq		$tmp456 ___649_result ___773_params.missingcolor 	%line{201} %argrw{"wrr"}
	if		$tmp456 1235 1235 	%argrw{"r"}
	assign		vecD1 ___649_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:204
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{204} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:207
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const34 ___649_nchannels 	%line{207} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#     if (success && nchannels)
	neq		$tmp457 ___649_success $const2 	%line{208} %argrw{"wrr"}
	if		$tmp457 1241 1241 	%argrw{"r"}
	neq		$tmp458 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp457 $tmp458 	%argrw{"wr"}
	if		$tmp457 1255 1255 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:210
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp459 ___649_nchannels $const3 	%line{210} %argrw{"wrr"}
	neq		$tmp460 $tmp459 $const2 	%argrw{"wrr"}
	if		$tmp460 1245 1248 	%argrw{"r"}
	eq		$tmp461 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp462 $tmp461 $const2 	%argrw{"wrr"}
	assign		$tmp460 $tmp462 	%argrw{"wr"}
	if		$tmp460 1255 1255 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[0] = result[0];
	compref		$tmp463 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp463 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:214
#             finalResult[1] = result[0];
	compref		$tmp464 ___649_result $const2 	%line{214} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp464 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:215
#             finalResult[2] = result[0];
	compref		$tmp465 ___649_result $const2 	%line{215} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp465 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:219
#     return finalResult;
	assign		vecD1 ___649_finalResult 	%line{219} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:489
#     d1[2] = max(d1[0], d1[1]);
	compref		$tmp467 vecD1 $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{489} %argrw{"wrr"}
	compref		$tmp468 vecD1 $const3 	%argrw{"wrr"}
	max		$tmp466 $tmp467 $tmp468 	%argrw{"wrr"}
	compassign	vecD1 $const4 $tmp466 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:491
#     params.firstchannel = 2;
	assign		___773_params.firstchannel $const4 	%line{491} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:492
#     d2 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 1291 	%line{492} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#     int success = 0;
	assign		___649_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{187} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:188
#     int nchannels = 0;
	assign		___649_nchannels $const2 	%line{188} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:189
#     color finalResult = 0;
	assign		___649_finalResult $const2 	%line{189} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:191
#     color result = texture(filename,
	texture		___649_result b2r_texture ___773_coords.s ___773_coords.t ___773_coords.dsdx ___773_coords.dtdx ___773_coords.dsdy ___773_coords.dtdy $const29 ___773_params.firstchannel $const30 ___773_params.blur $const31 ___773_params.missingcolor $const32 ___773_params.interp $const33 ___773_params.width 	%line{191} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:201
#     if (result == params.missingcolor) return result;
	eq		$tmp469 ___649_result ___773_params.missingcolor 	%line{201} %argrw{"wrr"}
	if		$tmp469 1270 1270 	%argrw{"r"}
	assign		vecD2 ___649_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:204
#     finalResult = result;
	assign		___649_finalResult ___649_result 	%line{204} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:207
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___649_success b2r_texture $const34 ___649_nchannels 	%line{207} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:208
#     if (success && nchannels)
	neq		$tmp470 ___649_success $const2 	%line{208} %argrw{"wrr"}
	if		$tmp470 1276 1276 	%argrw{"r"}
	neq		$tmp471 ___649_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp470 $tmp471 	%argrw{"wr"}
	if		$tmp470 1290 1290 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:210
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp472 ___649_nchannels $const3 	%line{210} %argrw{"wrr"}
	neq		$tmp473 $tmp472 $const2 	%argrw{"wrr"}
	if		$tmp473 1280 1283 	%argrw{"r"}
	eq		$tmp474 ___649_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp475 $tmp474 $const2 	%argrw{"wrr"}
	assign		$tmp473 $tmp475 	%argrw{"wr"}
	if		$tmp473 1290 1290 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:213
#             finalResult[0] = result[0];
	compref		$tmp476 ___649_result $const2 	%line{213} %argrw{"wrr"}
	compassign	___649_finalResult $const2 $tmp476 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:214
#             finalResult[1] = result[0];
	compref		$tmp477 ___649_result $const2 	%line{214} %argrw{"wrr"}
	compassign	___649_finalResult $const3 $tmp477 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:215
#             finalResult[2] = result[0];
	compref		$tmp478 ___649_result $const2 	%line{215} %argrw{"wrr"}
	compassign	___649_finalResult $const4 $tmp478 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:219
#     return finalResult;
	assign		vecD2 ___649_finalResult 	%line{219} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	functioncall	$const35 1295 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{494} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp480 vecD1 vecD1 	%line{62} %argrw{"wrr"}
	ge		$tmp479 $tmp480 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp481 $tmp479 $const2 	%line{494} %argrw{"wrr"}
	if		$tmp481 1303 1303 	%argrw{"r"}
	functioncall	$const35 1301 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp483 vecD2 vecD2 	%line{62} %argrw{"wrr"}
	ge		$tmp482 $tmp483 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp484 $tmp482 $const2 	%line{494} %argrw{"wrr"}
	assign		$tmp481 $tmp484 	%argrw{"wr"}
	assign		___778_validDs $tmp481 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#     if (validDs)
	if		___778_validDs 1426 1426 	%line{644} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:648
#         if (invertBumpNormal == 0) {
	eq		$tmp485 invertBumpNormal $const2 	%line{648} %argrw{"wrr"}
	if		$tmp485 1313 1313 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:649
#             d1[0] = -d1[0];
	compref		$tmp486 vecD1 $const2 	%line{649} %argrw{"wrr"}
	neg		$tmp487 $tmp486 	%argrw{"wr"}
	compassign	vecD1 $const2 $tmp487 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:650
#             d1[1] = -d1[1];
	compref		$tmp488 vecD1 $const3 	%line{650} %argrw{"wrr"}
	neg		$tmp489 $tmp488 	%argrw{"wr"}
	compassign	vecD1 $const3 $tmp489 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	functioncall	$const37 1394 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:542
#     float dx = d1[0];
	compref		___775_dx vecD1 $const2 	%line{542} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:543
#     float dy = d1[1];
	compref		___775_dy vecD1 $const3 	%line{543} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:544
#     float dxdx = d2[0];
	compref		___775_dxdx vecD2 $const2 	%line{544} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:545
#     float dydy = d2[1];
	compref		___775_dydy vecD2 $const3 	%line{545} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:546
#     float dxdy = d2[2];
	compref		___775_dxdy vecD2 $const4 	%line{546} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:554
#     float sxx = 2.0 * (dxdx - dx*dx);
	mul		$tmp491 ___775_dx ___775_dx 	%line{554} %argrw{"wrr"}
	sub		$tmp492 ___775_dxdx $tmp491 	%argrw{"wrr"}
	mul		___775_sxx $const38 $tmp492 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:555
#     float sxy = 2.0 * (dxdy - dx*dy);
	mul		$tmp493 ___775_dx ___775_dy 	%line{555} %argrw{"wrr"}
	sub		$tmp494 ___775_dxdy $tmp493 	%argrw{"wrr"}
	mul		___775_sxy $const38 $tmp494 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:556
#     float syy = 2.0 * (dydy - dy*dy);
	mul		$tmp495 ___775_dy ___775_dy 	%line{556} %argrw{"wrr"}
	sub		$tmp496 ___775_dydy $tmp495 	%argrw{"wrr"}
	mul		___775_syy $const38 $tmp496 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:558
#     if (varianceGain != 1.0) {
	neq		$tmp497 _gainRw $const11 	%line{558} %argrw{"wrr"}
	if		$tmp497 1334 1334 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:559
#         float varianceGainSqr = varianceGain * varianceGain;
	mul		___776_varianceGainSqr _gainRw _gainRw 	%line{559} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:560
#         sxx *= varianceGainSqr;
	mul		___775_sxx ___775_sxx ___776_varianceGainSqr 	%line{560} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:561
#         sxy *= varianceGainSqr;
	mul		___775_sxy ___775_sxy ___776_varianceGainSqr 	%line{561} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:562
#         syy *= varianceGainSqr;
	mul		___775_syy ___775_syy ___776_varianceGainSqr 	%line{562} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:569
#     BumpRough_CovarToEigen2D(sxx, sxy, syy, l1, l2, v1, v2);
	functioncall	$const39 1359 	%line{569} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:219
#     float del = sqrt(a*a + 4.0*b*b - 2.0*a*c + c*c);
	mul		$tmp498 ___775_sxx ___775_sxx 	%line{219} %argrw{"wrr"}
	mul		$tmp499 $const40 ___775_sxy 	%argrw{"wrr"}
	mul		$tmp500 $tmp499 ___775_sxy 	%argrw{"wrr"}
	add		$tmp501 $tmp498 $tmp500 	%argrw{"wrr"}
	mul		$tmp502 $const38 ___775_sxx 	%argrw{"wrr"}
	mul		$tmp503 $tmp502 ___775_syy 	%argrw{"wrr"}
	sub		$tmp504 $tmp501 $tmp503 	%argrw{"wrr"}
	mul		$tmp505 ___775_syy ___775_syy 	%argrw{"wrr"}
	add		$tmp506 $tmp504 $tmp505 	%argrw{"wrr"}
	sqrt		___753_del $tmp506 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:222
#     l1 = 0.5 * (a + c + del);
	add		$tmp507 ___775_sxx ___775_syy 	%line{222} %argrw{"wrr"}
	add		$tmp508 $tmp507 ___753_del 	%argrw{"wrr"}
	mul		___775_l1 $const20 $tmp508 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:223
#     l2 = 0.5 * (a + c - del);
	add		$tmp509 ___775_sxx ___775_syy 	%line{223} %argrw{"wrr"}
	sub		$tmp510 $tmp509 ___753_del 	%argrw{"wrr"}
	mul		___775_l2 $const20 $tmp510 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:226
#     v1 = normalize(vector((l1 - c)/b, 1.0, 0.0));
	sub		$tmp512 ___775_l1 ___775_syy 	%line{226} %argrw{"wrr"}
	div		$tmp513 $tmp512 ___775_sxy 	%argrw{"wrr"}
	vector		$tmp511 $tmp513 $const11 $const17 	%argrw{"wrrr"}
	normalize	___775_v1 $tmp511 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:227
#     v2 = normalize(vector((l2 - c)/b, 1.0, 0.0));
	sub		$tmp515 ___775_l2 ___775_syy 	%line{227} %argrw{"wrr"}
	div		$tmp516 $tmp515 ___775_sxy 	%argrw{"wrr"}
	vector		$tmp514 $tmp516 $const11 $const17 	%argrw{"wrrr"}
	normalize	___775_v2 $tmp514 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:572
#     bumpRough.l1 = l1;
	assign		___778_result.l1 ___775_l1 	%line{572} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:573
#     bumpRough.l2 = l2;
	assign		___778_result.l2 ___775_l2 	%line{573} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     bumpRough.v1 = U * v1[0] + V * v1[1];
	compref		$tmp517 ___775_v1 $const2 	%line{578} %argrw{"wrr"}
	mul		$tmp518 ___778_U $tmp517 	%argrw{"wrr"}
	compref		$tmp519 ___775_v1 $const3 	%argrw{"wrr"}
	mul		$tmp520 ___778_V $tmp519 	%argrw{"wrr"}
	add		___778_result.v1 $tmp518 $tmp520 	%argrw{"wrr"}
	assign		___778_result.v1 ___778_result.v1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:579
#     bumpRough.v2 = U * v2[0] + V * v2[1];
	compref		$tmp521 ___775_v2 $const2 	%line{579} %argrw{"wrr"}
	mul		$tmp522 ___778_U $tmp521 	%argrw{"wrr"}
	compref		$tmp523 ___775_v2 $const3 	%argrw{"wrr"}
	mul		$tmp524 ___778_V $tmp523 	%argrw{"wrr"}
	add		___778_result.v2 $tmp522 $tmp524 	%argrw{"wrr"}
	assign		___778_result.v2 ___778_result.v2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	mul		$tmp525 _bumpNormalGainRw ___775_dx 	%line{582} %argrw{"wrr"}
	mul		$tmp526 $tmp525 ___778_U 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	mul		$tmp527 _bumpNormalGainRw ___775_dy 	%line{583} %argrw{"wrr"}
	mul		$tmp528 $tmp527 ___778_V 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	add		$tmp529 $tmp526 $tmp528 	%line{582} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	add		$tmp530 $tmp529 ___778_W 	%line{583} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	normalize	___778_result.n $tmp530 	%line{582} %argrw{"wr"}
	assign		___778_result.n ___778_result.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	functioncall	$const35 1385 	%line{586} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp532 ___778_result.v1 ___778_result.v1 	%line{62} %argrw{"wrr"}
	ge		$tmp531 $tmp532 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp533 $tmp531 $const2 	%line{586} %argrw{"wrr"}
	if		$tmp533 1393 1393 	%argrw{"r"}
	functioncall	$const35 1391 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___736_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp535 ___778_result.v2 ___778_result.v2 	%line{62} %argrw{"wrr"}
	ge		$tmp534 $tmp535 ___736_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp536 $tmp534 $const2 	%line{586} %argrw{"wrr"}
	assign		$tmp533 $tmp536 	%argrw{"wr"}
	assign		$tmp490 $tmp533 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	if		$tmp490 1426 1426 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:659
#             result.l1 += baseRoughnessSqr;
	add		___778_result.l1 ___778_result.l1 ___778_baseRoughnessSqr 	%line{659} %argrw{"wrr"}
	assign		___778_result.l1 ___778_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:660
#             result.l2 += baseRoughnessSqr;
	add		___778_result.l2 ___778_result.l2 ___778_baseRoughnessSqr 	%line{660} %argrw{"wrr"}
	assign		___778_result.l2 ___778_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:662
#             if (anisotropyGain != 1.0) {
	neq		$tmp537 anisotropyGain $const11 	%line{662} %argrw{"wrr"}
	if		$tmp537 1426 1426 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:663
#                 BumpRoughAnisotropyAdjust(anisotropyGain, result);
	functioncall	$const41 1426 	%line{663} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:596
#     float eps = 1.e-12;
	assign		___777_eps $const42 	%line{596} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:597
#     float roughnessU = sqrt(bumpRough.l1) + eps;
	sqrt		$tmp538 ___778_result.l1 	%line{597} %argrw{"wr"}
	add		___777_roughnessU $tmp538 ___777_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:598
#     float roughnessV = sqrt(bumpRough.l2) + eps;
	sqrt		$tmp539 ___778_result.l2 	%line{598} %argrw{"wr"}
	add		___777_roughnessV $tmp539 ___777_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:600
#     float ratio = roughnessU / roughnessV;
	div		___777_ratio ___777_roughnessU ___777_roughnessV 	%line{600} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:601
#     float anisotropy = (ratio - 1.0) / (ratio + 1.0);
	sub		$tmp540 ___777_ratio $const11 	%line{601} %argrw{"wrr"}
	add		$tmp541 ___777_ratio $const11 	%argrw{"wrr"}
	div		___777_anisotropy $tmp540 $tmp541 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:603
#     anisotropy = clamp(anisotropy * anisotropyGain, 0.0, 1.0);
	mul		$tmp542 ___777_anisotropy anisotropyGain 	%line{603} %argrw{"wrr"}
	functioncall	$const43 1415 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxMonterey_x86-64_clang14_external_release/include/shaders/stdosl.h:163
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp543 $tmp542 $const11 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxMonterey_x86-64_clang14_external_release/include/shaders/stdosl.h"} %line{163} %argrw{"wrr"}
	max		___777_anisotropy $tmp543 $const17 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:605
#     float alpha = 1.0 / (anisotropy*anisotropy - 2.0 * anisotropy + 2.0);
	mul		$tmp544 ___777_anisotropy ___777_anisotropy 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{605} %argrw{"wrr"}
	mul		$tmp545 $const38 ___777_anisotropy 	%argrw{"wrr"}
	sub		$tmp546 $tmp544 $tmp545 	%argrw{"wrr"}
	add		$tmp547 $tmp546 $const38 	%argrw{"wrr"}
	div		___777_alpha $const11 $tmp547 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:607
#     float variance = bumpRough.l1 + bumpRough.l2;
	add		___777_variance ___778_result.l1 ___778_result.l2 	%line{607} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:609
#     bumpRough.l1 = variance * alpha;
	mul		___778_result.l1 ___777_variance ___777_alpha 	%line{609} %argrw{"wrr"}
	assign		___778_result.l1 ___778_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:610
#     bumpRough.l2 = variance * (1.0 - alpha);
	sub		$tmp548 $const11 ___777_alpha 	%line{610} %argrw{"wrr"}
	mul		___778_result.l2 ___777_variance $tmp548 	%argrw{"wrr"}
	assign		___778_result.l2 ___778_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:668
#     return result;
	assign		br.l1 ___778_result.l1 	%line{668} %argrw{"wr"}
	assign		br.l2 ___778_result.l2 	%argrw{"wr"}
	assign		br.v1 ___778_result.v1 	%argrw{"wr"}
	assign		br.v2 ___778_result.v2 	%argrw{"wr"}
	assign		br.n ___778_result.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:346
#     bumpRoughComponents(br, resultRoughness, resultAnisotropy,
	functioncall	$const56 1442 	%filename{"PxrBumpRoughness.osl"} %line{346} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:677
#     float resultRoughnessU = sqrt(br.l1);
	sqrt		___783_resultRoughnessU br.l1 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{677} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:678
#     float resultRoughnessV = sqrt(br.l2);
	sqrt		___783_resultRoughnessV br.l2 	%line{678} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:679
#     float rudivrv = resultRoughnessU/resultRoughnessV;
	div		___783_rudivrv ___783_resultRoughnessU ___783_resultRoughnessV 	%line{679} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:681
#     roughness = resultRoughnessU / (1.0 + anisotropy);
	add		$tmp549 $const11 resultAnisotropy 	%line{681} %argrw{"wrr"}
	div		resultRoughness ___783_resultRoughnessU $tmp549 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:682
#     anisotropy = (rudivrv - 1.0) / (rudivrv + 1.0);
	sub		$tmp550 ___783_rudivrv $const11 	%line{682} %argrw{"wrr"}
	add		$tmp551 ___783_rudivrv $const11 	%argrw{"wrr"}
	div		resultAnisotropy $tmp550 $tmp551 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:683
#     anisotropyDirection = br.v1;
	assign		resultAnisotropyDirection br.v1 	%line{683} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:684
#     bumpN = normalize(br.n);
	normalize	resultN br.n 	%line{684} %argrw{"wr"}
# PxrBumpRoughness.osl:350
#     vector Vn = normalize(-I);
	neg		$tmp552 I 	%filename{"PxrBumpRoughness.osl"} %line{350} %argrw{"wr"}
	normalize	Vn $tmp552 	%argrw{"wr"}
# PxrBumpRoughness.osl:351
#     RixAdjustNormal(adjustAmount, Vn, Ng, resultN);
	functioncall	$const57 1459 	%line{351} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:198
#     if (amount == 0) return;
	eq		$tmp553 adjustAmount $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{198} %argrw{"wrr"}
	if		$tmp553 1448 1448 	%argrw{"r"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:200
#     if (dot(Vn, Ngn) >= 0)
	dot		$tmp554 Vn Ng 	%line{200} %argrw{"wrr"}
	ge		$tmp555 $tmp554 $const2 	%argrw{"wrr"}
	if		$tmp555 1459 1459 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:202
#         float VdotN = dot(Vn, Nn);
	dot		___699_VdotN Vn resultN 	%line{202} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:203
#         if (VdotN <= 0)
	le		$tmp556 ___699_VdotN $const2 	%line{203} %argrw{"wrr"}
	if		$tmp556 1459 1459 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:207
#             Nn -= amount * 1.01 * VdotN * Vn;
	mul		$tmp557 adjustAmount $const58 	%line{207} %argrw{"wrr"}
	mul		$tmp558 $tmp557 ___699_VdotN 	%argrw{"wrr"}
	mul		$tmp559 $tmp558 Vn 	%argrw{"wrr"}
	sub		resultN resultN $tmp559 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:208
#             Nn = normalize(Nn);
	normalize	resultN resultN 	%line{208} %argrw{"wr"}
# PxrBumpRoughness.osl:352
#     RixBlendWithNormal(surfaceNormalMix, N, resultN);
	functioncall	$const59 1464 	%filename{"PxrBumpRoughness.osl"} %line{352} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:215
#     if (surfaceNormalMix > 0)
	gt		$tmp560 surfaceNormalMix $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{215} %argrw{"wrr"}
	if		$tmp560 1464 1464 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:216
#         bumpN = normalize(mix(bumpN, Nn, surfaceNormalMix));
	mix		$tmp561 resultN N surfaceNormalMix 	%line{216} %argrw{"wrrr"}
	normalize	resultN $tmp561 	%argrw{"wr"}
# PxrBumpRoughness.osl:354
#     if (isconnected(resultNG))
	isconnected	$tmp562 resultNG 	%filename{"PxrBumpRoughness.osl"} %line{354} %argrw{"wr"}
	if		$tmp562 1473 1473 	%argrw{"r"}
# PxrBumpRoughness.osl:356
#         resultNG = surfgradFromPerturbedNormal(resultN, N);
	functioncall	$const60 1473 	%line{356} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:100
# 	float k = dot(Nn, bN);
	dot		___687_k N resultN 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{100} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:101
# 	return (k * Nn - bN) / max(1.0e-8, abs(k));
	mul		$tmp563 ___687_k N 	%line{101} %argrw{"wrr"}
	sub		$tmp564 $tmp563 resultN 	%argrw{"wrr"}
	abs		$tmp566 ___687_k 	%argrw{"wr"}
	max		$tmp565 $const36 $tmp566 	%argrw{"wrr"}
	div		resultNG $tmp564 $tmp565 	%argrw{"wrr"}
	end
