OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.@PROJECT_VERSION_TWEAK@"dev"
# options: -DOSX -I/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/common -I/Users/Shared/build/ratbuild/rmanshare/RIS/pattern/osl -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl -o /Users/Shared/build/ratbuild/rmanshare/_built/osxSonoma_x86-64_clang15_external_release/osl/PxrBumpRoughness.osl/obj/PxrBumpRoughness.oso
shader PxrBumpRoughness	%meta{int,rfm_nodeid,1233481} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/bump"} %meta{string,rfh_classification,"Pattern/Bump"} %meta{string,help,"Derives roughness values from a bump map."} 
param	string	b2r_texture	""		%meta{string,label,"b2r Texture"} %meta{string,widget,"assetIdInput"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,help,"This expects the first derivative map, let H be a height field, then each channel are defined as r=dH/du, g=dH/dv, b=dontcare"}  %read{227,1683} %write{2147483647,-1}
param	struct Manifold	manifold			%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{48,48} %write{2147483647,-1} %struct{"Manifold"} %structfields{Q,QN,Qradius} %structfieldtypes{"pnf"} %structnfields{3}
param	point	manifold.Q	0 0 0		%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{50,51} %write{2147483647,-1} %mystruct{manifold} %mystructfield{0} %derivs
param	normal	manifold.QN	0 0 1		%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifold} %mystructfield{1}
param	float	manifold.Qradius	0		%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifold} %mystructfield{2}
param	struct PxrManifoldMulti	manifoldMulti			%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{58,58} %write{2147483647,-1} %struct{"PxrManifoldMulti"} %structfields{minNumTextures,numTextures,textureOrder,stAlpha0,stAlpha1,stAlpha2,stAlpha3,tileidRunflag0,tileidRunflag1,tileidRunflag2,tileidRunflag3,Tn,Bn,radius,hextile0,hextile1,hextile2,hextile3} %structfieldtypes{"iiippppppppv[4]v[4]fp[4]p[4]p[4]p[4]"} %structnfields{18}
param	int	manifoldMulti.minNumTextures	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{466,466} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{0}
param	int	manifoldMulti.numTextures	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{1}
param	int	manifoldMulti.textureOrder	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{2}
param	point	manifoldMulti.stAlpha0	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{439,439} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{3} %derivs
param	point	manifoldMulti.stAlpha1	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{440,440} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{4} %derivs
param	point	manifoldMulti.stAlpha2	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{441,441} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{5} %derivs
param	point	manifoldMulti.stAlpha3	-1 -1 -1		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{6}
param	point	manifoldMulti.tileidRunflag0	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{7}
param	point	manifoldMulti.tileidRunflag1	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{8}
param	point	manifoldMulti.tileidRunflag2	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{9}
param	point	manifoldMulti.tileidRunflag3	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{10}
param	vector[4]	manifoldMulti.Tn	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{0,3} %mystruct{manifoldMulti} %mystructfield{11} %initexpr
param	vector[4]	manifoldMulti.Bn	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{4,7} %mystruct{manifoldMulti} %mystructfield{12} %initexpr
param	float	manifoldMulti.radius	0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifoldMulti} %mystructfield{13}
param	point[4]	manifoldMulti.hextile0	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{442,448} %write{8,11} %mystruct{manifoldMulti} %mystructfield{14} %derivs %initexpr
param	point[4]	manifoldMulti.hextile1	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{450,456} %write{12,15} %mystruct{manifoldMulti} %mystructfield{15} %derivs %initexpr
param	point[4]	manifoldMulti.hextile2	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{458,464} %write{16,19} %mystruct{manifoldMulti} %mystructfield{16} %derivs %initexpr
param	point[4]	manifoldMulti.hextile3	0 0 0		%meta{string,widget,"default"} %meta{string,help,"manifoldMulti (struct)"} %meta{string,label,"Multi Manifold"} %meta{string,readOnly,"True"}  %read{2147483647,-1} %write{20,23} %mystruct{manifoldMulti} %mystructfield{17} %initexpr
param	int	useUndisplacedPosition	0		%meta{string,widget,"checkBox"} %meta{string,label,"Use undisplaced position"} %meta{string,help,"Enable if you are using the same texture for displacement and bump to roughness"} %meta{int,connectable,0}  %read{53,56} %write{2147483647,-1}
param	float	baseRoughness	0.00100000005		%meta{string,label,"Base Roughness"} %meta{float,min,0.00100000005} %meta{float,max,1} %meta{int,slider,1} %meta{string,page,"Bump Roughness"} %meta{int,page_open,1} %meta{string,help,"This is the roughness of the base surface when fully zoomed into the detail."}  %read{559,1489} %write{2147483647,-1}
param	float	textureRoughness	-1		%meta{string,label,"Texture Roughness"} %meta{float,slidermin,0.00100000005} %meta{float,max,1} %meta{string,page,"Bump Roughness"} %meta{string,help,"Set the texture roughness to be provided by the input textures when fully zoomed out from the detail. It is combined with the base roughness. The default of -1.0 lets the texture provide its natural roughness."}  %read{60,1453} %write{2147483647,-1}
param	float	gain	1		%meta{float,min,0} %meta{float,slidermax,10} %meta{float,slidercenter,1} %meta{string,page,"Bump Roughness"} %meta{string,help,"This is a multiplier to the aggregate roughness"}  %read{35,35} %write{2147483647,-1}
param	float	bumpNormalGain	1		%meta{string,label,"Bump Normal Gain"} %meta{float,min,0} %meta{float,slidermax,10} %meta{float,slidercenter,1} %meta{string,page,"Bump Roughness"} %meta{string,help,"multiplier to the normal map magnitude"}  %read{36,36} %write{2147483647,-1}
param	float	anisotropyGain	1		%meta{string,label,"Anisotropy Gain"} %meta{float,min,0} %meta{float,max,10} %meta{float,slidercenter,1} %meta{string,page,"Bump Roughness"} %meta{string,help,"This is a multiplier to the aggregate anisotropy"}  %read{881,1823} %write{2147483647,-1}
param	int	invertBumpNormal	0		%meta{string,label,"Invert Bump Normal"} %meta{string,widget,"checkBox"} %meta{int,connectable,0} %meta{string,page,"Bump Roughness"} %meta{string,help,"This will invert the Bump Normal"}  %read{787,1717} %write{2147483647,-1}
param	int	invertT	1		%meta{string,label,"Invert T"} %meta{string,widget,"checkBox"} %meta{int,connectable,0} %meta{string,page,"Bump Roughness"} %meta{string,help,"invert t direction if not connected to a manifold."}  %read{39,39} %write{2147483647,-1}
param	float	adjustAmount	1		%meta{string,widget,"default"} %meta{string,page,"Bump Roughness"} %meta{string,help,"Amount to adjust the normals when they are facing away from the camera.<br><br>adjustAmount (float)"} %meta{string,label,"Adjust Amount"} %meta{float,max,1} %meta{float,min,0}  %read{1857,1866} %write{2147483647,-1}
param	float	surfaceNormalMix	0		%meta{string,widget,"default"} %meta{string,page,"Bump Roughness"} %meta{string,help,"The amount to mix the resulting normals with the surface normals.<br><br>surfaceNormalMix (float)"} %meta{string,label,"Surface Normal Mix"} %meta{float,max,1} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,1} %meta{float,slidermin,0}  %read{1872,1874} %write{2147483647,-1}
param	float	blur	0		%meta{string,label,"Blur"} %meta{string,page,"Advanced"} %meta{string,help,"Amount of blur to apply to texture lookup."}  %read{701,1631} %write{2147483647,-1}
param	string	filter	"smartcubic"		%meta{string,label,"Filter"} %meta{string,page,"Advanced"} %meta{string,widget,"mapper"} %meta{string,options,"linear:linear|smartcubic:smartcubic|cubic:cubic|unfiltered:closest"} %meta{string,help,"Which filter to use. (unfiltered/closest not advisable for displacement.)"} %meta{int,connectable,0}  %read{704,1634} %write{2147483647,-1}
param	float	filterScale	1		%meta{string,label,"Filter Scale"} %meta{string,page,"Advanced"} %meta{int,slider,1} %meta{float,min,0} %meta{float,max,2} %meta{string,help,"Multiplies the size of the texture filter, less than one for sharper textures."} %meta{int,connectable,0}  %read{705,1635} %write{2147483647,-1}
param	float	s	0		%meta{int,lockgeom,0} %meta{string,widget,"null"} %meta{int,connectable,0}  %read{38,38} %write{2147483647,-1} %derivs
param	float	t	0		%meta{int,lockgeom,0} %meta{string,widget,"null"} %meta{int,connectable,0}  %read{41,46} %write{2147483647,-1} %derivs
oparam	normal	resultN	0 0 0		%read{1863,1881} %write{1853,1875}
oparam	float	resultRoughness	0		%read{2147483647,-1} %write{1848,1848}
oparam	float	resultAnisotropy	0		%read{1847,1847} %write{1851,1851}
oparam	vector	resultAnisotropyDirection	0 0 0		%read{2147483647,-1} %write{1852,1852}
oparam	vector	resultNG	0 0 0		%read{1876,1876} %write{1884,1884}
global	point	P	%read{52,52} %write{2147483647,-1} %derivs
global	vector	I	%read{1854,1854} %write{2147483647,-1}
global	normal	N	%read{32,1880} %write{2147483647,-1}
global	normal	Ng	%read{78,1860} %write{2147483647,-1}
global	vector	dPdu	%read{77,1566} %write{2147483647,-1}
global	vector	dPdv	%read{77,1557} %write{2147483647,-1}
local	float	___656_coords.s	%read{208,1622} %write{187,1615} %mystruct{___656_coords} %mystructfield{0}
local	float	___656_coords.t	%read{209,1623} %write{188,1616} %mystruct{___656_coords} %mystructfield{1}
local	float	___656_coords.dsdx	%read{210,1624} %write{189,1617} %mystruct{___656_coords} %mystructfield{2}
local	float	___656_coords.dtdx	%read{211,1625} %write{190,1618} %mystruct{___656_coords} %mystructfield{3}
local	float	___656_coords.dsdy	%read{212,1626} %write{191,1619} %mystruct{___656_coords} %mystructfield{4}
local	float	___656_coords.dtdy	%read{213,1627} %write{192,1620} %mystruct{___656_coords} %mystructfield{5}
local	float	___656_coords.blur	%read{214,1628} %write{193,1621} %mystruct{___656_coords} %mystructfield{6}
local	float	___656__tt	%read{110,1620} %write{100,1515} %derivs
local	float	___656_blur0	%read{193,1621} %write{102,1516}
local	float	___657_du	%read{107,1525} %write{104,1518}
local	float	___657_dv	%read{109,1527} %write{105,1519}
local	float	___657_dsdu	%read{114,1543} %write{107,1521}
local	float	___657_dsdv	%read{115,1557} %write{109,1523}
local	float	___657_dtdu	%read{115,1566} %write{111,1525}
local	float	___657_dtdv	%read{114,1547} %write{113,1527}
local	float	___657_det	%read{117,1540} %write{116,1530}
local	vector	___657_dPds	%read{135,1575} %write{122,1570}
local	vector	___657_dPdt	%read{144,1577} %write{126,1574}
local	float	___657_filterwidthS	%read{181,1612} %write{162,1595}
local	float	___657_filterwidthT	%read{182,1611} %write{164,1596}
local	float	___657_dxss	%read{169,1597} %write{165,1579}
local	float	___657_dxtt	%read{175,1593} %write{166,1580}
local	float	___657_dyss	%read{170,1598} %write{167,1581}
local	float	___657_dytt	%read{176,1594} %write{168,1582}
local	float	___657_signS	%read{181,1595} %write{173,1588}
local	float	___657_signT	%read{182,1596} %write{179,1594}
local	int	___657_unmixedDerivsAreDominant	%read{186,1600} %write{185,1599}
local	int	___679_success	%read{234,1684} %write{223,1683}
local	int	___679_nchannels	%read{236,1692} %write{224,1683}
local	color	___679_finalResult	%read{252,1702} %write{225,1701}
local	color	___679_result	%read{228,1700} %write{227,1677}
local	float	___717_k	%read{1880,1882} %write{1879,1879}
local	float	___729_VdotN	%read{1864,1867} %write{1863,1863}
local	float	___766_epsilon	%read{292,1802} %write{290,1800}
local	float	___768_w1	%read{480,1062} %write{480,1062}
local	float	___768_w2	%read{480,1062} %write{480,1062}
local	vector	___769_Nn	%read{480,1062} %write{480,1062}
local	vector	___769_Ncross	%read{480,1062} %write{480,1062}
local	float	___772_Bumprough_Use2016Mode	%read{480,1062} %write{480,1062}
local	vector	___779_sumv	%read{480,1062} %write{480,1062}
local	vector	___782_dQdx	%read{480,1471} %write{480,1456}
local	vector	___782_dQdy	%read{480,1470} %write{480,1457}
local	float	___782_A	%read{480,1470} %write{480,1458}
local	float	___782_B	%read{480,1467} %write{480,1459}
local	float	___782_C	%read{480,1471} %write{480,1460}
local	float	___782_D	%read{480,1466} %write{480,1461}
local	float	___782_invdet	%read{480,1473} %write{480,1465}
local	float	___783_del	%read{344,1761} %write{342,1756}
local	float	___800_e_over.l1	%read{480,1062} %write{480,1062} %mystruct{___800_e_over} %mystructfield{0}
local	float	___800_e_over.l2	%read{480,1062} %write{480,1062} %mystruct{___800_e_over} %mystructfield{1}
local	vector	___800_e_over.v1	%read{480,1062} %write{480,1062} %mystruct{___800_e_over} %mystructfield{2}
local	vector	___800_e_over.v2	%read{480,1062} %write{480,1062} %mystruct{___800_e_over} %mystructfield{3}
local	normal	___800_e_over.n	%read{480,1062} %write{480,1062} %mystruct{___800_e_over} %mystructfield{4}
local	float	___803_coords.s	%read{227,1677} %write{208,1622} %mystruct{___803_coords} %mystructfield{0}
local	float	___803_coords.t	%read{227,1677} %write{209,1623} %mystruct{___803_coords} %mystructfield{1}
local	float	___803_coords.dsdx	%read{227,1677} %write{210,1624} %mystruct{___803_coords} %mystructfield{2}
local	float	___803_coords.dtdx	%read{227,1677} %write{211,1625} %mystruct{___803_coords} %mystructfield{3}
local	float	___803_coords.dsdy	%read{227,1677} %write{212,1626} %mystruct{___803_coords} %mystructfield{4}
local	float	___803_coords.dtdy	%read{227,1677} %write{213,1627} %mystruct{___803_coords} %mystructfield{5}
local	float	___803_coords.blur	%read{226,1676} %write{214,1628} %mystruct{___803_coords} %mystructfield{6}
local	int	___803_params.firstchannel	%read{227,1677} %write{216,1671} %mystruct{___803_params} %mystructfield{0}
local	float	___803_params.blur	%read{226,1676} %write{217,1631} %mystruct{___803_params} %mystructfield{1}
local	color	___803_params.missingcolor	%read{227,1678} %write{218,1632} %mystruct{___803_params} %mystructfield{2}
local	float	___803_params.missingalpha	%read{2147483647,-1} %write{219,1633} %mystruct{___803_params} %mystructfield{3}
local	string	___803_params.interp	%read{227,1677} %write{220,1634} %mystruct{___803_params} %mystructfield{4}
local	float	___803_params.width	%read{227,1677} %write{221,1635} %mystruct{___803_params} %mystructfield{5}
local	normal	___804_PN	%read{78,1492} %write{77,1491}
local	int	___804_lefthanded	%read{80,1494} %write{79,1493}
local	normal	___804_N_	%read{83,1499} %write{81,1496}
local	float	___805_dx	%read{317,1785} %write{312,1726}
local	float	___805_dy	%read{320,1787} %write{313,1727}
local	float	___805_dxdx	%read{318,1732} %write{314,1728}
local	float	___805_dydy	%read{324,1738} %write{315,1729}
local	float	___805_dxdy	%read{321,1735} %write{316,1730}
local	float	___805_sxx	%read{329,1760} %write{319,1743}
local	float	___805_sxy	%read{330,1768} %write{322,1744}
local	float	___805_syy	%read{331,1767} %write{325,1745}
local	float	___806_varianceGainSqr	%read{329,1745} %write{328,1742}
local	float	___805_l1	%read{349,1771} %write{345,1759}
local	float	___805_l2	%read{353,1772} %write{348,1762}
local	vector	___805_v1	%read{359,1775} %write{352,1766}
local	vector	___805_v2	%read{365,1781} %write{356,1770}
local	float	___807_eps	%read{402,1818} %write{400,1814}
local	float	___807_roughnessU	%read{405,1819} %write{402,1816}
local	float	___807_roughnessV	%read{405,1819} %write{404,1818}
local	float	___807_ratio	%read{406,1821} %write{405,1819}
local	float	___807_anisotropy	%read{409,1828} %write{408,1826}
local	float	___807_alpha	%read{419,1835} %write{417,1831}
local	float	___807_variance	%read{419,1836} %write{418,1832}
local	float	___808_baseRoughnessSqr	%read{87,1809} %write{75,1489}
local	vector	___808_U	%read{85,1786} %write{84,1498}
local	vector	___808_V	%read{90,1788} %write{85,1499}
local	vector	___808_W	%read{91,1790} %write{86,1500}
local	float	___808_result.l1	%read{393,1838} %write{87,1834} %mystruct{___808_result} %mystructfield{0}
local	float	___808_result.l2	%read{395,1839} %write{88,1837} %mystruct{___808_result} %mystructfield{1}
local	vector	___808_result.v1	%read{364,1840} %write{89,1778} %mystruct{___808_result} %mystructfield{2}
local	vector	___808_result.v2	%read{370,1841} %write{90,1784} %mystruct{___808_result} %mystructfield{3}
local	normal	___808_result.n	%read{378,1842} %write{91,1792} %mystruct{___808_result} %mystructfield{4}
local	int	___808_validDs	%read{302,1716} %write{301,1715}
local	float	___813_resultRoughnessU	%read{1846,1848} %write{1844,1844}
local	float	___813_resultRoughnessV	%read{1846,1846} %write{1845,1845}
local	float	___813_rudivrv	%read{1849,1850} %write{1846,1846}
local	float	___815_textureBumpRough.l1	%read{429,1445} %write{63,1440} %mystruct{___815_textureBumpRough} %mystructfield{0}
local	float	___815_textureBumpRough.l2	%read{430,1446} %write{64,1441} %mystruct{___815_textureBumpRough} %mystructfield{1}
local	vector	___815_textureBumpRough.v1	%read{2147483647,-1} %write{65,1442} %mystruct{___815_textureBumpRough} %mystructfield{2}
local	vector	___815_textureBumpRough.v2	%read{2147483647,-1} %write{66,1443} %mystruct{___815_textureBumpRough} %mystructfield{3}
local	normal	___815_textureBumpRough.n	%read{2147483647,-1} %write{67,1444} %mystruct{___815_textureBumpRough} %mystructfield{4}
local	vector	___815_vecD1	%read{253,1329} %write{68,1326}
local	vector	___815_vecD2	%read{297,1332} %write{69,1304}
local	float	___815_textureRoughnessU	%read{431,1452} %write{429,1445}
local	float	___815_textureRoughnessV	%read{431,1447} %write{430,1446}
local	float	___815_rudivrv	%read{432,1449} %write{431,1447}
local	float	___815_textureAnisotropy	%read{435,1451} %write{434,1450}
local	float	___815_textureRoughnessGain	%read{438,1454} %write{437,1453}
local	vector	dPds	%read{480,1491} %write{24,1469}
local	vector	dPdt	%read{480,1497} %write{25,1473}
local	vector	vecD1	%read{480,1727} %write{26,1724}
local	vector	vecD2	%read{480,1730} %write{27,1702}
local	float	br.l1	%read{480,1844} %write{28,1838} %mystruct{br} %mystructfield{0}
local	float	br.l2	%read{480,1845} %write{29,1839} %mystruct{br} %mystructfield{1}
local	vector	br.v1	%read{480,1852} %write{30,1840} %mystruct{br} %mystructfield{2}
local	vector	br.v2	%read{480,1062} %write{31,1841} %mystruct{br} %mystructfield{3}
local	normal	br.n	%read{480,1853} %write{32,1842} %mystruct{br} %mystructfield{4}
local	float	resultBumpRoughPresence	%read{2147483647,-1} %write{33,33}
local	float	textureRoughnessGain	%read{35,36} %write{34,1454}
local	float	_gainRw	%read{480,1742} %write{35,35}
local	float	_bumpNormalGainRw	%read{480,1787} %write{36,36}
local	int	isMulti	%read{2147483647,-1} %write{37,37}
local	float	inputS	%read{480,1619} %write{38,1062} %derivs
local	float	inputT	%read{480,1515} %write{45,1062} %derivs
local	float	inputW	%read{480,1062} %write{47,1062}
local	point	Pos	%read{480,1457} %write{52,54} %derivs
local	normal	Nin	%read{81,1500} %write{55,57}
local	point[3]	___817_sta	%read{480,1062} %write{439,441} %derivs
local	point[3]	___817_hex.s	%read{480,1062} %write{443,459} %mystruct{___817_hex} %mystructfield{0} %derivs
local	point[3]	___817_hex.t	%read{480,1062} %write{445,461} %mystruct{___817_hex} %mystructfield{1} %derivs
local	point[3]	___817_hex.w	%read{480,1062} %write{447,463} %mystruct{___817_hex} %mystructfield{2}
local	point[3]	___817_hex.r	%read{480,1062} %write{449,465} %mystruct{___817_hex} %mystructfield{3}
local	int	___817_numProj	%read{480,1062} %write{466,466}
local	float	___817_resultBumpRough.l1	%read{480,1071} %write{467,1062} %mystruct{___817_resultBumpRough} %mystructfield{0}
local	float	___817_resultBumpRough.l2	%read{480,1072} %write{468,1062} %mystruct{___817_resultBumpRough} %mystructfield{1}
local	vector	___817_resultBumpRough.v1	%read{480,1073} %write{469,1062} %mystruct{___817_resultBumpRough} %mystructfield{2}
local	vector	___817_resultBumpRough.v2	%read{480,1074} %write{470,1062} %mystruct{___817_resultBumpRough} %mystructfield{3}
local	normal	___817_resultBumpRough.n	%read{473,1075} %write{471,1070} %mystruct{___817_resultBumpRough} %mystructfield{4}
local	float	___817_resultBumpRoughPresence	%read{480,1062} %write{472,1062}
local	vector	___817_Nc	%read{1067,1067} %write{473,473}
local	float	___817_wvdenom	%read{480,1065} %write{476,1062}
local	float	___817_sqwaccum	%read{480,1062} %write{477,1062}
local	int	___819_i	%read{480,1062} %write{479,1062} %derivs
local	int	___820_do_hextile	%read{480,1062} %write{480,1062}
local	int	___820_numSamples	%read{480,1062} %write{480,1062}
local	float	___820_weight	%read{480,1062} %write{480,1062}
local	float	___820_wmult	%read{2147483647,-1} %write{480,1062}
local	int	___822_j	%read{480,1062} %write{480,1062} %derivs
local	vector	Vn	%read{1860,1868} %write{1855,1855}
const	vector	$const1	0 0 0		%read{0,1548} %write{2147483647,-1}
const	int	$const2	0		%read{0,1872} %write{2147483647,-1}
const	int	$const3	1		%read{1,1781} %write{2147483647,-1}
const	int	$const4	2		%read{2,1730} %write{2147483647,-1}
const	int	$const5	3		%read{3,493} %write{2147483647,-1}
const	point	$const6	0 0 0		%read{8,23} %write{2147483647,-1}
const	point	$const7	-1 -1 -1		%read{10,487} %write{2147483647,-1}
const	float	$const8	9.99999975e-06		%read{28,1080} %write{2147483647,-1}
const	vector	$const9	1 0 0		%read{30,1081} %write{2147483647,-1}
const	vector	$const10	0 1 0		%read{31,1082} %write{2147483647,-1}
const	float	$const11	1		%read{33,1850} %write{2147483647,-1}
const	string	$const12	"invertCoord"		%read{40,1509} %write{2147483647,-1}
temp	float	$tmp25	%read{42,42} %write{41,41} %derivs
temp	float	$tmp26	%read{45,45} %write{42,42} %derivs
temp	float	$tmp27	%read{44,44} %write{43,43} %derivs
temp	float	$tmp28	%read{45,45} %write{44,44} %derivs
temp	int	$tmp29	%read{49,49} %write{48,48}
temp	int	$tmp30	%read{2147483647,-1} %write{54,54}
const	string	$const13	"primvar"		%read{54,54} %write{2147483647,-1}
const	string	$const14	"P"		%read{54,54} %write{2147483647,-1}
temp	int	$tmp31	%read{2147483647,-1} %write{57,57}
const	string	$const15	"builtin"		%read{57,57} %write{2147483647,-1}
const	string	$const16	"Non"		%read{57,57} %write{2147483647,-1}
temp	int	$tmp32	%read{59,59} %write{58,58}
const	float	$const17	0		%read{60,1826} %write{2147483647,-1}
temp	int	$tmp33	%read{61,61} %write{60,60}
const	string	$const18	"estimateRoughnessGain"		%read{62,1078} %write{2147483647,-1}
const	float	$const19	9.99999975e-05		%read{75,1091} %write{2147483647,-1}
temp	float	$tmp34	%read{71,71} %write{70,70} %derivs
const	float	$const20	0.5		%read{71,1762} %write{2147483647,-1}
temp	float	$tmp35	%read{106,205} %write{71,71} %derivs
temp	float	$tmp36	%read{73,73} %write{72,72} %derivs
temp	float	$tmp37	%read{96,101} %write{73,73} %derivs
const	string	$const21	"linear"		%read{220,1236} %write{2147483647,-1}
const	float	$const22	1024		%read{217,1237} %write{2147483647,-1}
const	string	$const23	"ReadBumpRough"		%read{74,1488} %write{2147483647,-1}
const	string	$const24	"ComputeOrthonormalTangentSpace"		%read{76,1490} %write{2147483647,-1}
temp	float	$tmp38	%read{79,79} %write{78,78}
temp	vector	$tmp39	%read{84,84} %write{83,83}
const	string	$const25	"ReadBumpRoughTextures"		%read{92,1506} %write{2147483647,-1}
const	string	$const26	"initTxCoords"		%read{93,1507} %write{2147483647,-1}
temp	float	$tmp40	%read{97,97} %write{96,96} %derivs
temp	float	$tmp41	%read{100,100} %write{97,97} %derivs
temp	float	$tmp42	%read{99,99} %write{98,98} %derivs
temp	float	$tmp43	%read{100,100} %write{99,99} %derivs
temp	float	$tmp44	%read{107,107} %write{106,106}
temp	float	$tmp45	%read{109,109} %write{108,108}
temp	float	$tmp46	%read{111,111} %write{110,110}
temp	float	$tmp47	%read{113,113} %write{112,112}
temp	float	$tmp48	%read{116,116} %write{114,114}
temp	float	$tmp49	%read{116,116} %write{115,115}
temp	int	$tmp50	%read{118,118} %write{117,117}
temp	vector	$tmp51	%read{121,121} %write{119,119}
temp	vector	$tmp52	%read{121,121} %write{120,120}
temp	vector	$tmp53	%read{122,122} %write{121,121}
temp	vector	$tmp54	%read{125,125} %write{123,123}
temp	vector	$tmp55	%read{125,125} %write{124,124}
temp	vector	$tmp56	%read{126,126} %write{125,125}
temp	int	$tmp57	%read{128,128} %write{127,127}
temp	int	$tmp58	%read{132,132} %write{131,131}
temp	float	$tmp59	%read{136,136} %write{135,135}
temp	int	$tmp60	%read{137,137} %write{136,136}
temp	int	$tmp61	%read{138,142} %write{137,141}
temp	int	$tmp62	%read{140,140} %write{139,139}
temp	int	$tmp63	%read{141,141} %write{140,140}
temp	float	$tmp64	%read{145,145} %write{144,144}
temp	int	$tmp65	%read{146,146} %write{145,145}
temp	int	$tmp66	%read{147,151} %write{146,150}
temp	int	$tmp67	%read{149,149} %write{148,148}
temp	int	$tmp68	%read{150,150} %write{149,149}
temp	float	$tmp69	%read{154,154} %write{153,153}
temp	int	$tmp70	%read{155,155} %write{154,154}
temp	float	$tmp71	%read{158,158} %write{157,157}
temp	int	$tmp72	%read{159,159} %write{158,158}
temp	float	$tmp73	%read{162,162} %write{161,161}
temp	float	$tmp74	%read{164,164} %write{163,163}
temp	float	$tmp75	%read{171,171} %write{169,169}
temp	float	$tmp76	%read{171,171} %write{170,170}
temp	int	$tmp77	%read{172,172} %write{171,171}
temp	float	$tmp78	%read{177,177} %write{175,175}
temp	float	$tmp79	%read{177,177} %write{176,176}
temp	int	$tmp80	%read{178,178} %write{177,177}
temp	float	$tmp81	%read{185,185} %write{183,183}
temp	float	$tmp82	%read{185,185} %write{184,184}
const	color	$const27	0 0 0		%read{218,1632} %write{2147483647,-1}
const	string	$const28	"PxrTextureLookup"		%read{222,1672} %write{2147483647,-1}
const	string	$const29	"firstchannel"		%read{227,1677} %write{2147483647,-1}
const	string	$const30	"blur"		%read{227,1677} %write{2147483647,-1}
temp	float	$tmp83	%read{227,227} %write{226,226}
const	string	$const31	"missingcolor"		%read{227,1677} %write{2147483647,-1}
const	string	$const32	"interp"		%read{227,1677} %write{2147483647,-1}
const	string	$const33	"width"		%read{227,1677} %write{2147483647,-1}
temp	int	$tmp84	%read{229,229} %write{228,228}
const	string	$const34	"channels"		%read{233,1683} %write{2147483647,-1}
temp	int	$tmp85	%read{235,238} %write{234,237}
temp	int	$tmp86	%read{237,237} %write{236,236}
temp	int	$tmp87	%read{240,240} %write{239,239}
temp	int	$tmp88	%read{241,245} %write{240,244}
temp	int	$tmp89	%read{243,243} %write{242,242}
temp	int	$tmp90	%read{244,244} %write{243,243}
temp	float	$tmp91	%read{247,247} %write{246,246}
temp	float	$tmp92	%read{249,249} %write{248,248}
temp	float	$tmp93	%read{251,251} %write{250,250}
temp	float	$tmp94	%read{256,256} %write{255,255}
temp	float	$tmp95	%read{255,255} %write{253,253}
temp	float	$tmp96	%read{255,255} %write{254,254}
temp	float	$tmp97	%read{263,263} %write{262,262}
temp	int	$tmp98	%read{265,265} %write{264,264}
temp	int	$tmp99	%read{271,274} %write{270,273}
temp	int	$tmp100	%read{273,273} %write{272,272}
temp	int	$tmp101	%read{276,276} %write{275,275}
temp	int	$tmp102	%read{277,281} %write{276,280}
temp	int	$tmp103	%read{279,279} %write{278,278}
temp	int	$tmp104	%read{280,280} %write{279,279}
temp	float	$tmp105	%read{283,283} %write{282,282}
temp	float	$tmp106	%read{285,285} %write{284,284}
temp	float	$tmp107	%read{287,287} %write{286,286}
temp	int	$tmp108	%read{293,293} %write{292,292}
const	string	$const35	"_IsValidVector"		%read{289,1799} %write{2147483647,-1}
const	float	$const36	9.99999994e-09		%read{290,1883} %write{2147483647,-1}
temp	float	$tmp109	%read{292,292} %write{291,291}
temp	int	$tmp110	%read{294,301} %write{293,300}
temp	int	$tmp111	%read{299,299} %write{298,298}
temp	float	$tmp112	%read{298,298} %write{297,297}
temp	int	$tmp113	%read{300,300} %write{299,299}
temp	int	$tmp114	%read{304,304} %write{303,303}
temp	float	$tmp115	%read{306,306} %write{305,305}
temp	float	$tmp116	%read{307,307} %write{306,306}
temp	float	$tmp117	%read{309,309} %write{308,308}
temp	float	$tmp118	%read{310,310} %write{309,309}
temp	int	$tmp119	%read{392,392} %write{391,391}
const	string	$const37	"ComputeBumpRoughStruct"		%read{311,1725} %write{2147483647,-1}
const	float	$const38	2		%read{319,1830} %write{2147483647,-1}
temp	float	$tmp120	%read{318,318} %write{317,317}
temp	float	$tmp121	%read{319,319} %write{318,318}
temp	float	$tmp122	%read{321,321} %write{320,320}
temp	float	$tmp123	%read{322,322} %write{321,321}
temp	float	$tmp124	%read{324,324} %write{323,323}
temp	float	$tmp125	%read{325,325} %write{324,324}
temp	int	$tmp126	%read{327,327} %write{326,326}
const	string	$const39	"BumpRough_CovarToEigen2D"		%read{332,1746} %write{2147483647,-1}
temp	float	$tmp127	%read{336,336} %write{333,333}
const	float	$const40	4		%read{334,1748} %write{2147483647,-1}
temp	float	$tmp128	%read{335,335} %write{334,334}
temp	float	$tmp129	%read{336,336} %write{335,335}
temp	float	$tmp130	%read{339,339} %write{336,336}
temp	float	$tmp131	%read{338,338} %write{337,337}
temp	float	$tmp132	%read{339,339} %write{338,338}
temp	float	$tmp133	%read{341,341} %write{339,339}
temp	float	$tmp134	%read{341,341} %write{340,340}
temp	float	$tmp135	%read{342,342} %write{341,341}
temp	float	$tmp136	%read{344,344} %write{343,343}
temp	float	$tmp137	%read{345,345} %write{344,344}
temp	float	$tmp138	%read{347,347} %write{346,346}
temp	float	$tmp139	%read{348,348} %write{347,347}
temp	vector	$tmp140	%read{352,352} %write{351,351}
temp	float	$tmp141	%read{350,350} %write{349,349}
temp	float	$tmp142	%read{351,351} %write{350,350}
temp	vector	$tmp143	%read{356,356} %write{355,355}
temp	float	$tmp144	%read{354,354} %write{353,353}
temp	float	$tmp145	%read{355,355} %write{354,354}
temp	float	$tmp146	%read{360,360} %write{359,359}
temp	vector	$tmp147	%read{363,363} %write{360,360}
temp	float	$tmp148	%read{362,362} %write{361,361}
temp	vector	$tmp149	%read{363,363} %write{362,362}
temp	float	$tmp150	%read{366,366} %write{365,365}
temp	vector	$tmp151	%read{369,369} %write{366,366}
temp	float	$tmp152	%read{368,368} %write{367,367}
temp	vector	$tmp153	%read{369,369} %write{368,368}
temp	float	$tmp154	%read{372,372} %write{371,371}
temp	vector	$tmp155	%read{375,375} %write{372,372}
temp	float	$tmp156	%read{374,374} %write{373,373}
temp	vector	$tmp157	%read{375,375} %write{374,374}
temp	vector	$tmp158	%read{376,376} %write{375,375}
temp	vector	$tmp159	%read{377,377} %write{376,376}
temp	int	$tmp160	%read{383,383} %write{382,382}
temp	float	$tmp161	%read{382,382} %write{381,381}
temp	int	$tmp162	%read{384,391} %write{383,390}
temp	int	$tmp163	%read{389,389} %write{388,388}
temp	float	$tmp164	%read{388,388} %write{387,387}
temp	int	$tmp165	%read{390,390} %write{389,389}
temp	int	$tmp166	%read{398,398} %write{397,397}
const	string	$const41	"BumpRoughAnisotropyAdjust"		%read{399,1813} %write{2147483647,-1}
const	float	$const42	9.99999996e-13		%read{400,1814} %write{2147483647,-1}
temp	float	$tmp167	%read{402,402} %write{401,401}
temp	float	$tmp168	%read{404,404} %write{403,403}
temp	float	$tmp169	%read{408,408} %write{406,406}
temp	float	$tmp170	%read{408,408} %write{407,407}
temp	float	$tmp171	%read{411,411} %write{409,409}
const	string	$const43	"clamp"		%read{410,1824} %write{2147483647,-1}
temp	float	$tmp172	%read{412,412} %write{411,411}
temp	float	$tmp173	%read{415,415} %write{413,413}
temp	float	$tmp174	%read{415,415} %write{414,414}
temp	float	$tmp175	%read{416,416} %write{415,415}
temp	float	$tmp176	%read{417,417} %write{416,416}
temp	float	$tmp177	%read{422,422} %write{421,421}
temp	float	$tmp178	%read{434,434} %write{432,432}
temp	float	$tmp179	%read{434,434} %write{433,433}
temp	float	$tmp180	%read{436,436} %write{435,435}
temp	float	$tmp181	%read{437,437} %write{436,436}
temp	point	$tmp182	%read{443,443} %write{442,442} %derivs
temp	point	$tmp183	%read{445,445} %write{444,444} %derivs
temp	point	$tmp184	%read{447,447} %write{446,446}
temp	point	$tmp185	%read{449,449} %write{448,448}
temp	point	$tmp186	%read{451,451} %write{450,450} %derivs
temp	point	$tmp187	%read{453,453} %write{452,452} %derivs
temp	point	$tmp188	%read{455,455} %write{454,454}
temp	point	$tmp189	%read{457,457} %write{456,456}
temp	point	$tmp190	%read{459,459} %write{458,458} %derivs
temp	point	$tmp191	%read{461,461} %write{460,460} %derivs
temp	point	$tmp192	%read{463,463} %write{462,462}
temp	point	$tmp193	%read{465,465} %write{464,464}
temp	int	$tmp194	%read{480,1062} %write{480,1062}
temp	int	$tmp195	%read{478,1062} %write{479,1062}
temp	point	$tmp196.s	%read{2147483647,-1} %write{480,1062}
temp	point	$tmp196.t	%read{2147483647,-1} %write{480,1062}
temp	point	$tmp196.w	%read{480,1062} %write{480,1062}
temp	point	$tmp196.r	%read{2147483647,-1} %write{480,1062}
const	string	$const44	"validHexTileData"		%read{486,486} %write{2147483647,-1}
temp	int	$tmp198	%read{480,1062} %write{480,1062}
temp	point	$tmp199	%read{480,1062} %write{480,1062}
const	float	$const45	3		%read{499,499} %write{2147483647,-1}
temp	int	$tmp200	%read{480,1062} %write{480,1062}
temp	int	$tmp201	%read{480,1062} %write{480,1062}
temp	int	$tmp202	%read{480,1062} %write{480,1062}
temp	int	$tmp203	%read{480,1062} %write{480,1062}
temp	point	$tmp204	%read{480,1062} %write{480,1062} %derivs
temp	point	$tmp205	%read{480,1062} %write{480,1062} %derivs
temp	int	$tmp206	%read{480,1062} %write{480,1062}
temp	point	$tmp207	%read{480,1062} %write{480,1062} %derivs
temp	point	$tmp208	%read{480,1062} %write{480,1062} %derivs
temp	int	$tmp209	%read{480,1062} %write{480,1062}
temp	point	$tmp210	%read{480,1062} %write{480,1062}
temp	float	$tmp211	%read{480,1062} %write{480,1062}
temp	int	$tmp212	%read{2147483647,-1} %write{480,1062}
const	string	$const46	"BumpRough_PartialDeriv"		%read{526,1455} %write{2147483647,-1}
temp	float	$tmp213	%read{480,1062} %write{480,1062}
temp	float	$tmp214	%read{480,1062} %write{480,1062}
temp	float	$tmp215	%read{480,1062} %write{480,1062}
temp	vector	$tmp216	%read{480,1062} %write{480,1062}
temp	vector	$tmp217	%read{480,1062} %write{480,1062}
temp	vector	$tmp218	%read{480,1062} %write{480,1062}
temp	vector	$tmp219	%read{480,1062} %write{480,1062}
temp	vector	$tmp220	%read{480,1062} %write{480,1062}
temp	vector	$tmp221	%read{480,1062} %write{480,1062}
temp	int	$tmp222	%read{480,1062} %write{480,1062}
temp	float	$tmp223	%read{480,1062} %write{480,1062}
temp	int	$tmp224	%read{480,1062} %write{480,1062}
temp	int	$tmp225	%read{480,1062} %write{480,1062}
temp	float	$tmp226	%read{480,1062} %write{480,1062}
temp	int	$tmp227	%read{480,1062} %write{480,1062}
temp	float	$tmp228	%read{480,1062} %write{480,1062}
temp	vector	$tmp229	%read{480,1062} %write{480,1062}
temp	float	$tmp230	%read{480,1062} %write{480,1062} %derivs
temp	float	$tmp231	%read{480,1062} %write{480,1062} %derivs
temp	float	$tmp232	%read{480,1062} %write{480,1062} %derivs
temp	float	$tmp233	%read{480,1062} %write{480,1062} %derivs
temp	float	$tmp234	%read{480,1062} %write{480,1062}
temp	float	$tmp235	%read{480,1062} %write{480,1062}
temp	float	$tmp236	%read{480,1062} %write{480,1062}
temp	float	$tmp237	%read{480,1062} %write{480,1062}
temp	float	$tmp238	%read{480,1062} %write{480,1062}
temp	float	$tmp239	%read{480,1062} %write{480,1062}
temp	int	$tmp240	%read{480,1062} %write{480,1062}
temp	vector	$tmp241	%read{480,1062} %write{480,1062}
temp	vector	$tmp242	%read{480,1062} %write{480,1062}
temp	vector	$tmp243	%read{480,1062} %write{480,1062}
temp	vector	$tmp244	%read{480,1062} %write{480,1062}
temp	vector	$tmp245	%read{480,1062} %write{480,1062}
temp	vector	$tmp246	%read{480,1062} %write{480,1062}
temp	int	$tmp247	%read{480,1062} %write{480,1062}
temp	int	$tmp248	%read{480,1062} %write{480,1062}
temp	float	$tmp249	%read{480,1062} %write{480,1062}
temp	int	$tmp250	%read{480,1062} %write{480,1062}
temp	int	$tmp251	%read{480,1062} %write{480,1062}
temp	int	$tmp252	%read{480,1062} %write{480,1062}
temp	int	$tmp253	%read{480,1062} %write{480,1062}
temp	float	$tmp254	%read{480,1062} %write{480,1062}
temp	int	$tmp255	%read{480,1062} %write{480,1062}
temp	int	$tmp256	%read{480,1062} %write{480,1062}
temp	int	$tmp257	%read{480,1062} %write{480,1062}
temp	int	$tmp258	%read{480,1062} %write{480,1062}
temp	float	$tmp259	%read{480,1062} %write{480,1062}
temp	int	$tmp260	%read{480,1062} %write{480,1062}
temp	float	$tmp261	%read{480,1062} %write{480,1062}
temp	int	$tmp262	%read{480,1062} %write{480,1062}
temp	float	$tmp263	%read{480,1062} %write{480,1062}
temp	float	$tmp264	%read{480,1062} %write{480,1062}
temp	float	$tmp265	%read{480,1062} %write{480,1062}
temp	float	$tmp266	%read{480,1062} %write{480,1062}
temp	int	$tmp267	%read{480,1062} %write{480,1062}
temp	float	$tmp268	%read{480,1062} %write{480,1062}
temp	float	$tmp269	%read{480,1062} %write{480,1062}
temp	int	$tmp270	%read{480,1062} %write{480,1062}
temp	float	$tmp271	%read{480,1062} %write{480,1062}
temp	float	$tmp272	%read{480,1062} %write{480,1062}
temp	float	$tmp273	%read{480,1062} %write{480,1062}
temp	int	$tmp274	%read{480,1062} %write{480,1062}
temp	int	$tmp275	%read{480,1062} %write{480,1062}
temp	int	$tmp276	%read{480,1062} %write{480,1062}
temp	int	$tmp277	%read{480,1062} %write{480,1062}
temp	int	$tmp278	%read{480,1062} %write{480,1062}
temp	int	$tmp279	%read{480,1062} %write{480,1062}
temp	int	$tmp280	%read{480,1062} %write{480,1062}
temp	float	$tmp281	%read{480,1062} %write{480,1062}
temp	float	$tmp282	%read{480,1062} %write{480,1062}
temp	float	$tmp283	%read{480,1062} %write{480,1062}
temp	float	$tmp284	%read{480,1062} %write{480,1062}
temp	float	$tmp285	%read{480,1062} %write{480,1062}
temp	float	$tmp286	%read{480,1062} %write{480,1062}
temp	float	$tmp287	%read{480,1062} %write{480,1062}
temp	int	$tmp288	%read{480,1062} %write{480,1062}
temp	int	$tmp289	%read{480,1062} %write{480,1062}
temp	int	$tmp290	%read{480,1062} %write{480,1062}
temp	int	$tmp291	%read{480,1062} %write{480,1062}
temp	int	$tmp292	%read{480,1062} %write{480,1062}
temp	int	$tmp293	%read{480,1062} %write{480,1062}
temp	int	$tmp294	%read{480,1062} %write{480,1062}
temp	float	$tmp295	%read{480,1062} %write{480,1062}
temp	float	$tmp296	%read{480,1062} %write{480,1062}
temp	float	$tmp297	%read{480,1062} %write{480,1062}
temp	int	$tmp298	%read{480,1062} %write{480,1062}
temp	float	$tmp299	%read{480,1062} %write{480,1062}
temp	int	$tmp300	%read{480,1062} %write{480,1062}
temp	int	$tmp301	%read{480,1062} %write{480,1062}
temp	float	$tmp302	%read{480,1062} %write{480,1062}
temp	int	$tmp303	%read{480,1062} %write{480,1062}
temp	int	$tmp304	%read{480,1062} %write{480,1062}
temp	float	$tmp305	%read{480,1062} %write{480,1062}
temp	float	$tmp306	%read{480,1062} %write{480,1062}
temp	float	$tmp307	%read{480,1062} %write{480,1062}
temp	float	$tmp308	%read{480,1062} %write{480,1062}
temp	int	$tmp309	%read{480,1062} %write{480,1062}
temp	float	$tmp310	%read{480,1062} %write{480,1062}
temp	float	$tmp311	%read{480,1062} %write{480,1062}
temp	float	$tmp312	%read{480,1062} %write{480,1062}
temp	float	$tmp313	%read{480,1062} %write{480,1062}
temp	float	$tmp314	%read{480,1062} %write{480,1062}
temp	float	$tmp315	%read{480,1062} %write{480,1062}
temp	int	$tmp316	%read{480,1062} %write{480,1062}
temp	float	$tmp317	%read{480,1062} %write{480,1062}
temp	float	$tmp318	%read{480,1062} %write{480,1062}
temp	float	$tmp319	%read{480,1062} %write{480,1062}
temp	float	$tmp320	%read{480,1062} %write{480,1062}
temp	float	$tmp321	%read{480,1062} %write{480,1062}
temp	float	$tmp322	%read{480,1062} %write{480,1062}
temp	float	$tmp323	%read{480,1062} %write{480,1062}
temp	float	$tmp324	%read{480,1062} %write{480,1062}
temp	float	$tmp325	%read{480,1062} %write{480,1062}
temp	float	$tmp326	%read{480,1062} %write{480,1062}
temp	float	$tmp327	%read{480,1062} %write{480,1062}
temp	float	$tmp328	%read{480,1062} %write{480,1062}
temp	float	$tmp329	%read{480,1062} %write{480,1062}
temp	vector	$tmp330	%read{480,1062} %write{480,1062}
temp	float	$tmp331	%read{480,1062} %write{480,1062}
temp	float	$tmp332	%read{480,1062} %write{480,1062}
temp	vector	$tmp333	%read{480,1062} %write{480,1062}
temp	float	$tmp334	%read{480,1062} %write{480,1062}
temp	float	$tmp335	%read{480,1062} %write{480,1062}
temp	float	$tmp336	%read{480,1062} %write{480,1062}
temp	vector	$tmp337	%read{480,1062} %write{480,1062}
temp	float	$tmp338	%read{480,1062} %write{480,1062}
temp	vector	$tmp339	%read{480,1062} %write{480,1062}
temp	float	$tmp340	%read{480,1062} %write{480,1062}
temp	vector	$tmp341	%read{480,1062} %write{480,1062}
temp	float	$tmp342	%read{480,1062} %write{480,1062}
temp	vector	$tmp343	%read{480,1062} %write{480,1062}
temp	float	$tmp344	%read{480,1062} %write{480,1062}
temp	vector	$tmp345	%read{480,1062} %write{480,1062}
temp	float	$tmp346	%read{480,1062} %write{480,1062}
temp	vector	$tmp347	%read{480,1062} %write{480,1062}
temp	vector	$tmp348	%read{480,1062} %write{480,1062}
temp	vector	$tmp349	%read{480,1062} %write{480,1062}
temp	int	$tmp350	%read{480,1062} %write{480,1062}
temp	float	$tmp351	%read{480,1062} %write{480,1062}
temp	int	$tmp352	%read{480,1062} %write{480,1062}
temp	int	$tmp353	%read{480,1062} %write{480,1062}
temp	float	$tmp354	%read{480,1062} %write{480,1062}
temp	int	$tmp355	%read{480,1062} %write{480,1062}
temp	int	$tmp356	%read{480,1062} %write{480,1062}
temp	float	$tmp357	%read{480,1062} %write{480,1062}
temp	float	$tmp358	%read{480,1062} %write{480,1062}
temp	float	$tmp359	%read{480,1062} %write{480,1062}
temp	float	$tmp360	%read{480,1062} %write{480,1062}
temp	float	$tmp361	%read{480,1062} %write{480,1062}
temp	float	$tmp362	%read{480,1062} %write{480,1062}
temp	float	$tmp363	%read{480,1062} %write{480,1062}
temp	float	$tmp364	%read{480,1062} %write{480,1062}
temp	float	$tmp365	%read{480,1062} %write{480,1062}
temp	float	$tmp366	%read{480,1062} %write{480,1062}
temp	float	$tmp367	%read{480,1062} %write{480,1062}
temp	float	$tmp368	%read{480,1062} %write{480,1062}
const	string	$const47	"BumpRough_EigenBlend_AddNormalWeightedVariance"		%read{914,914} %write{2147483647,-1}
temp	int	$tmp369	%read{480,1062} %write{480,1062}
const	string	$const48	"BumpRough_CombineEigens2D"		%read{933,933} %write{2147483647,-1}
temp	int	$tmp370	%read{480,1062} %write{480,1062}
temp	int	$tmp371	%read{480,1062} %write{480,1062}
temp	int	$tmp372	%read{480,1062} %write{480,1062}
temp	int	$tmp373	%read{480,1062} %write{480,1062}
temp	int	$tmp374	%read{480,1062} %write{480,1062}
temp	int	$tmp375	%read{480,1062} %write{480,1062}
temp	int	$tmp376	%read{480,1062} %write{480,1062}
temp	int	$tmp377	%read{480,1062} %write{480,1062}
const	string	$const49	"_combineEigens2D"		%read{958,958} %write{2147483647,-1}
const	string	$const50	"_normalizeEigen2D"		%read{959,966} %write{2147483647,-1}
temp	int	$tmp378	%read{480,1062} %write{480,1062}
const	string	$const51	"_swapEigen2D"		%read{975,982} %write{2147483647,-1}
temp	int	$tmp379	%read{480,1062} %write{480,1062}
const	string	$const52	"_forceRhandEigen2D"		%read{987,1000} %write{2147483647,-1}
temp	normal	$tmp380	%read{480,1062} %write{480,1062}
temp	vector	$tmp381	%read{480,1062} %write{480,1062}
temp	float	$tmp382	%read{480,1062} %write{480,1062}
temp	int	$tmp383	%read{480,1062} %write{480,1062}
temp	normal	$tmp384	%read{480,1062} %write{480,1062}
temp	vector	$tmp385	%read{480,1062} %write{480,1062}
temp	float	$tmp386	%read{480,1062} %write{480,1062}
temp	int	$tmp387	%read{480,1062} %write{480,1062}
const	string	$const53	"_alignEigenB2D"		%read{1013,1013} %write{2147483647,-1}
temp	int	$tmp388	%read{2147483647,-1} %write{480,1062}
const	string	$const54	""		%read{1015,1015} %write{2147483647,-1}
const	string	$const55	"user:Bumprough_Use2016Mode"		%read{1015,1015} %write{2147483647,-1}
temp	int	$tmp389	%read{480,1062} %write{480,1062}
temp	float	$tmp390	%read{480,1062} %write{480,1062}
temp	int	$tmp391	%read{480,1062} %write{480,1062}
temp	float	$tmp392	%read{480,1062} %write{480,1062}
temp	int	$tmp393	%read{480,1062} %write{480,1062}
temp	vector	$tmp394	%read{480,1062} %write{480,1062}
temp	vector	$tmp395	%read{480,1062} %write{480,1062}
temp	vector	$tmp396	%read{480,1062} %write{480,1062}
temp	vector	$tmp397	%read{480,1062} %write{480,1062}
temp	normal	$tmp398	%read{480,1062} %write{480,1062}
temp	float	$tmp399	%read{480,1062} %write{480,1062}
temp	float	$tmp400	%read{480,1062} %write{480,1062}
temp	int	$tmp401	%read{2147483647,-1} %write{480,1062}
temp	float	$tmp402	%read{480,1062} %write{480,1062}
temp	float	$tmp403	%read{480,1062} %write{480,1062}
temp	int	$tmp404	%read{2147483647,-1} %write{480,1062}
temp	int	$tmp405	%read{1064,1064} %write{1063,1063}
temp	float	$tmp406	%read{1066,1066} %write{1065,1065}
temp	normal	$tmp407	%read{1067,1067} %write{1066,1066}
temp	int	$tmp408	%read{1077,1077} %write{1076,1076}
temp	float	$tmp409	%read{1087,1087} %write{1086,1086} %derivs
temp	float	$tmp410	%read{1122,1221} %write{1087,1087} %derivs
temp	float	$tmp411	%read{1089,1089} %write{1088,1088} %derivs
temp	float	$tmp412	%read{1112,1117} %write{1089,1089} %derivs
temp	float	$tmp413	%read{1095,1095} %write{1094,1094}
temp	vector	$tmp414	%read{1100,1100} %write{1099,1099}
temp	float	$tmp415	%read{1113,1113} %write{1112,1112} %derivs
temp	float	$tmp416	%read{1116,1116} %write{1113,1113} %derivs
temp	float	$tmp417	%read{1115,1115} %write{1114,1114} %derivs
temp	float	$tmp418	%read{1116,1116} %write{1115,1115} %derivs
temp	float	$tmp419	%read{1123,1123} %write{1122,1122}
temp	float	$tmp420	%read{1125,1125} %write{1124,1124}
temp	float	$tmp421	%read{1127,1127} %write{1126,1126}
temp	float	$tmp422	%read{1129,1129} %write{1128,1128}
temp	float	$tmp423	%read{1132,1132} %write{1130,1130}
temp	float	$tmp424	%read{1132,1132} %write{1131,1131}
temp	int	$tmp425	%read{1134,1134} %write{1133,1133}
temp	vector	$tmp426	%read{1137,1137} %write{1135,1135}
temp	vector	$tmp427	%read{1137,1137} %write{1136,1136}
temp	vector	$tmp428	%read{1138,1138} %write{1137,1137}
temp	vector	$tmp429	%read{1141,1141} %write{1139,1139}
temp	vector	$tmp430	%read{1141,1141} %write{1140,1140}
temp	vector	$tmp431	%read{1142,1142} %write{1141,1141}
temp	int	$tmp432	%read{1144,1144} %write{1143,1143}
temp	int	$tmp433	%read{1148,1148} %write{1147,1147}
temp	float	$tmp434	%read{1152,1152} %write{1151,1151}
temp	int	$tmp435	%read{1153,1153} %write{1152,1152}
temp	int	$tmp436	%read{1154,1158} %write{1153,1157}
temp	int	$tmp437	%read{1156,1156} %write{1155,1155}
temp	int	$tmp438	%read{1157,1157} %write{1156,1156}
temp	float	$tmp439	%read{1161,1161} %write{1160,1160}
temp	int	$tmp440	%read{1162,1162} %write{1161,1161}
temp	int	$tmp441	%read{1163,1167} %write{1162,1166}
temp	int	$tmp442	%read{1165,1165} %write{1164,1164}
temp	int	$tmp443	%read{1166,1166} %write{1165,1165}
temp	float	$tmp444	%read{1170,1170} %write{1169,1169}
temp	int	$tmp445	%read{1171,1171} %write{1170,1170}
temp	float	$tmp446	%read{1174,1174} %write{1173,1173}
temp	int	$tmp447	%read{1175,1175} %write{1174,1174}
temp	float	$tmp448	%read{1178,1178} %write{1177,1177}
temp	float	$tmp449	%read{1180,1180} %write{1179,1179}
temp	float	$tmp450	%read{1187,1187} %write{1185,1185}
temp	float	$tmp451	%read{1187,1187} %write{1186,1186}
temp	int	$tmp452	%read{1188,1188} %write{1187,1187}
temp	float	$tmp453	%read{1193,1193} %write{1191,1191}
temp	float	$tmp454	%read{1193,1193} %write{1192,1192}
temp	int	$tmp455	%read{1194,1194} %write{1193,1193}
temp	float	$tmp456	%read{1201,1201} %write{1199,1199}
temp	float	$tmp457	%read{1201,1201} %write{1200,1200}
temp	float	$tmp458	%read{1243,1243} %write{1242,1242}
temp	int	$tmp459	%read{1245,1245} %write{1244,1244}
temp	int	$tmp460	%read{1251,1254} %write{1250,1253}
temp	int	$tmp461	%read{1253,1253} %write{1252,1252}
temp	int	$tmp462	%read{1256,1256} %write{1255,1255}
temp	int	$tmp463	%read{1257,1261} %write{1256,1260}
temp	int	$tmp464	%read{1259,1259} %write{1258,1258}
temp	int	$tmp465	%read{1260,1260} %write{1259,1259}
temp	float	$tmp466	%read{1263,1263} %write{1262,1262}
temp	float	$tmp467	%read{1265,1265} %write{1264,1264}
temp	float	$tmp468	%read{1267,1267} %write{1266,1266}
temp	float	$tmp469	%read{1272,1272} %write{1271,1271}
temp	float	$tmp470	%read{1271,1271} %write{1269,1269}
temp	float	$tmp471	%read{1271,1271} %write{1270,1270}
temp	float	$tmp472	%read{1279,1279} %write{1278,1278}
temp	int	$tmp473	%read{1281,1281} %write{1280,1280}
temp	int	$tmp474	%read{1287,1290} %write{1286,1289}
temp	int	$tmp475	%read{1289,1289} %write{1288,1288}
temp	int	$tmp476	%read{1292,1292} %write{1291,1291}
temp	int	$tmp477	%read{1293,1297} %write{1292,1296}
temp	int	$tmp478	%read{1295,1295} %write{1294,1294}
temp	int	$tmp479	%read{1296,1296} %write{1295,1295}
temp	float	$tmp480	%read{1299,1299} %write{1298,1298}
temp	float	$tmp481	%read{1301,1301} %write{1300,1300}
temp	float	$tmp482	%read{1303,1303} %write{1302,1302}
temp	int	$tmp483	%read{1309,1309} %write{1308,1308}
temp	float	$tmp484	%read{1308,1308} %write{1307,1307}
temp	int	$tmp485	%read{1310,1317} %write{1309,1316}
temp	int	$tmp486	%read{1315,1315} %write{1314,1314}
temp	float	$tmp487	%read{1314,1314} %write{1313,1313}
temp	int	$tmp488	%read{1316,1316} %write{1315,1315}
temp	int	$tmp489	%read{1320,1320} %write{1319,1319}
temp	float	$tmp490	%read{1322,1322} %write{1321,1321}
temp	float	$tmp491	%read{1323,1323} %write{1322,1322}
temp	float	$tmp492	%read{1325,1325} %write{1324,1324}
temp	float	$tmp493	%read{1326,1326} %write{1325,1325}
temp	int	$tmp494	%read{1408,1408} %write{1407,1407}
temp	float	$tmp495	%read{1334,1334} %write{1333,1333}
temp	float	$tmp496	%read{1335,1335} %write{1334,1334}
temp	float	$tmp497	%read{1337,1337} %write{1336,1336}
temp	float	$tmp498	%read{1338,1338} %write{1337,1337}
temp	float	$tmp499	%read{1340,1340} %write{1339,1339}
temp	float	$tmp500	%read{1341,1341} %write{1340,1340}
temp	int	$tmp501	%read{1343,1343} %write{1342,1342}
temp	float	$tmp502	%read{1352,1352} %write{1349,1349}
temp	float	$tmp503	%read{1351,1351} %write{1350,1350}
temp	float	$tmp504	%read{1352,1352} %write{1351,1351}
temp	float	$tmp505	%read{1355,1355} %write{1352,1352}
temp	float	$tmp506	%read{1354,1354} %write{1353,1353}
temp	float	$tmp507	%read{1355,1355} %write{1354,1354}
temp	float	$tmp508	%read{1357,1357} %write{1355,1355}
temp	float	$tmp509	%read{1357,1357} %write{1356,1356}
temp	float	$tmp510	%read{1358,1358} %write{1357,1357}
temp	float	$tmp511	%read{1360,1360} %write{1359,1359}
temp	float	$tmp512	%read{1361,1361} %write{1360,1360}
temp	float	$tmp513	%read{1363,1363} %write{1362,1362}
temp	float	$tmp514	%read{1364,1364} %write{1363,1363}
temp	vector	$tmp515	%read{1368,1368} %write{1367,1367}
temp	float	$tmp516	%read{1366,1366} %write{1365,1365}
temp	float	$tmp517	%read{1367,1367} %write{1366,1366}
temp	vector	$tmp518	%read{1372,1372} %write{1371,1371}
temp	float	$tmp519	%read{1370,1370} %write{1369,1369}
temp	float	$tmp520	%read{1371,1371} %write{1370,1370}
temp	float	$tmp521	%read{1376,1376} %write{1375,1375}
temp	vector	$tmp522	%read{1379,1379} %write{1376,1376}
temp	float	$tmp523	%read{1378,1378} %write{1377,1377}
temp	vector	$tmp524	%read{1379,1379} %write{1378,1378}
temp	float	$tmp525	%read{1382,1382} %write{1381,1381}
temp	vector	$tmp526	%read{1385,1385} %write{1382,1382}
temp	float	$tmp527	%read{1384,1384} %write{1383,1383}
temp	vector	$tmp528	%read{1385,1385} %write{1384,1384}
temp	float	$tmp529	%read{1388,1388} %write{1387,1387}
temp	vector	$tmp530	%read{1391,1391} %write{1388,1388}
temp	float	$tmp531	%read{1390,1390} %write{1389,1389}
temp	vector	$tmp532	%read{1391,1391} %write{1390,1390}
temp	vector	$tmp533	%read{1392,1392} %write{1391,1391}
temp	vector	$tmp534	%read{1393,1393} %write{1392,1392}
temp	int	$tmp535	%read{1399,1399} %write{1398,1398}
temp	float	$tmp536	%read{1398,1398} %write{1397,1397}
temp	int	$tmp537	%read{1400,1407} %write{1399,1406}
temp	int	$tmp538	%read{1405,1405} %write{1404,1404}
temp	float	$tmp539	%read{1404,1404} %write{1403,1403}
temp	int	$tmp540	%read{1406,1406} %write{1405,1405}
temp	int	$tmp541	%read{1414,1414} %write{1413,1413}
temp	float	$tmp542	%read{1418,1418} %write{1417,1417}
temp	float	$tmp543	%read{1420,1420} %write{1419,1419}
temp	float	$tmp544	%read{1424,1424} %write{1422,1422}
temp	float	$tmp545	%read{1424,1424} %write{1423,1423}
temp	float	$tmp546	%read{1427,1427} %write{1425,1425}
temp	float	$tmp547	%read{1428,1428} %write{1427,1427}
temp	float	$tmp548	%read{1431,1431} %write{1429,1429}
temp	float	$tmp549	%read{1431,1431} %write{1430,1430}
temp	float	$tmp550	%read{1432,1432} %write{1431,1431}
temp	float	$tmp551	%read{1433,1433} %write{1432,1432}
temp	float	$tmp552	%read{1438,1438} %write{1437,1437}
temp	float	$tmp553	%read{1450,1450} %write{1448,1448}
temp	float	$tmp554	%read{1450,1450} %write{1449,1449}
temp	float	$tmp555	%read{1452,1452} %write{1451,1451}
temp	float	$tmp556	%read{1453,1453} %write{1452,1452}
temp	int	$tmp557	%read{1487,1487} %write{1486,1486}
temp	float	$tmp558	%read{1464,1464} %write{1462,1462}
temp	float	$tmp559	%read{1464,1464} %write{1463,1463}
temp	float	$tmp560	%read{1465,1465} %write{1464,1464}
temp	vector	$tmp561	%read{1468,1468} %write{1466,1466}
temp	vector	$tmp562	%read{1468,1468} %write{1467,1467}
temp	vector	$tmp563	%read{1469,1469} %write{1468,1468}
temp	vector	$tmp564	%read{1472,1472} %write{1470,1470}
temp	vector	$tmp565	%read{1472,1472} %write{1471,1471}
temp	vector	$tmp566	%read{1473,1473} %write{1472,1472}
temp	int	$tmp567	%read{1478,1478} %write{1477,1477}
temp	float	$tmp568	%read{1477,1477} %write{1476,1476}
temp	int	$tmp569	%read{1479,1486} %write{1478,1485}
temp	int	$tmp570	%read{1484,1484} %write{1483,1483}
temp	float	$tmp571	%read{1483,1483} %write{1482,1482}
temp	int	$tmp572	%read{1485,1485} %write{1484,1484}
temp	float	$tmp573	%read{1493,1493} %write{1492,1492}
temp	vector	$tmp574	%read{1498,1498} %write{1497,1497}
temp	float	$tmp575	%read{1511,1511} %write{1510,1510} %derivs
temp	float	$tmp576	%read{1514,1514} %write{1511,1511} %derivs
temp	float	$tmp577	%read{1513,1513} %write{1512,1512} %derivs
temp	float	$tmp578	%read{1514,1514} %write{1513,1513} %derivs
temp	float	$tmp579	%read{1521,1521} %write{1520,1520}
temp	float	$tmp580	%read{1523,1523} %write{1522,1522}
temp	float	$tmp581	%read{1525,1525} %write{1524,1524}
temp	float	$tmp582	%read{1527,1527} %write{1526,1526}
temp	float	$tmp583	%read{1530,1530} %write{1528,1528}
temp	float	$tmp584	%read{1530,1530} %write{1529,1529}
temp	int	$tmp585	%read{1532,1532} %write{1531,1531}
temp	vector	$tmp586	%read{1535,1535} %write{1533,1533}
temp	vector	$tmp587	%read{1535,1535} %write{1534,1534}
temp	vector	$tmp588	%read{1536,1536} %write{1535,1535}
temp	vector	$tmp589	%read{1539,1539} %write{1537,1537}
temp	vector	$tmp590	%read{1539,1539} %write{1538,1538}
temp	vector	$tmp591	%read{1540,1540} %write{1539,1539}
temp	int	$tmp592	%read{1542,1542} %write{1541,1541}
temp	int	$tmp593	%read{1546,1546} %write{1545,1545}
temp	float	$tmp594	%read{1550,1550} %write{1549,1549}
temp	int	$tmp595	%read{1551,1551} %write{1550,1550}
temp	int	$tmp596	%read{1552,1556} %write{1551,1555}
temp	int	$tmp597	%read{1554,1554} %write{1553,1553}
temp	int	$tmp598	%read{1555,1555} %write{1554,1554}
temp	float	$tmp599	%read{1559,1559} %write{1558,1558}
temp	int	$tmp600	%read{1560,1560} %write{1559,1559}
temp	int	$tmp601	%read{1561,1565} %write{1560,1564}
temp	int	$tmp602	%read{1563,1563} %write{1562,1562}
temp	int	$tmp603	%read{1564,1564} %write{1563,1563}
temp	float	$tmp604	%read{1568,1568} %write{1567,1567}
temp	int	$tmp605	%read{1569,1569} %write{1568,1568}
temp	float	$tmp606	%read{1572,1572} %write{1571,1571}
temp	int	$tmp607	%read{1573,1573} %write{1572,1572}
temp	float	$tmp608	%read{1576,1576} %write{1575,1575}
temp	float	$tmp609	%read{1578,1578} %write{1577,1577}
temp	float	$tmp610	%read{1585,1585} %write{1583,1583}
temp	float	$tmp611	%read{1585,1585} %write{1584,1584}
temp	int	$tmp612	%read{1586,1586} %write{1585,1585}
temp	float	$tmp613	%read{1591,1591} %write{1589,1589}
temp	float	$tmp614	%read{1591,1591} %write{1590,1590}
temp	int	$tmp615	%read{1592,1592} %write{1591,1591}
temp	float	$tmp616	%read{1599,1599} %write{1597,1597}
temp	float	$tmp617	%read{1599,1599} %write{1598,1598}
temp	float	$tmp618	%read{1641,1641} %write{1640,1640}
temp	int	$tmp619	%read{1643,1643} %write{1642,1642}
temp	int	$tmp620	%read{1649,1652} %write{1648,1651}
temp	int	$tmp621	%read{1651,1651} %write{1650,1650}
temp	int	$tmp622	%read{1654,1654} %write{1653,1653}
temp	int	$tmp623	%read{1655,1659} %write{1654,1658}
temp	int	$tmp624	%read{1657,1657} %write{1656,1656}
temp	int	$tmp625	%read{1658,1658} %write{1657,1657}
temp	float	$tmp626	%read{1661,1661} %write{1660,1660}
temp	float	$tmp627	%read{1663,1663} %write{1662,1662}
temp	float	$tmp628	%read{1665,1665} %write{1664,1664}
temp	float	$tmp629	%read{1670,1670} %write{1669,1669}
temp	float	$tmp630	%read{1669,1669} %write{1667,1667}
temp	float	$tmp631	%read{1669,1669} %write{1668,1668}
temp	float	$tmp632	%read{1677,1677} %write{1676,1676}
temp	int	$tmp633	%read{1679,1679} %write{1678,1678}
temp	int	$tmp634	%read{1685,1688} %write{1684,1687}
temp	int	$tmp635	%read{1687,1687} %write{1686,1686}
temp	int	$tmp636	%read{1690,1690} %write{1689,1689}
temp	int	$tmp637	%read{1691,1695} %write{1690,1694}
temp	int	$tmp638	%read{1693,1693} %write{1692,1692}
temp	int	$tmp639	%read{1694,1694} %write{1693,1693}
temp	float	$tmp640	%read{1697,1697} %write{1696,1696}
temp	float	$tmp641	%read{1699,1699} %write{1698,1698}
temp	float	$tmp642	%read{1701,1701} %write{1700,1700}
temp	int	$tmp643	%read{1707,1707} %write{1706,1706}
temp	float	$tmp644	%read{1706,1706} %write{1705,1705}
temp	int	$tmp645	%read{1708,1715} %write{1707,1714}
temp	int	$tmp646	%read{1713,1713} %write{1712,1712}
temp	float	$tmp647	%read{1712,1712} %write{1711,1711}
temp	int	$tmp648	%read{1714,1714} %write{1713,1713}
temp	int	$tmp649	%read{1718,1718} %write{1717,1717}
temp	float	$tmp650	%read{1720,1720} %write{1719,1719}
temp	float	$tmp651	%read{1721,1721} %write{1720,1720}
temp	float	$tmp652	%read{1723,1723} %write{1722,1722}
temp	float	$tmp653	%read{1724,1724} %write{1723,1723}
temp	int	$tmp654	%read{1806,1806} %write{1805,1805}
temp	float	$tmp655	%read{1732,1732} %write{1731,1731}
temp	float	$tmp656	%read{1733,1733} %write{1732,1732}
temp	float	$tmp657	%read{1735,1735} %write{1734,1734}
temp	float	$tmp658	%read{1736,1736} %write{1735,1735}
temp	float	$tmp659	%read{1738,1738} %write{1737,1737}
temp	float	$tmp660	%read{1739,1739} %write{1738,1738}
temp	int	$tmp661	%read{1741,1741} %write{1740,1740}
temp	float	$tmp662	%read{1750,1750} %write{1747,1747}
temp	float	$tmp663	%read{1749,1749} %write{1748,1748}
temp	float	$tmp664	%read{1750,1750} %write{1749,1749}
temp	float	$tmp665	%read{1753,1753} %write{1750,1750}
temp	float	$tmp666	%read{1752,1752} %write{1751,1751}
temp	float	$tmp667	%read{1753,1753} %write{1752,1752}
temp	float	$tmp668	%read{1755,1755} %write{1753,1753}
temp	float	$tmp669	%read{1755,1755} %write{1754,1754}
temp	float	$tmp670	%read{1756,1756} %write{1755,1755}
temp	float	$tmp671	%read{1758,1758} %write{1757,1757}
temp	float	$tmp672	%read{1759,1759} %write{1758,1758}
temp	float	$tmp673	%read{1761,1761} %write{1760,1760}
temp	float	$tmp674	%read{1762,1762} %write{1761,1761}
temp	vector	$tmp675	%read{1766,1766} %write{1765,1765}
temp	float	$tmp676	%read{1764,1764} %write{1763,1763}
temp	float	$tmp677	%read{1765,1765} %write{1764,1764}
temp	vector	$tmp678	%read{1770,1770} %write{1769,1769}
temp	float	$tmp679	%read{1768,1768} %write{1767,1767}
temp	float	$tmp680	%read{1769,1769} %write{1768,1768}
temp	float	$tmp681	%read{1774,1774} %write{1773,1773}
temp	vector	$tmp682	%read{1777,1777} %write{1774,1774}
temp	float	$tmp683	%read{1776,1776} %write{1775,1775}
temp	vector	$tmp684	%read{1777,1777} %write{1776,1776}
temp	float	$tmp685	%read{1780,1780} %write{1779,1779}
temp	vector	$tmp686	%read{1783,1783} %write{1780,1780}
temp	float	$tmp687	%read{1782,1782} %write{1781,1781}
temp	vector	$tmp688	%read{1783,1783} %write{1782,1782}
temp	float	$tmp689	%read{1786,1786} %write{1785,1785}
temp	vector	$tmp690	%read{1789,1789} %write{1786,1786}
temp	float	$tmp691	%read{1788,1788} %write{1787,1787}
temp	vector	$tmp692	%read{1789,1789} %write{1788,1788}
temp	vector	$tmp693	%read{1790,1790} %write{1789,1789}
temp	vector	$tmp694	%read{1791,1791} %write{1790,1790}
temp	int	$tmp695	%read{1797,1797} %write{1796,1796}
temp	float	$tmp696	%read{1796,1796} %write{1795,1795}
temp	int	$tmp697	%read{1798,1805} %write{1797,1804}
temp	int	$tmp698	%read{1803,1803} %write{1802,1802}
temp	float	$tmp699	%read{1802,1802} %write{1801,1801}
temp	int	$tmp700	%read{1804,1804} %write{1803,1803}
temp	int	$tmp701	%read{1812,1812} %write{1811,1811}
temp	float	$tmp702	%read{1816,1816} %write{1815,1815}
temp	float	$tmp703	%read{1818,1818} %write{1817,1817}
temp	float	$tmp704	%read{1822,1822} %write{1820,1820}
temp	float	$tmp705	%read{1822,1822} %write{1821,1821}
temp	float	$tmp706	%read{1825,1825} %write{1823,1823}
temp	float	$tmp707	%read{1826,1826} %write{1825,1825}
temp	float	$tmp708	%read{1829,1829} %write{1827,1827}
temp	float	$tmp709	%read{1829,1829} %write{1828,1828}
temp	float	$tmp710	%read{1830,1830} %write{1829,1829}
temp	float	$tmp711	%read{1831,1831} %write{1830,1830}
temp	float	$tmp712	%read{1836,1836} %write{1835,1835}
const	string	$const56	"bumpRoughComponents"		%read{1843,1843} %write{2147483647,-1}
temp	float	$tmp713	%read{1848,1848} %write{1847,1847}
temp	float	$tmp714	%read{1851,1851} %write{1849,1849}
temp	float	$tmp715	%read{1851,1851} %write{1850,1850}
temp	vector	$tmp716	%read{1855,1855} %write{1854,1854}
const	string	$const57	"RixAdjustNormal"		%read{1856,1856} %write{2147483647,-1}
temp	int	$tmp717	%read{1858,1858} %write{1857,1857}
temp	float	$tmp718	%read{1861,1861} %write{1860,1860}
temp	int	$tmp719	%read{1862,1862} %write{1861,1861}
temp	int	$tmp720	%read{1865,1865} %write{1864,1864}
const	float	$const58	1.00999999		%read{1866,1866} %write{2147483647,-1}
temp	float	$tmp721	%read{1867,1867} %write{1866,1866}
temp	float	$tmp722	%read{1868,1868} %write{1867,1867}
temp	vector	$tmp723	%read{1869,1869} %write{1868,1868}
const	string	$const59	"RixBlendWithNormal"		%read{1871,1871} %write{2147483647,-1}
temp	int	$tmp724	%read{1873,1873} %write{1872,1872}
temp	normal	$tmp725	%read{1875,1875} %write{1874,1874}
temp	int	$tmp726	%read{1877,1877} %write{1876,1876}
const	string	$const60	"surfgradFromPerturbedNormal"		%read{1878,1878} %write{2147483647,-1}
temp	vector	$tmp727	%read{1881,1881} %write{1880,1880}
temp	vector	$tmp728	%read{1884,1884} %write{1881,1881}
temp	float	$tmp729	%read{1884,1884} %write{1883,1883}
temp	float	$tmp730	%read{1883,1883} %write{1882,1882}
code manifoldMulti.Tn
# PxrBumpRoughness.osl:92
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.Tn $const2 $const1 	%filename{"PxrBumpRoughness.osl"} %line{92} %argrw{"wrr"}
	aassign		manifoldMulti.Tn $const3 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Tn $const4 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Tn $const5 $const1 	%argrw{"wrr"}
code manifoldMulti.Bn
# PxrBumpRoughness.osl:92
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.Bn $const2 $const1 	%filename{"PxrBumpRoughness.osl"} %line{92} %argrw{"wrr"}
	aassign		manifoldMulti.Bn $const3 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Bn $const4 $const1 	%argrw{"wrr"}
	aassign		manifoldMulti.Bn $const5 $const1 	%argrw{"wrr"}
code manifoldMulti.hextile0
# PxrBumpRoughness.osl:92
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile0 $const2 $const6 	%filename{"PxrBumpRoughness.osl"} %line{92} %argrw{"wrr"}
	aassign		manifoldMulti.hextile0 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile0 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile0 $const5 $const6 	%argrw{"wrr"}
code manifoldMulti.hextile1
# PxrBumpRoughness.osl:92
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile1 $const2 $const6 	%filename{"PxrBumpRoughness.osl"} %line{92} %argrw{"wrr"}
	aassign		manifoldMulti.hextile1 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile1 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile1 $const5 $const6 	%argrw{"wrr"}
code manifoldMulti.hextile2
# PxrBumpRoughness.osl:92
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile2 $const2 $const6 	%filename{"PxrBumpRoughness.osl"} %line{92} %argrw{"wrr"}
	aassign		manifoldMulti.hextile2 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile2 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile2 $const5 $const6 	%argrw{"wrr"}
code manifoldMulti.hextile3
# PxrBumpRoughness.osl:92
#     PxrManifoldMulti manifoldMulti = MULTIMANIFOLD_ZERO
	aassign		manifoldMulti.hextile3 $const2 $const6 	%filename{"PxrBumpRoughness.osl"} %line{92} %argrw{"wrr"}
	aassign		manifoldMulti.hextile3 $const3 $const6 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile3 $const4 $const7 	%argrw{"wrr"}
	aassign		manifoldMulti.hextile3 $const5 $const6 	%argrw{"wrr"}
code ___main___
# PxrBumpRoughness.osl:235
#     vector dPds = 0, dPdt = 0;
	assign		dPds $const2 	%filename{"PxrBumpRoughness.osl"} %line{235} %argrw{"wr"}
	assign		dPdt $const2 	%argrw{"wr"}
# PxrBumpRoughness.osl:236
#     vector vecD1 = 0, vecD2 = 0;
	assign		vecD1 $const2 	%line{236} %argrw{"wr"}
	assign		vecD2 $const2 	%argrw{"wr"}
# PxrBumpRoughness.osl:237
#     BumpRough br = NEUTRAL_BUMPROUGH;
	assign		br.l1 $const8 	%line{237} %argrw{"wr"}
	assign		br.l2 $const8 	%argrw{"wr"}
	assign		br.v1 $const9 	%argrw{"wr"}
	assign		br.v2 $const10 	%argrw{"wr"}
	assign		br.n N 	%argrw{"wr"}
# PxrBumpRoughness.osl:238
#     float resultBumpRoughPresence = 1.0;
	assign		resultBumpRoughPresence $const11 	%line{238} %argrw{"wr"}
# PxrBumpRoughness.osl:240
#     float textureRoughnessGain = 1.0;
	assign		textureRoughnessGain $const11 	%line{240} %argrw{"wr"}
# PxrBumpRoughness.osl:241
#     float _gainRw = gain * textureRoughnessGain;
	mul		_gainRw gain textureRoughnessGain 	%line{241} %argrw{"wrr"}
# PxrBumpRoughness.osl:242
#     float _bumpNormalGainRw = bumpNormalGain * textureRoughnessGain;
	mul		_bumpNormalGainRw bumpNormalGain textureRoughnessGain 	%line{242} %argrw{"wrr"}
# PxrBumpRoughness.osl:243
#     int isMulti = 0;
	assign		isMulti $const2 	%line{243} %argrw{"wr"}
# PxrBumpRoughness.osl:246
#     float inputS = s, inputT = invertT ? invertCoord(t) : t, inputW = 0;
	assign		inputS s 	%line{246} %argrw{"wr"}
	if		invertT 46 47 	%argrw{"r"}
	functioncall	$const12 46 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp25 t 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{48} %argrw{"wr"}
	add		$tmp26 $tmp25 $const11 	%argrw{"wrr"}
	floor		$tmp27 t 	%argrw{"wr"}
	sub		$tmp28 t $tmp27 	%argrw{"wrr"}
	sub		inputT $tmp26 $tmp28 	%argrw{"wrr"}
# PxrBumpRoughness.osl:246
#     float inputS = s, inputT = invertT ? invertCoord(t) : t, inputW = 0;
	assign		inputT t 	%filename{"PxrBumpRoughness.osl"} %line{246} %argrw{"wr"}
	assign		inputW $const2 	%argrw{"wr"}
# PxrBumpRoughness.osl:247
#     if (isconnected(manifold))
	isconnected	$tmp29 manifold 	%line{247} %argrw{"wr"}
	if		$tmp29 52 52 	%argrw{"r"}
# PxrBumpRoughness.osl:249
#         inputS = manifold.Q[0];
	compref		inputS manifold.Q $const2 	%line{249} %argrw{"wrr"}
# PxrBumpRoughness.osl:250
#         inputT = manifold.Q[1];
	compref		inputT manifold.Q $const3 	%line{250} %argrw{"wrr"}
# PxrBumpRoughness.osl:253
#     point Pos = P;
	assign		Pos P 	%line{253} %argrw{"wr"}
# PxrBumpRoughness.osl:254
#     if (useUndisplacedPosition) getattribute("primvar", "P", Pos);
	if		useUndisplacedPosition 55 55 	%line{254} %argrw{"r"}
	getattribute	$tmp30 $const13 $const14 Pos 	%argrw{"wrrw"}
# PxrBumpRoughness.osl:255
#     normal Nin = N;
	assign		Nin N 	%line{255} %argrw{"wr"}
# PxrBumpRoughness.osl:256
#     if (useUndisplacedPosition) getattribute("builtin", "Non", Nin);
	if		useUndisplacedPosition 58 58 	%line{256} %argrw{"r"}
	getattribute	$tmp31 $const15 $const16 Nin 	%argrw{"wrrw"}
# PxrBumpRoughness.osl:258
#     if (isconnected(manifoldMulti))
	isconnected	$tmp32 manifoldMulti 	%line{258} %argrw{"wr"}
	if		$tmp32 1076 1843 	%argrw{"r"}
# PxrBumpRoughness.osl:260
#         if (textureRoughness > 0.0)
	gt		$tmp33 textureRoughness $const17 	%line{260} %argrw{"wrr"}
	if		$tmp33 439 439 	%argrw{"r"}
# PxrBumpRoughness.osl:262
#             textureRoughnessGain = estimateRoughnessGain(b2r_texture, 0.0, 0.0,
	functioncall	$const18 439 	%line{262} %argrw{"r"}
# PxrBumpRoughness.osl:47
#     BumpRough textureBumpRough = NEUTRAL_BUMPROUGH;
	assign		___815_textureBumpRough.l1 $const8 	%line{47} %argrw{"wr"}
	assign		___815_textureBumpRough.l2 $const8 	%argrw{"wr"}
	assign		___815_textureBumpRough.v1 $const9 	%argrw{"wr"}
	assign		___815_textureBumpRough.v2 $const10 	%argrw{"wr"}
	assign		___815_textureBumpRough.n N 	%argrw{"wr"}
# PxrBumpRoughness.osl:48
#     vector vecD1 = 0, vecD2 = 0;
	assign		___815_vecD1 $const2 	%line{48} %argrw{"wr"}
	assign		___815_vecD2 $const2 	%argrw{"wr"}
# PxrBumpRoughness.osl:53
#                                         1e-04, floor(ss) + 0.5, floor(tt) + 0.5,
	floor		$tmp34 $const17 	%line{53} %argrw{"wr"}
	add		$tmp35 $tmp34 $const20 	%argrw{"wrr"}
	floor		$tmp36 $const17 	%argrw{"wr"}
	add		$tmp37 $tmp36 $const20 	%argrw{"wrr"}
# PxrBumpRoughness.osl:52
#     textureBumpRough = ReadBumpRough(b2r_texture,
	functioncall	$const23 429 	%line{52} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:633
#     float baseRoughnessSqr = baseRoughness * baseRoughness;
	mul		___808_baseRoughnessSqr $const19 $const19 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{633} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:636
#     ComputeOrthonormalTangentSpace(Nin, dPds, dPdt, U, V, W);
	functioncall	$const24 87 	%line{636} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:518
#     normal PN = cross(dPds, dPdt);
	cross		___804_PN dPdu dPdv 	%line{518} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:523
#     int lefthanded = dot(PN, Ng) < 0;
	dot		$tmp38 ___804_PN Ng 	%line{523} %argrw{"wrr"}
	lt		___804_lefthanded $tmp38 $const2 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:524
#     normal N_ = lefthanded ? -Nin : Nin;
	if		___804_lefthanded 82 83 	%line{524} %argrw{"r"}
	neg		___804_N_ Nin 	%argrw{"wr"}
	assign		___804_N_ Nin 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:526
#     U = normalize(cross(dPdt, N_));
	cross		$tmp39 dPdv ___804_N_ 	%line{526} %argrw{"wrr"}
	normalize	___808_U $tmp39 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:527
#     V = cross(N_, U);
	cross		___808_V ___804_N_ ___808_U 	%line{527} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:528
#     W = Nin;
	assign		___808_W Nin 	%line{528} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:639
#     BumpRough result = {baseRoughnessSqr, baseRoughnessSqr, U, V, W};
	assign		___808_result.l1 ___808_baseRoughnessSqr 	%line{639} %argrw{"wr"}
	assign		___808_result.l2 ___808_baseRoughnessSqr 	%argrw{"wr"}
	assign		___808_result.v1 ___808_U 	%argrw{"wr"}
	assign		___808_result.v2 ___808_V 	%argrw{"wr"}
	assign		___808_result.n ___808_W 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:641
#     int validDs = ReadBumpRoughTextures(filenameD1D2, inputS, inputT,
	functioncall	$const25 302 	%line{641} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:482
#     TxCoords coords = initTxCoords(inputS, inputT, 0, 1);
	functioncall	$const26 216 	%line{482} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:110
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 101 102 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{110} %argrw{"r"}
	functioncall	$const12 101 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp40 $tmp37 	%line{48} %argrw{"wr"}
	add		$tmp41 $tmp40 $const11 	%argrw{"wrr"}
	floor		$tmp42 $tmp37 	%argrw{"wr"}
	sub		$tmp43 $tmp37 $tmp42 	%argrw{"wrr"}
	sub		___656__tt $tmp41 $tmp43 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:110
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___656__tt $tmp37 	%line{110} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:111
#     float blur0 = 0.0;
	assign		___656_blur0 $const17 	%line{111} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:113
#     if (smoothRayDerivs)
	if		$const3 201 208 	%line{113} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:115
#         float du = length(dPdu);  // width of the ray hit footprint projected onto the dPdu direction
	length		___657_du dPdu 	%line{115} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:116
#         float dv = length(dPdv);  // width of the ray hit footprint projected onto the dPdv direction
	length		___657_dv dPdv 	%line{116} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#         float dsdu = Dx(ss) * du;  // change in s over ray hit footprint
	Dx		$tmp44 $tmp35 	%line{118} %argrw{"wr"} %argderivs{1}
	mul		___657_dsdu $tmp44 ___657_du 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#         float dsdv = Dy(ss) * dv;
	Dy		$tmp45 $tmp35 	%line{119} %argrw{"wr"} %argderivs{1}
	mul		___657_dsdv $tmp45 ___657_dv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#         float dtdu = Dx(_tt) * du;  // change in t over ray hit footprint
	Dx		$tmp46 ___656__tt 	%line{120} %argrw{"wr"} %argderivs{1}
	mul		___657_dtdu $tmp46 ___657_du 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:121
#         float dtdv = Dy(_tt) * dv;
	Dy		$tmp47 ___656__tt 	%line{121} %argrw{"wr"} %argderivs{1}
	mul		___657_dtdv $tmp47 ___657_dv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:148
#         float det = dsdu * dtdv - dtdu * dsdv;
	mul		$tmp48 ___657_dsdu ___657_dtdv 	%line{148} %argrw{"wrr"}
	mul		$tmp49 ___657_dtdu ___657_dsdv 	%argrw{"wrr"}
	sub		___657_det $tmp48 $tmp49 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:150
#         if (det != 0.0)
	neq		$tmp50 ___657_det $const17 	%line{150} %argrw{"wrr"}
	if		$tmp50 127 161 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:152
#             dPds = (dPdu*dtdv - dPdv*dtdu) / det;
	mul		$tmp51 dPdu ___657_dtdv 	%line{152} %argrw{"wrr"}
	mul		$tmp52 dPdv ___657_dtdu 	%argrw{"wrr"}
	sub		$tmp53 $tmp51 $tmp52 	%argrw{"wrr"}
	div		___657_dPds $tmp53 ___657_det 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#             dPdt = (dPdv*dsdu - dPdu*dsdv) / det;
	mul		$tmp54 dPdv ___657_dsdu 	%line{153} %argrw{"wrr"}
	mul		$tmp55 dPdu ___657_dsdv 	%argrw{"wrr"}
	sub		$tmp56 $tmp54 $tmp55 	%argrw{"wrr"}
	div		___657_dPdt $tmp56 ___657_det 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#             dPds = (dsdu != 0.0) ? (dPdu / dsdu) : vector(0.0);
	neq		$tmp57 ___657_dsdu $const17 	%line{157} %argrw{"wrr"}
	if		$tmp57 130 131 	%argrw{"r"}
	div		___657_dPds dPdu ___657_dsdu 	%argrw{"wrr"}
	assign		___657_dPds $const1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:158
#             dPdt = (dtdv != 0.0) ? (dPdv / dtdv) : vector(0.0);
	neq		$tmp58 ___657_dtdv $const17 	%line{158} %argrw{"wrr"}
	if		$tmp58 134 135 	%argrw{"r"}
	div		___657_dPdt dPdv ___657_dtdv 	%argrw{"wrr"}
	assign		___657_dPdt $const1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:160
#             if (length(dPds) == 0.0 && dsdv != 0.0) dPds = dPdv / dsdv;
	length		$tmp59 ___657_dPds 	%line{160} %argrw{"wr"}
	eq		$tmp60 $tmp59 $const17 	%argrw{"wrr"}
	neq		$tmp61 $tmp60 $const2 	%argrw{"wrr"}
	if		$tmp61 142 142 	%argrw{"r"}
	neq		$tmp62 ___657_dsdv $const17 	%argrw{"wrr"}
	neq		$tmp63 $tmp62 $const2 	%argrw{"wrr"}
	assign		$tmp61 $tmp63 	%argrw{"wr"}
	if		$tmp61 144 144 	%argrw{"r"}
	div		___657_dPds dPdv ___657_dsdv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:161
#             if (length(dPdt) == 0.0 && dtdu != 0.0) dPdt = dPdu / dtdu;
	length		$tmp64 ___657_dPdt 	%line{161} %argrw{"wr"}
	eq		$tmp65 $tmp64 $const17 	%argrw{"wrr"}
	neq		$tmp66 $tmp65 $const2 	%argrw{"wrr"}
	if		$tmp66 151 151 	%argrw{"r"}
	neq		$tmp67 ___657_dtdu $const17 	%argrw{"wrr"}
	neq		$tmp68 $tmp67 $const2 	%argrw{"wrr"}
	assign		$tmp66 $tmp68 	%argrw{"wr"}
	if		$tmp66 153 153 	%argrw{"r"}
	div		___657_dPdt dPdu ___657_dtdu 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#             if (length(dPds) == 0.0) dPds = dPdt;
	length		$tmp69 ___657_dPds 	%line{163} %argrw{"wr"}
	eq		$tmp70 $tmp69 $const17 	%argrw{"wrr"}
	if		$tmp70 157 157 	%argrw{"r"}
	assign		___657_dPds ___657_dPdt 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:164
#             if (length(dPdt) == 0.0) dPdt = dPds;
	length		$tmp71 ___657_dPdt 	%line{164} %argrw{"wr"}
	eq		$tmp72 $tmp71 $const17 	%argrw{"wrr"}
	if		$tmp72 161 161 	%argrw{"r"}
	assign		___657_dPdt ___657_dPds 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         float filterwidthS = 1.0 / length(dPds);
	length		$tmp73 ___657_dPds 	%line{170} %argrw{"wr"}
	div		___657_filterwidthS $const11 $tmp73 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         float filterwidthT = 1.0 / length(dPdt);
	length		$tmp74 ___657_dPdt 	%line{171} %argrw{"wr"}
	div		___657_filterwidthT $const11 $tmp74 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:176
#         float dxss = Dx(ss);
	Dx		___657_dxss $tmp35 	%line{176} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:177
#         float dxtt = Dx(_tt);
	Dx		___657_dxtt ___656__tt 	%line{177} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:178
#         float dyss = Dy(ss);
	Dy		___657_dyss $tmp35 	%line{178} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:179
#         float dytt = Dy(_tt);
	Dy		___657_dytt ___656__tt 	%line{179} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:181
#         float signS = (abs(dxss) > abs(dyss)) ? sign(dxss) : sign(dyss);  // dominant sign (+/-) for ds
	abs		$tmp75 ___657_dxss 	%line{181} %argrw{"wr"}
	abs		$tmp76 ___657_dyss 	%argrw{"wr"}
	gt		$tmp77 $tmp75 $tmp76 	%argrw{"wrr"}
	if		$tmp77 174 175 	%argrw{"r"}
	sign		___657_signS ___657_dxss 	%argrw{"wr"}
	sign		___657_signS ___657_dyss 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:182
#         float signT = (abs(dxtt) > abs(dytt)) ? sign(dxtt) : sign(dytt);  // dominant sign (+/-) for dt
	abs		$tmp78 ___657_dxtt 	%line{182} %argrw{"wr"}
	abs		$tmp79 ___657_dytt 	%argrw{"wr"}
	gt		$tmp80 $tmp78 $tmp79 	%argrw{"wrr"}
	if		$tmp80 180 181 	%argrw{"r"}
	sign		___657_signT ___657_dxtt 	%argrw{"wr"}
	sign		___657_signT ___657_dytt 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:184
#         filterwidthS *= signS;
	mul		___657_filterwidthS ___657_filterwidthS ___657_signS 	%line{184} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#         filterwidthT *= signT;
	mul		___657_filterwidthT ___657_filterwidthT ___657_signT 	%line{185} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#         int unmixedDerivsAreDominant = (abs(dxss) > abs(dyss));
	abs		$tmp81 ___657_dxss 	%line{187} %argrw{"wr"}
	abs		$tmp82 ___657_dyss 	%argrw{"wr"}
	gt		___657_unmixedDerivsAreDominant $tmp81 $tmp82 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:188
#         if (unmixedDerivsAreDominant)
	if		___657_unmixedDerivsAreDominant 194 201 	%line{188} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:190
#             coords = TxCoords( ss, _tt, filterwidthS, 0.0, 0.0, filterwidthT, blur0 );
	assign		___656_coords.s $tmp35 	%line{190} %argrw{"wr"}
	assign		___656_coords.t ___656__tt 	%argrw{"wr"}
	assign		___656_coords.dsdx ___657_filterwidthS 	%argrw{"wr"}
	assign		___656_coords.dtdx $const17 	%argrw{"wr"}
	assign		___656_coords.dsdy $const17 	%argrw{"wr"}
	assign		___656_coords.dtdy ___657_filterwidthT 	%argrw{"wr"}
	assign		___656_coords.blur ___656_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:194
#             coords = TxCoords( ss, _tt, 0.0, filterwidthT, filterwidthS, 0.0, blur0 );
	assign		___656_coords.s $tmp35 	%line{194} %argrw{"wr"}
	assign		___656_coords.t ___656__tt 	%argrw{"wr"}
	assign		___656_coords.dsdx $const17 	%argrw{"wr"}
	assign		___656_coords.dtdx ___657_filterwidthT 	%argrw{"wr"}
	assign		___656_coords.dsdy ___657_filterwidthS 	%argrw{"wr"}
	assign		___656_coords.dtdy $const17 	%argrw{"wr"}
	assign		___656_coords.blur ___656_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:200
#         coords = TxCoords( ss, _tt, Dx(ss), Dx(_tt), Dy(ss), Dy(_tt), blur0 );
	assign		___656_coords.s $tmp35 	%line{200} %argrw{"wr"}
	assign		___656_coords.t ___656__tt 	%argrw{"wr"}
	Dx		___656_coords.dsdx $tmp35 	%argrw{"wr"} %argderivs{1}
	Dx		___656_coords.dtdx ___656__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___656_coords.dsdy $tmp35 	%argrw{"wr"} %argderivs{1}
	Dy		___656_coords.dtdy ___656__tt 	%argrw{"wr"} %argderivs{1}
	assign		___656_coords.blur ___656_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:203
#     return coords;
	assign		___803_coords.s ___656_coords.s 	%line{203} %argrw{"wr"}
	assign		___803_coords.t ___656_coords.t 	%argrw{"wr"}
	assign		___803_coords.dsdx ___656_coords.dsdx 	%argrw{"wr"}
	assign		___803_coords.dtdx ___656_coords.dtdx 	%argrw{"wr"}
	assign		___803_coords.dsdy ___656_coords.dsdy 	%argrw{"wr"}
	assign		___803_coords.dtdy ___656_coords.dtdy 	%argrw{"wr"}
	assign		___803_coords.blur ___656_coords.blur 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:483
#     TxParams params = {0, textureBlur, color(0), 0.0, textureFilter, textureFilterScale};
	assign		___803_params.firstchannel $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{483} %argrw{"wr"}
	assign		___803_params.blur $const22 	%argrw{"wr"}
	assign		___803_params.missingcolor $const27 	%argrw{"wr"}
	assign		___803_params.missingalpha $const17 	%argrw{"wr"}
	assign		___803_params.interp $const21 	%argrw{"wr"}
	assign		___803_params.width $const22 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:488
#     d1 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 253 	%line{488} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:325
#     int success = 0;
	assign		___679_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{325} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:326
#     int nchannels = 0;
	assign		___679_nchannels $const2 	%line{326} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:327
#     color finalResult = 0;
	assign		___679_finalResult $const2 	%line{327} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:333
#                            "blur", max(coords.blur, params.blur),
	max		$tmp83 ___803_coords.blur ___803_params.blur 	%line{333} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:329
#     color result = texture(filename,
	texture		___679_result b2r_texture ___803_coords.s ___803_coords.t ___803_coords.dsdx ___803_coords.dtdx ___803_coords.dsdy ___803_coords.dtdy $const29 ___803_params.firstchannel $const30 $tmp83 $const31 ___803_params.missingcolor $const32 ___803_params.interp $const33 ___803_params.width 	%line{329} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:339
#     if (result == params.missingcolor) return result;
	eq		$tmp84 ___679_result ___803_params.missingcolor 	%line{339} %argrw{"wrr"}
	if		$tmp84 232 232 	%argrw{"r"}
	assign		___815_vecD1 ___679_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:342
#     finalResult = result;
	assign		___679_finalResult ___679_result 	%line{342} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:345
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___679_success b2r_texture $const34 ___679_nchannels 	%line{345} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:346
#     if (success && nchannels)
	neq		$tmp85 ___679_success $const2 	%line{346} %argrw{"wrr"}
	if		$tmp85 238 238 	%argrw{"r"}
	neq		$tmp86 ___679_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp85 $tmp86 	%argrw{"wr"}
	if		$tmp85 252 252 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:348
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp87 ___679_nchannels $const3 	%line{348} %argrw{"wrr"}
	neq		$tmp88 $tmp87 $const2 	%argrw{"wrr"}
	if		$tmp88 242 245 	%argrw{"r"}
	eq		$tmp89 ___679_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp90 $tmp89 $const2 	%argrw{"wrr"}
	assign		$tmp88 $tmp90 	%argrw{"wr"}
	if		$tmp88 252 252 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:351
#             finalResult[0] = result[0];
	compref		$tmp91 ___679_result $const2 	%line{351} %argrw{"wrr"}
	compassign	___679_finalResult $const2 $tmp91 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:352
#             finalResult[1] = result[0];
	compref		$tmp92 ___679_result $const2 	%line{352} %argrw{"wrr"}
	compassign	___679_finalResult $const3 $tmp92 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:353
#             finalResult[2] = result[0];
	compref		$tmp93 ___679_result $const2 	%line{353} %argrw{"wrr"}
	compassign	___679_finalResult $const4 $tmp93 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:357
#     return finalResult;
	assign		___815_vecD1 ___679_finalResult 	%line{357} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:489
#     d1[2] = max(d1[0], d1[1]);
	compref		$tmp95 ___815_vecD1 $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{489} %argrw{"wrr"}
	compref		$tmp96 ___815_vecD1 $const3 	%argrw{"wrr"}
	max		$tmp94 $tmp95 $tmp96 	%argrw{"wrr"}
	compassign	___815_vecD1 $const4 $tmp94 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:491
#     params.firstchannel = 2;
	assign		___803_params.firstchannel $const4 	%line{491} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:492
#     d2 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 289 	%line{492} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:325
#     int success = 0;
	assign		___679_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{325} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:326
#     int nchannels = 0;
	assign		___679_nchannels $const2 	%line{326} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:327
#     color finalResult = 0;
	assign		___679_finalResult $const2 	%line{327} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:333
#                            "blur", max(coords.blur, params.blur),
	max		$tmp97 ___803_coords.blur ___803_params.blur 	%line{333} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:329
#     color result = texture(filename,
	texture		___679_result b2r_texture ___803_coords.s ___803_coords.t ___803_coords.dsdx ___803_coords.dtdx ___803_coords.dsdy ___803_coords.dtdy $const29 ___803_params.firstchannel $const30 $tmp97 $const31 ___803_params.missingcolor $const32 ___803_params.interp $const33 ___803_params.width 	%line{329} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:339
#     if (result == params.missingcolor) return result;
	eq		$tmp98 ___679_result ___803_params.missingcolor 	%line{339} %argrw{"wrr"}
	if		$tmp98 268 268 	%argrw{"r"}
	assign		___815_vecD2 ___679_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:342
#     finalResult = result;
	assign		___679_finalResult ___679_result 	%line{342} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:345
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___679_success b2r_texture $const34 ___679_nchannels 	%line{345} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:346
#     if (success && nchannels)
	neq		$tmp99 ___679_success $const2 	%line{346} %argrw{"wrr"}
	if		$tmp99 274 274 	%argrw{"r"}
	neq		$tmp100 ___679_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp99 $tmp100 	%argrw{"wr"}
	if		$tmp99 288 288 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:348
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp101 ___679_nchannels $const3 	%line{348} %argrw{"wrr"}
	neq		$tmp102 $tmp101 $const2 	%argrw{"wrr"}
	if		$tmp102 278 281 	%argrw{"r"}
	eq		$tmp103 ___679_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp104 $tmp103 $const2 	%argrw{"wrr"}
	assign		$tmp102 $tmp104 	%argrw{"wr"}
	if		$tmp102 288 288 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:351
#             finalResult[0] = result[0];
	compref		$tmp105 ___679_result $const2 	%line{351} %argrw{"wrr"}
	compassign	___679_finalResult $const2 $tmp105 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:352
#             finalResult[1] = result[0];
	compref		$tmp106 ___679_result $const2 	%line{352} %argrw{"wrr"}
	compassign	___679_finalResult $const3 $tmp106 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:353
#             finalResult[2] = result[0];
	compref		$tmp107 ___679_result $const2 	%line{353} %argrw{"wrr"}
	compassign	___679_finalResult $const4 $tmp107 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:357
#     return finalResult;
	assign		___815_vecD2 ___679_finalResult 	%line{357} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	functioncall	$const35 293 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{494} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp109 ___815_vecD1 ___815_vecD1 	%line{62} %argrw{"wrr"}
	ge		$tmp108 $tmp109 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp110 $tmp108 $const2 	%line{494} %argrw{"wrr"}
	if		$tmp110 301 301 	%argrw{"r"}
	functioncall	$const35 299 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp112 ___815_vecD2 ___815_vecD2 	%line{62} %argrw{"wrr"}
	ge		$tmp111 $tmp112 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp113 $tmp111 $const2 	%line{494} %argrw{"wrr"}
	assign		$tmp110 $tmp113 	%argrw{"wr"}
	assign		___808_validDs $tmp110 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#     if (validDs)
	if		___808_validDs 424 424 	%line{644} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:648
#         if (invertBumpNormal == 0) {
	eq		$tmp114 $const2 $const2 	%line{648} %argrw{"wrr"}
	if		$tmp114 311 311 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:649
#             d1[0] = -d1[0];
	compref		$tmp115 ___815_vecD1 $const2 	%line{649} %argrw{"wrr"}
	neg		$tmp116 $tmp115 	%argrw{"wr"}
	compassign	___815_vecD1 $const2 $tmp116 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:650
#             d1[1] = -d1[1];
	compref		$tmp117 ___815_vecD1 $const3 	%line{650} %argrw{"wrr"}
	neg		$tmp118 $tmp117 	%argrw{"wr"}
	compassign	___815_vecD1 $const3 $tmp118 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	functioncall	$const37 392 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:542
#     float dx = d1[0];
	compref		___805_dx ___815_vecD1 $const2 	%line{542} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:543
#     float dy = d1[1];
	compref		___805_dy ___815_vecD1 $const3 	%line{543} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:544
#     float dxdx = d2[0];
	compref		___805_dxdx ___815_vecD2 $const2 	%line{544} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:545
#     float dydy = d2[1];
	compref		___805_dydy ___815_vecD2 $const3 	%line{545} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:546
#     float dxdy = d2[2];
	compref		___805_dxdy ___815_vecD2 $const4 	%line{546} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:554
#     float sxx = 2.0 * (dxdx - dx*dx);
	mul		$tmp120 ___805_dx ___805_dx 	%line{554} %argrw{"wrr"}
	sub		$tmp121 ___805_dxdx $tmp120 	%argrw{"wrr"}
	mul		___805_sxx $const38 $tmp121 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:555
#     float sxy = 2.0 * (dxdy - dx*dy);
	mul		$tmp122 ___805_dx ___805_dy 	%line{555} %argrw{"wrr"}
	sub		$tmp123 ___805_dxdy $tmp122 	%argrw{"wrr"}
	mul		___805_sxy $const38 $tmp123 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:556
#     float syy = 2.0 * (dydy - dy*dy);
	mul		$tmp124 ___805_dy ___805_dy 	%line{556} %argrw{"wrr"}
	sub		$tmp125 ___805_dydy $tmp124 	%argrw{"wrr"}
	mul		___805_syy $const38 $tmp125 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:558
#     if (varianceGain != 1.0) {
	neq		$tmp126 $const11 $const11 	%line{558} %argrw{"wrr"}
	if		$tmp126 332 332 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:559
#         float varianceGainSqr = varianceGain * varianceGain;
	mul		___806_varianceGainSqr $const11 $const11 	%line{559} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:560
#         sxx *= varianceGainSqr;
	mul		___805_sxx ___805_sxx ___806_varianceGainSqr 	%line{560} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:561
#         sxy *= varianceGainSqr;
	mul		___805_sxy ___805_sxy ___806_varianceGainSqr 	%line{561} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:562
#         syy *= varianceGainSqr;
	mul		___805_syy ___805_syy ___806_varianceGainSqr 	%line{562} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:569
#     BumpRough_CovarToEigen2D(sxx, sxy, syy, l1, l2, v1, v2);
	functioncall	$const39 357 	%line{569} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:219
#     float del = sqrt(a*a + 4.0*b*b - 2.0*a*c + c*c);
	mul		$tmp127 ___805_sxx ___805_sxx 	%line{219} %argrw{"wrr"}
	mul		$tmp128 $const40 ___805_sxy 	%argrw{"wrr"}
	mul		$tmp129 $tmp128 ___805_sxy 	%argrw{"wrr"}
	add		$tmp130 $tmp127 $tmp129 	%argrw{"wrr"}
	mul		$tmp131 $const38 ___805_sxx 	%argrw{"wrr"}
	mul		$tmp132 $tmp131 ___805_syy 	%argrw{"wrr"}
	sub		$tmp133 $tmp130 $tmp132 	%argrw{"wrr"}
	mul		$tmp134 ___805_syy ___805_syy 	%argrw{"wrr"}
	add		$tmp135 $tmp133 $tmp134 	%argrw{"wrr"}
	sqrt		___783_del $tmp135 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:222
#     l1 = 0.5 * (a + c + del);
	add		$tmp136 ___805_sxx ___805_syy 	%line{222} %argrw{"wrr"}
	add		$tmp137 $tmp136 ___783_del 	%argrw{"wrr"}
	mul		___805_l1 $const20 $tmp137 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:223
#     l2 = 0.5 * (a + c - del);
	add		$tmp138 ___805_sxx ___805_syy 	%line{223} %argrw{"wrr"}
	sub		$tmp139 $tmp138 ___783_del 	%argrw{"wrr"}
	mul		___805_l2 $const20 $tmp139 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:226
#     v1 = normalize(vector((l1 - c)/b, 1.0, 0.0));
	sub		$tmp141 ___805_l1 ___805_syy 	%line{226} %argrw{"wrr"}
	div		$tmp142 $tmp141 ___805_sxy 	%argrw{"wrr"}
	vector		$tmp140 $tmp142 $const11 $const17 	%argrw{"wrrr"}
	normalize	___805_v1 $tmp140 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:227
#     v2 = normalize(vector((l2 - c)/b, 1.0, 0.0));
	sub		$tmp144 ___805_l2 ___805_syy 	%line{227} %argrw{"wrr"}
	div		$tmp145 $tmp144 ___805_sxy 	%argrw{"wrr"}
	vector		$tmp143 $tmp145 $const11 $const17 	%argrw{"wrrr"}
	normalize	___805_v2 $tmp143 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:572
#     bumpRough.l1 = l1;
	assign		___808_result.l1 ___805_l1 	%line{572} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:573
#     bumpRough.l2 = l2;
	assign		___808_result.l2 ___805_l2 	%line{573} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     bumpRough.v1 = U * v1[0] + V * v1[1];
	compref		$tmp146 ___805_v1 $const2 	%line{578} %argrw{"wrr"}
	mul		$tmp147 ___808_U $tmp146 	%argrw{"wrr"}
	compref		$tmp148 ___805_v1 $const3 	%argrw{"wrr"}
	mul		$tmp149 ___808_V $tmp148 	%argrw{"wrr"}
	add		___808_result.v1 $tmp147 $tmp149 	%argrw{"wrr"}
	assign		___808_result.v1 ___808_result.v1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:579
#     bumpRough.v2 = U * v2[0] + V * v2[1];
	compref		$tmp150 ___805_v2 $const2 	%line{579} %argrw{"wrr"}
	mul		$tmp151 ___808_U $tmp150 	%argrw{"wrr"}
	compref		$tmp152 ___805_v2 $const3 	%argrw{"wrr"}
	mul		$tmp153 ___808_V $tmp152 	%argrw{"wrr"}
	add		___808_result.v2 $tmp151 $tmp153 	%argrw{"wrr"}
	assign		___808_result.v2 ___808_result.v2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	mul		$tmp154 $const11 ___805_dx 	%line{582} %argrw{"wrr"}
	mul		$tmp155 $tmp154 ___808_U 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	mul		$tmp156 $const11 ___805_dy 	%line{583} %argrw{"wrr"}
	mul		$tmp157 $tmp156 ___808_V 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	add		$tmp158 $tmp155 $tmp157 	%line{582} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	add		$tmp159 $tmp158 ___808_W 	%line{583} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	normalize	___808_result.n $tmp159 	%line{582} %argrw{"wr"}
	assign		___808_result.n ___808_result.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	functioncall	$const35 383 	%line{586} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp161 ___808_result.v1 ___808_result.v1 	%line{62} %argrw{"wrr"}
	ge		$tmp160 $tmp161 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp162 $tmp160 $const2 	%line{586} %argrw{"wrr"}
	if		$tmp162 391 391 	%argrw{"r"}
	functioncall	$const35 389 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp164 ___808_result.v2 ___808_result.v2 	%line{62} %argrw{"wrr"}
	ge		$tmp163 $tmp164 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp165 $tmp163 $const2 	%line{586} %argrw{"wrr"}
	assign		$tmp162 $tmp165 	%argrw{"wr"}
	assign		$tmp119 $tmp162 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	if		$tmp119 424 424 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:659
#             result.l1 += baseRoughnessSqr;
	add		___808_result.l1 ___808_result.l1 ___808_baseRoughnessSqr 	%line{659} %argrw{"wrr"}
	assign		___808_result.l1 ___808_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:660
#             result.l2 += baseRoughnessSqr;
	add		___808_result.l2 ___808_result.l2 ___808_baseRoughnessSqr 	%line{660} %argrw{"wrr"}
	assign		___808_result.l2 ___808_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:662
#             if (anisotropyGain != 1.0) {
	neq		$tmp166 $const11 $const11 	%line{662} %argrw{"wrr"}
	if		$tmp166 424 424 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:663
#                 BumpRoughAnisotropyAdjust(anisotropyGain, result);
	functioncall	$const41 424 	%line{663} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:596
#     float eps = 1.e-12;
	assign		___807_eps $const42 	%line{596} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:597
#     float roughnessU = sqrt(bumpRough.l1) + eps;
	sqrt		$tmp167 ___808_result.l1 	%line{597} %argrw{"wr"}
	add		___807_roughnessU $tmp167 ___807_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:598
#     float roughnessV = sqrt(bumpRough.l2) + eps;
	sqrt		$tmp168 ___808_result.l2 	%line{598} %argrw{"wr"}
	add		___807_roughnessV $tmp168 ___807_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:600
#     float ratio = roughnessU / roughnessV;
	div		___807_ratio ___807_roughnessU ___807_roughnessV 	%line{600} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:601
#     float anisotropy = (ratio - 1.0) / (ratio + 1.0);
	sub		$tmp169 ___807_ratio $const11 	%line{601} %argrw{"wrr"}
	add		$tmp170 ___807_ratio $const11 	%argrw{"wrr"}
	div		___807_anisotropy $tmp169 $tmp170 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:603
#     anisotropy = clamp(anisotropy * anisotropyGain, 0.0, 1.0);
	mul		$tmp171 ___807_anisotropy $const11 	%line{603} %argrw{"wrr"}
	functioncall	$const43 413 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp172 $tmp171 $const11 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___807_anisotropy $tmp172 $const17 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:605
#     float alpha = 1.0 / (anisotropy*anisotropy - 2.0 * anisotropy + 2.0);
	mul		$tmp173 ___807_anisotropy ___807_anisotropy 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{605} %argrw{"wrr"}
	mul		$tmp174 $const38 ___807_anisotropy 	%argrw{"wrr"}
	sub		$tmp175 $tmp173 $tmp174 	%argrw{"wrr"}
	add		$tmp176 $tmp175 $const38 	%argrw{"wrr"}
	div		___807_alpha $const11 $tmp176 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:607
#     float variance = bumpRough.l1 + bumpRough.l2;
	add		___807_variance ___808_result.l1 ___808_result.l2 	%line{607} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:609
#     bumpRough.l1 = variance * alpha;
	mul		___808_result.l1 ___807_variance ___807_alpha 	%line{609} %argrw{"wrr"}
	assign		___808_result.l1 ___808_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:610
#     bumpRough.l2 = variance * (1.0 - alpha);
	sub		$tmp177 $const11 ___807_alpha 	%line{610} %argrw{"wrr"}
	mul		___808_result.l2 ___807_variance $tmp177 	%argrw{"wrr"}
	assign		___808_result.l2 ___808_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:668
#     return result;
	assign		___815_textureBumpRough.l1 ___808_result.l1 	%line{668} %argrw{"wr"}
	assign		___815_textureBumpRough.l2 ___808_result.l2 	%argrw{"wr"}
	assign		___815_textureBumpRough.v1 ___808_result.v1 	%argrw{"wr"}
	assign		___815_textureBumpRough.v2 ___808_result.v2 	%argrw{"wr"}
	assign		___815_textureBumpRough.n ___808_result.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:58
#     float textureRoughnessU = sqrt(textureBumpRough.l1);
	sqrt		___815_textureRoughnessU ___815_textureBumpRough.l1 	%filename{"PxrBumpRoughness.osl"} %line{58} %argrw{"wr"}
# PxrBumpRoughness.osl:59
#     float textureRoughnessV = sqrt(textureBumpRough.l2);
	sqrt		___815_textureRoughnessV ___815_textureBumpRough.l2 	%line{59} %argrw{"wr"}
# PxrBumpRoughness.osl:60
#     float rudivrv = textureRoughnessU/textureRoughnessV;
	div		___815_rudivrv ___815_textureRoughnessU ___815_textureRoughnessV 	%line{60} %argrw{"wrr"}
# PxrBumpRoughness.osl:62
#     float textureAnisotropy = (rudivrv-1.0)/(rudivrv+1.0);
	sub		$tmp178 ___815_rudivrv $const11 	%line{62} %argrw{"wrr"}
	add		$tmp179 ___815_rudivrv $const11 	%argrw{"wrr"}
	div		___815_textureAnisotropy $tmp178 $tmp179 	%argrw{"wrr"}
# PxrBumpRoughness.osl:63
#     float textureRoughnessGain = textureRoughness / (textureRoughnessU / (1 + textureAnisotropy));
	add		$tmp180 $const11 ___815_textureAnisotropy 	%line{63} %argrw{"wrr"}
	div		$tmp181 ___815_textureRoughnessU $tmp180 	%argrw{"wrr"}
	div		___815_textureRoughnessGain textureRoughness $tmp181 	%argrw{"wrr"}
# PxrBumpRoughness.osl:68
#     return textureRoughnessGain;
	assign		textureRoughnessGain ___815_textureRoughnessGain 	%line{68} %argrw{"wr"}
# PxrBumpRoughness.osl:265
#         point sta[3] = {manifoldMulti.stAlpha0,
	aassign		___817_sta $const2 manifoldMulti.stAlpha0 	%line{265} %argrw{"wrr"}
	aassign		___817_sta $const3 manifoldMulti.stAlpha1 	%argrw{"wrr"}
	aassign		___817_sta $const4 manifoldMulti.stAlpha2 	%argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aref		$tmp182 manifoldMulti.hextile0 $const2 	%line{268} %argrw{"wrr"}
	aassign		___817_hex.s $const2 $tmp182 	%argrw{"wrr"}
	aref		$tmp183 manifoldMulti.hextile0 $const3 	%argrw{"wrr"}
	aassign		___817_hex.t $const2 $tmp183 	%argrw{"wrr"}
	aref		$tmp184 manifoldMulti.hextile0 $const4 	%argrw{"wrr"}
	aassign		___817_hex.w $const2 $tmp184 	%argrw{"wrr"}
	aref		$tmp185 manifoldMulti.hextile0 $const5 	%argrw{"wrr"}
	aassign		___817_hex.r $const2 $tmp185 	%argrw{"wrr"}
# PxrBumpRoughness.osl:269
#                               FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp186 manifoldMulti.hextile1 $const2 	%line{269} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___817_hex.s $const3 $tmp186 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:269
#                               FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp187 manifoldMulti.hextile1 $const3 	%line{269} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___817_hex.t $const3 $tmp187 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:269
#                               FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp188 manifoldMulti.hextile1 $const4 	%line{269} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___817_hex.w $const3 $tmp188 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:269
#                               FromFlatHexTileData(manifoldMulti.hextile1),
	aref		$tmp189 manifoldMulti.hextile1 $const5 	%line{269} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___817_hex.r $const3 $tmp189 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:270
#                               FromFlatHexTileData(manifoldMulti.hextile2)};
	aref		$tmp190 manifoldMulti.hextile2 $const2 	%line{270} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___817_hex.s $const4 $tmp190 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:270
#                               FromFlatHexTileData(manifoldMulti.hextile2)};
	aref		$tmp191 manifoldMulti.hextile2 $const3 	%line{270} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___817_hex.t $const4 $tmp191 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:270
#                               FromFlatHexTileData(manifoldMulti.hextile2)};
	aref		$tmp192 manifoldMulti.hextile2 $const4 	%line{270} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___817_hex.w $const4 $tmp192 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:270
#                               FromFlatHexTileData(manifoldMulti.hextile2)};
	aref		$tmp193 manifoldMulti.hextile2 $const5 	%line{270} %argrw{"wrr"}
# PxrBumpRoughness.osl:268
#         HexTileData hex[3] = {FromFlatHexTileData(manifoldMulti.hextile0),
	aassign		___817_hex.r $const4 $tmp193 	%line{268} %argrw{"wrr"}
# PxrBumpRoughness.osl:271
#         int numProj = manifoldMulti.minNumTextures;
	assign		___817_numProj manifoldMulti.minNumTextures 	%line{271} %argrw{"wr"}
# PxrBumpRoughness.osl:273
#         BumpRough resultBumpRough = NEUTRAL_BUMPROUGH;
	assign		___817_resultBumpRough.l1 $const8 	%line{273} %argrw{"wr"}
	assign		___817_resultBumpRough.l2 $const8 	%argrw{"wr"}
	assign		___817_resultBumpRough.v1 $const9 	%argrw{"wr"}
	assign		___817_resultBumpRough.v2 $const10 	%argrw{"wr"}
	assign		___817_resultBumpRough.n N 	%argrw{"wr"}
# PxrBumpRoughness.osl:274
#         float resultBumpRoughPresence = 1.0;
	assign		___817_resultBumpRoughPresence $const11 	%line{274} %argrw{"wr"}
# PxrBumpRoughness.osl:279
#         vector Nc = resultBumpRough.n;
	assign		___817_Nc ___817_resultBumpRough.n 	%line{279} %argrw{"wr"}
# PxrBumpRoughness.osl:280
#         resultBumpRough.n = -resultBumpRough.n;
	neg		___817_resultBumpRough.n ___817_resultBumpRough.n 	%line{280} %argrw{"wr"}
	assign		___817_resultBumpRough.n ___817_resultBumpRough.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:281
#         float wvdenom = 0.0, sqwaccum = 0.0;
	assign		___817_wvdenom $const17 	%line{281} %argrw{"wr"}
	assign		___817_sqwaccum $const17 	%argrw{"wr"}
# PxrBumpRoughness.osl:283
#         for (int i = 0; i < numProj; i++)
	for		$tmp195 480 482 1061 1063 	%line{283} %argrw{"r"}
	assign		___819_i $const2 	%argrw{"wr"}
	lt		$tmp194 ___819_i ___817_numProj 	%argrw{"wrr"}
	neq		$tmp195 $tmp194 $const2 	%argrw{"wrr"}
# PxrBumpRoughness.osl:286
#             int do_hextile = validHexTileData(hex[i]);
	aref		$tmp196.s ___817_hex.s ___819_i 	%line{286} %argrw{"wrr"}
	aref		$tmp196.t ___817_hex.t ___819_i 	%argrw{"wrr"}
	aref		$tmp196.w ___817_hex.w ___819_i 	%argrw{"wrr"}
	aref		$tmp196.r ___817_hex.r ___819_i 	%argrw{"wrr"}
	functioncall	$const44 492 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h:78
#     return hxt.w == INVALID_HEXTILE_WEIGHT ? 0 : 1;
	eq		$tmp198 $tmp196.w $const7 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLHexTile.h"} %line{78} %argrw{"wrr"}
	if		$tmp198 490 491 	%argrw{"r"}
	assign		___820_do_hextile $const2 	%argrw{"wr"}
	assign		___820_do_hextile $const3 	%argrw{"wr"}
	return
# PxrBumpRoughness.osl:290
#             int numSamples = do_hextile ? 3 : 1;
	if		___820_do_hextile 494 495 	%filename{"PxrBumpRoughness.osl"} %line{290} %argrw{"r"}
	assign		___820_numSamples $const5 	%argrw{"wr"}
	assign		___820_numSamples $const3 	%argrw{"wr"}
# PxrBumpRoughness.osl:291
#             float weight = sta[i][2];  // hexTile.Weights[i];
	aref		$tmp199 ___817_sta ___819_i 	%line{291} %argrw{"wrr"}
	compref		___820_weight $tmp199 $const4 	%argrw{"wrr"}
# PxrBumpRoughness.osl:292
#             float wmult = do_hextile ? 1.0 : 3.0;
	if		___820_do_hextile 499 500 	%line{292} %argrw{"r"}
	assign		___820_wmult $const11 	%argrw{"wr"}
	assign		___820_wmult $const45 	%argrw{"wr"}
# PxrBumpRoughness.osl:293
#             if (weight > 0.0)
	gt		$tmp200 ___820_weight $const17 	%line{293} %argrw{"wrr"}
	if		$tmp200 1061 1061 	%argrw{"r"}
# PxrBumpRoughness.osl:295
#                 sqwaccum = 0.0;
	assign		___817_sqwaccum $const17 	%line{295} %argrw{"wr"}
# PxrBumpRoughness.osl:296
#                 for (int j = 0; j < numSamples; j++)
	for		$tmp202 505 507 1056 1058 	%line{296} %argrw{"r"}
	assign		___822_j $const2 	%argrw{"wr"}
	lt		$tmp201 ___822_j ___820_numSamples 	%argrw{"wrr"}
	neq		$tmp202 $tmp201 $const2 	%argrw{"wrr"}
# PxrBumpRoughness.osl:299
#                     inputS = numSamples == 1 ? sta[i][0] : hex[i].s[j];
	eq		$tmp203 ___820_numSamples $const3 	%line{299} %argrw{"wrr"}
	if		$tmp203 511 513 	%argrw{"r"}
	aref		$tmp204 ___817_sta ___819_i 	%argrw{"wrr"}
	compref		inputS $tmp204 $const2 	%argrw{"wrr"}
	aref		$tmp205 ___817_hex.s ___819_i 	%argrw{"wrr"}
	compref		inputS $tmp205 ___822_j 	%argrw{"wrr"}
# PxrBumpRoughness.osl:300
#                     inputT = numSamples == 1 ? sta[i][1] : hex[i].t[j];
	eq		$tmp206 ___820_numSamples $const3 	%line{300} %argrw{"wrr"}
	if		$tmp206 517 519 	%argrw{"r"}
	aref		$tmp207 ___817_sta ___819_i 	%argrw{"wrr"}
	compref		inputT $tmp207 $const3 	%argrw{"wrr"}
	aref		$tmp208 ___817_hex.t ___819_i 	%argrw{"wrr"}
	compref		inputT $tmp208 ___822_j 	%argrw{"wrr"}
# PxrBumpRoughness.osl:301
#                     inputW = numSamples == 1 ? 1.0       : hex[i].w[j];
	eq		$tmp209 ___820_numSamples $const3 	%line{301} %argrw{"wrr"}
	if		$tmp209 522 524 	%argrw{"r"}
	assign		inputW $const11 	%argrw{"wr"}
	aref		$tmp210 ___817_hex.w ___819_i 	%argrw{"wrr"}
	compref		inputW $tmp210 ___822_j 	%argrw{"wrr"}
# PxrBumpRoughness.osl:305
#                     sqwaccum += inputW * inputW;
	mul		$tmp211 inputW inputW 	%line{305} %argrw{"wrr"}
	add		___817_sqwaccum ___817_sqwaccum $tmp211 	%argrw{"wrr"}
# PxrBumpRoughness.osl:307
#                     BumpRough_PartialDeriv(Pos, inputS, inputT, dPds, dPdt);
	functioncall	$const46 558 	%line{307} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:192
#     vector dQdx = Dx(Q);
	Dx		___782_dQdx Pos 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{192} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:193
#     vector dQdy = Dy(Q);
	Dy		___782_dQdy Pos 	%line{193} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:195
#     float A = Dx(a);
	Dx		___782_A inputS 	%line{195} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:196
#     float B = Dx(b);
	Dx		___782_B inputT 	%line{196} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:197
#     float C = Dy(a);
	Dy		___782_C inputS 	%line{197} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:198
#     float D = Dy(b);
	Dy		___782_D inputT 	%line{198} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:200
#     float invdet = 1./(A*D - B*C);
	mul		$tmp213 ___782_A ___782_D 	%line{200} %argrw{"wrr"}
	mul		$tmp214 ___782_B ___782_C 	%argrw{"wrr"}
	sub		$tmp215 $tmp213 $tmp214 	%argrw{"wrr"}
	div		___782_invdet $const11 $tmp215 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:202
#     dQda = (dQdx*D-dQdy*B)*invdet;
	mul		$tmp216 ___782_dQdx ___782_D 	%line{202} %argrw{"wrr"}
	mul		$tmp217 ___782_dQdy ___782_B 	%argrw{"wrr"}
	sub		$tmp218 $tmp216 $tmp217 	%argrw{"wrr"}
	mul		dPds $tmp218 ___782_invdet 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:203
#     dQdb = (dQdy*A-dQdx*C)*invdet;
	mul		$tmp219 ___782_dQdy ___782_A 	%line{203} %argrw{"wrr"}
	mul		$tmp220 ___782_dQdx ___782_C 	%argrw{"wrr"}
	sub		$tmp221 $tmp219 $tmp220 	%argrw{"wrr"}
	mul		dPdt $tmp221 ___782_invdet 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	functioncall	$const35 549 	%line{205} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp223 dPds dPds 	%line{62} %argrw{"wrr"}
	ge		$tmp222 $tmp223 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	neq		$tmp224 $tmp222 $const2 	%line{205} %argrw{"wrr"}
	if		$tmp224 557 557 	%argrw{"r"}
	functioncall	$const35 555 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp226 dPdt dPdt 	%line{62} %argrw{"wrr"}
	ge		$tmp225 $tmp226 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	neq		$tmp227 $tmp225 $const2 	%line{205} %argrw{"wrr"}
	assign		$tmp224 $tmp227 	%argrw{"wr"}
	assign		$tmp212 $tmp224 	%argrw{"wr"}
# PxrBumpRoughness.osl:308
#                     br = ReadBumpRough(b2r_texture,
	functioncall	$const23 913 	%filename{"PxrBumpRoughness.osl"} %line{308} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:633
#     float baseRoughnessSqr = baseRoughness * baseRoughness;
	mul		___808_baseRoughnessSqr baseRoughness baseRoughness 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{633} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:636
#     ComputeOrthonormalTangentSpace(Nin, dPds, dPdt, U, V, W);
	functioncall	$const24 571 	%line{636} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:518
#     normal PN = cross(dPds, dPdt);
	cross		___804_PN dPds dPdt 	%line{518} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:523
#     int lefthanded = dot(PN, Ng) < 0;
	dot		$tmp228 ___804_PN Ng 	%line{523} %argrw{"wrr"}
	lt		___804_lefthanded $tmp228 $const2 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:524
#     normal N_ = lefthanded ? -Nin : Nin;
	if		___804_lefthanded 566 567 	%line{524} %argrw{"r"}
	neg		___804_N_ Nin 	%argrw{"wr"}
	assign		___804_N_ Nin 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:526
#     U = normalize(cross(dPdt, N_));
	cross		$tmp229 dPdt ___804_N_ 	%line{526} %argrw{"wrr"}
	normalize	___808_U $tmp229 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:527
#     V = cross(N_, U);
	cross		___808_V ___804_N_ ___808_U 	%line{527} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:528
#     W = Nin;
	assign		___808_W Nin 	%line{528} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:639
#     BumpRough result = {baseRoughnessSqr, baseRoughnessSqr, U, V, W};
	assign		___808_result.l1 ___808_baseRoughnessSqr 	%line{639} %argrw{"wr"}
	assign		___808_result.l2 ___808_baseRoughnessSqr 	%argrw{"wr"}
	assign		___808_result.v1 ___808_U 	%argrw{"wr"}
	assign		___808_result.v2 ___808_V 	%argrw{"wr"}
	assign		___808_result.n ___808_W 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:641
#     int validDs = ReadBumpRoughTextures(filenameD1D2, inputS, inputT,
	functioncall	$const25 786 	%line{641} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:482
#     TxCoords coords = initTxCoords(inputS, inputT, 0, 1);
	functioncall	$const26 700 	%line{482} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:110
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 585 586 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{110} %argrw{"r"}
	functioncall	$const12 585 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp230 inputT 	%line{48} %argrw{"wr"}
	add		$tmp231 $tmp230 $const11 	%argrw{"wrr"}
	floor		$tmp232 inputT 	%argrw{"wr"}
	sub		$tmp233 inputT $tmp232 	%argrw{"wrr"}
	sub		___656__tt $tmp231 $tmp233 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:110
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___656__tt inputT 	%line{110} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:111
#     float blur0 = 0.0;
	assign		___656_blur0 $const17 	%line{111} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:113
#     if (smoothRayDerivs)
	if		$const3 685 692 	%line{113} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:115
#         float du = length(dPdu);  // width of the ray hit footprint projected onto the dPdu direction
	length		___657_du dPdu 	%line{115} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:116
#         float dv = length(dPdv);  // width of the ray hit footprint projected onto the dPdv direction
	length		___657_dv dPdv 	%line{116} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#         float dsdu = Dx(ss) * du;  // change in s over ray hit footprint
	Dx		$tmp234 inputS 	%line{118} %argrw{"wr"} %argderivs{1}
	mul		___657_dsdu $tmp234 ___657_du 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#         float dsdv = Dy(ss) * dv;
	Dy		$tmp235 inputS 	%line{119} %argrw{"wr"} %argderivs{1}
	mul		___657_dsdv $tmp235 ___657_dv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#         float dtdu = Dx(_tt) * du;  // change in t over ray hit footprint
	Dx		$tmp236 ___656__tt 	%line{120} %argrw{"wr"} %argderivs{1}
	mul		___657_dtdu $tmp236 ___657_du 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:121
#         float dtdv = Dy(_tt) * dv;
	Dy		$tmp237 ___656__tt 	%line{121} %argrw{"wr"} %argderivs{1}
	mul		___657_dtdv $tmp237 ___657_dv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:148
#         float det = dsdu * dtdv - dtdu * dsdv;
	mul		$tmp238 ___657_dsdu ___657_dtdv 	%line{148} %argrw{"wrr"}
	mul		$tmp239 ___657_dtdu ___657_dsdv 	%argrw{"wrr"}
	sub		___657_det $tmp238 $tmp239 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:150
#         if (det != 0.0)
	neq		$tmp240 ___657_det $const17 	%line{150} %argrw{"wrr"}
	if		$tmp240 611 645 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:152
#             dPds = (dPdu*dtdv - dPdv*dtdu) / det;
	mul		$tmp241 dPdu ___657_dtdv 	%line{152} %argrw{"wrr"}
	mul		$tmp242 dPdv ___657_dtdu 	%argrw{"wrr"}
	sub		$tmp243 $tmp241 $tmp242 	%argrw{"wrr"}
	div		___657_dPds $tmp243 ___657_det 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#             dPdt = (dPdv*dsdu - dPdu*dsdv) / det;
	mul		$tmp244 dPdv ___657_dsdu 	%line{153} %argrw{"wrr"}
	mul		$tmp245 dPdu ___657_dsdv 	%argrw{"wrr"}
	sub		$tmp246 $tmp244 $tmp245 	%argrw{"wrr"}
	div		___657_dPdt $tmp246 ___657_det 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#             dPds = (dsdu != 0.0) ? (dPdu / dsdu) : vector(0.0);
	neq		$tmp247 ___657_dsdu $const17 	%line{157} %argrw{"wrr"}
	if		$tmp247 614 615 	%argrw{"r"}
	div		___657_dPds dPdu ___657_dsdu 	%argrw{"wrr"}
	assign		___657_dPds $const1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:158
#             dPdt = (dtdv != 0.0) ? (dPdv / dtdv) : vector(0.0);
	neq		$tmp248 ___657_dtdv $const17 	%line{158} %argrw{"wrr"}
	if		$tmp248 618 619 	%argrw{"r"}
	div		___657_dPdt dPdv ___657_dtdv 	%argrw{"wrr"}
	assign		___657_dPdt $const1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:160
#             if (length(dPds) == 0.0 && dsdv != 0.0) dPds = dPdv / dsdv;
	length		$tmp249 ___657_dPds 	%line{160} %argrw{"wr"}
	eq		$tmp250 $tmp249 $const17 	%argrw{"wrr"}
	neq		$tmp251 $tmp250 $const2 	%argrw{"wrr"}
	if		$tmp251 626 626 	%argrw{"r"}
	neq		$tmp252 ___657_dsdv $const17 	%argrw{"wrr"}
	neq		$tmp253 $tmp252 $const2 	%argrw{"wrr"}
	assign		$tmp251 $tmp253 	%argrw{"wr"}
	if		$tmp251 628 628 	%argrw{"r"}
	div		___657_dPds dPdv ___657_dsdv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:161
#             if (length(dPdt) == 0.0 && dtdu != 0.0) dPdt = dPdu / dtdu;
	length		$tmp254 ___657_dPdt 	%line{161} %argrw{"wr"}
	eq		$tmp255 $tmp254 $const17 	%argrw{"wrr"}
	neq		$tmp256 $tmp255 $const2 	%argrw{"wrr"}
	if		$tmp256 635 635 	%argrw{"r"}
	neq		$tmp257 ___657_dtdu $const17 	%argrw{"wrr"}
	neq		$tmp258 $tmp257 $const2 	%argrw{"wrr"}
	assign		$tmp256 $tmp258 	%argrw{"wr"}
	if		$tmp256 637 637 	%argrw{"r"}
	div		___657_dPdt dPdu ___657_dtdu 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#             if (length(dPds) == 0.0) dPds = dPdt;
	length		$tmp259 ___657_dPds 	%line{163} %argrw{"wr"}
	eq		$tmp260 $tmp259 $const17 	%argrw{"wrr"}
	if		$tmp260 641 641 	%argrw{"r"}
	assign		___657_dPds ___657_dPdt 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:164
#             if (length(dPdt) == 0.0) dPdt = dPds;
	length		$tmp261 ___657_dPdt 	%line{164} %argrw{"wr"}
	eq		$tmp262 $tmp261 $const17 	%argrw{"wrr"}
	if		$tmp262 645 645 	%argrw{"r"}
	assign		___657_dPdt ___657_dPds 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         float filterwidthS = 1.0 / length(dPds);
	length		$tmp263 ___657_dPds 	%line{170} %argrw{"wr"}
	div		___657_filterwidthS $const11 $tmp263 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         float filterwidthT = 1.0 / length(dPdt);
	length		$tmp264 ___657_dPdt 	%line{171} %argrw{"wr"}
	div		___657_filterwidthT $const11 $tmp264 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:176
#         float dxss = Dx(ss);
	Dx		___657_dxss inputS 	%line{176} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:177
#         float dxtt = Dx(_tt);
	Dx		___657_dxtt ___656__tt 	%line{177} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:178
#         float dyss = Dy(ss);
	Dy		___657_dyss inputS 	%line{178} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:179
#         float dytt = Dy(_tt);
	Dy		___657_dytt ___656__tt 	%line{179} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:181
#         float signS = (abs(dxss) > abs(dyss)) ? sign(dxss) : sign(dyss);  // dominant sign (+/-) for ds
	abs		$tmp265 ___657_dxss 	%line{181} %argrw{"wr"}
	abs		$tmp266 ___657_dyss 	%argrw{"wr"}
	gt		$tmp267 $tmp265 $tmp266 	%argrw{"wrr"}
	if		$tmp267 658 659 	%argrw{"r"}
	sign		___657_signS ___657_dxss 	%argrw{"wr"}
	sign		___657_signS ___657_dyss 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:182
#         float signT = (abs(dxtt) > abs(dytt)) ? sign(dxtt) : sign(dytt);  // dominant sign (+/-) for dt
	abs		$tmp268 ___657_dxtt 	%line{182} %argrw{"wr"}
	abs		$tmp269 ___657_dytt 	%argrw{"wr"}
	gt		$tmp270 $tmp268 $tmp269 	%argrw{"wrr"}
	if		$tmp270 664 665 	%argrw{"r"}
	sign		___657_signT ___657_dxtt 	%argrw{"wr"}
	sign		___657_signT ___657_dytt 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:184
#         filterwidthS *= signS;
	mul		___657_filterwidthS ___657_filterwidthS ___657_signS 	%line{184} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#         filterwidthT *= signT;
	mul		___657_filterwidthT ___657_filterwidthT ___657_signT 	%line{185} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#         int unmixedDerivsAreDominant = (abs(dxss) > abs(dyss));
	abs		$tmp271 ___657_dxss 	%line{187} %argrw{"wr"}
	abs		$tmp272 ___657_dyss 	%argrw{"wr"}
	gt		___657_unmixedDerivsAreDominant $tmp271 $tmp272 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:188
#         if (unmixedDerivsAreDominant)
	if		___657_unmixedDerivsAreDominant 678 685 	%line{188} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:190
#             coords = TxCoords( ss, _tt, filterwidthS, 0.0, 0.0, filterwidthT, blur0 );
	assign		___656_coords.s inputS 	%line{190} %argrw{"wr"}
	assign		___656_coords.t ___656__tt 	%argrw{"wr"}
	assign		___656_coords.dsdx ___657_filterwidthS 	%argrw{"wr"}
	assign		___656_coords.dtdx $const17 	%argrw{"wr"}
	assign		___656_coords.dsdy $const17 	%argrw{"wr"}
	assign		___656_coords.dtdy ___657_filterwidthT 	%argrw{"wr"}
	assign		___656_coords.blur ___656_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:194
#             coords = TxCoords( ss, _tt, 0.0, filterwidthT, filterwidthS, 0.0, blur0 );
	assign		___656_coords.s inputS 	%line{194} %argrw{"wr"}
	assign		___656_coords.t ___656__tt 	%argrw{"wr"}
	assign		___656_coords.dsdx $const17 	%argrw{"wr"}
	assign		___656_coords.dtdx ___657_filterwidthT 	%argrw{"wr"}
	assign		___656_coords.dsdy ___657_filterwidthS 	%argrw{"wr"}
	assign		___656_coords.dtdy $const17 	%argrw{"wr"}
	assign		___656_coords.blur ___656_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:200
#         coords = TxCoords( ss, _tt, Dx(ss), Dx(_tt), Dy(ss), Dy(_tt), blur0 );
	assign		___656_coords.s inputS 	%line{200} %argrw{"wr"}
	assign		___656_coords.t ___656__tt 	%argrw{"wr"}
	Dx		___656_coords.dsdx inputS 	%argrw{"wr"} %argderivs{1}
	Dx		___656_coords.dtdx ___656__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___656_coords.dsdy inputS 	%argrw{"wr"} %argderivs{1}
	Dy		___656_coords.dtdy ___656__tt 	%argrw{"wr"} %argderivs{1}
	assign		___656_coords.blur ___656_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:203
#     return coords;
	assign		___803_coords.s ___656_coords.s 	%line{203} %argrw{"wr"}
	assign		___803_coords.t ___656_coords.t 	%argrw{"wr"}
	assign		___803_coords.dsdx ___656_coords.dsdx 	%argrw{"wr"}
	assign		___803_coords.dtdx ___656_coords.dtdx 	%argrw{"wr"}
	assign		___803_coords.dsdy ___656_coords.dsdy 	%argrw{"wr"}
	assign		___803_coords.dtdy ___656_coords.dtdy 	%argrw{"wr"}
	assign		___803_coords.blur ___656_coords.blur 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:483
#     TxParams params = {0, textureBlur, color(0), 0.0, textureFilter, textureFilterScale};
	assign		___803_params.firstchannel $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{483} %argrw{"wr"}
	assign		___803_params.blur blur 	%argrw{"wr"}
	assign		___803_params.missingcolor $const27 	%argrw{"wr"}
	assign		___803_params.missingalpha $const17 	%argrw{"wr"}
	assign		___803_params.interp filter 	%argrw{"wr"}
	assign		___803_params.width filterScale 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:488
#     d1 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 737 	%line{488} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:325
#     int success = 0;
	assign		___679_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{325} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:326
#     int nchannels = 0;
	assign		___679_nchannels $const2 	%line{326} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:327
#     color finalResult = 0;
	assign		___679_finalResult $const2 	%line{327} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:333
#                            "blur", max(coords.blur, params.blur),
	max		$tmp273 ___803_coords.blur ___803_params.blur 	%line{333} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:329
#     color result = texture(filename,
	texture		___679_result b2r_texture ___803_coords.s ___803_coords.t ___803_coords.dsdx ___803_coords.dtdx ___803_coords.dsdy ___803_coords.dtdy $const29 ___803_params.firstchannel $const30 $tmp273 $const31 ___803_params.missingcolor $const32 ___803_params.interp $const33 ___803_params.width 	%line{329} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:339
#     if (result == params.missingcolor) return result;
	eq		$tmp274 ___679_result ___803_params.missingcolor 	%line{339} %argrw{"wrr"}
	if		$tmp274 716 716 	%argrw{"r"}
	assign		vecD1 ___679_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:342
#     finalResult = result;
	assign		___679_finalResult ___679_result 	%line{342} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:345
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___679_success b2r_texture $const34 ___679_nchannels 	%line{345} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:346
#     if (success && nchannels)
	neq		$tmp275 ___679_success $const2 	%line{346} %argrw{"wrr"}
	if		$tmp275 722 722 	%argrw{"r"}
	neq		$tmp276 ___679_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp275 $tmp276 	%argrw{"wr"}
	if		$tmp275 736 736 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:348
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp277 ___679_nchannels $const3 	%line{348} %argrw{"wrr"}
	neq		$tmp278 $tmp277 $const2 	%argrw{"wrr"}
	if		$tmp278 726 729 	%argrw{"r"}
	eq		$tmp279 ___679_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp280 $tmp279 $const2 	%argrw{"wrr"}
	assign		$tmp278 $tmp280 	%argrw{"wr"}
	if		$tmp278 736 736 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:351
#             finalResult[0] = result[0];
	compref		$tmp281 ___679_result $const2 	%line{351} %argrw{"wrr"}
	compassign	___679_finalResult $const2 $tmp281 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:352
#             finalResult[1] = result[0];
	compref		$tmp282 ___679_result $const2 	%line{352} %argrw{"wrr"}
	compassign	___679_finalResult $const3 $tmp282 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:353
#             finalResult[2] = result[0];
	compref		$tmp283 ___679_result $const2 	%line{353} %argrw{"wrr"}
	compassign	___679_finalResult $const4 $tmp283 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:357
#     return finalResult;
	assign		vecD1 ___679_finalResult 	%line{357} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:489
#     d1[2] = max(d1[0], d1[1]);
	compref		$tmp285 vecD1 $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{489} %argrw{"wrr"}
	compref		$tmp286 vecD1 $const3 	%argrw{"wrr"}
	max		$tmp284 $tmp285 $tmp286 	%argrw{"wrr"}
	compassign	vecD1 $const4 $tmp284 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:491
#     params.firstchannel = 2;
	assign		___803_params.firstchannel $const4 	%line{491} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:492
#     d2 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 773 	%line{492} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:325
#     int success = 0;
	assign		___679_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{325} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:326
#     int nchannels = 0;
	assign		___679_nchannels $const2 	%line{326} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:327
#     color finalResult = 0;
	assign		___679_finalResult $const2 	%line{327} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:333
#                            "blur", max(coords.blur, params.blur),
	max		$tmp287 ___803_coords.blur ___803_params.blur 	%line{333} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:329
#     color result = texture(filename,
	texture		___679_result b2r_texture ___803_coords.s ___803_coords.t ___803_coords.dsdx ___803_coords.dtdx ___803_coords.dsdy ___803_coords.dtdy $const29 ___803_params.firstchannel $const30 $tmp287 $const31 ___803_params.missingcolor $const32 ___803_params.interp $const33 ___803_params.width 	%line{329} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:339
#     if (result == params.missingcolor) return result;
	eq		$tmp288 ___679_result ___803_params.missingcolor 	%line{339} %argrw{"wrr"}
	if		$tmp288 752 752 	%argrw{"r"}
	assign		vecD2 ___679_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:342
#     finalResult = result;
	assign		___679_finalResult ___679_result 	%line{342} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:345
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___679_success b2r_texture $const34 ___679_nchannels 	%line{345} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:346
#     if (success && nchannels)
	neq		$tmp289 ___679_success $const2 	%line{346} %argrw{"wrr"}
	if		$tmp289 758 758 	%argrw{"r"}
	neq		$tmp290 ___679_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp289 $tmp290 	%argrw{"wr"}
	if		$tmp289 772 772 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:348
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp291 ___679_nchannels $const3 	%line{348} %argrw{"wrr"}
	neq		$tmp292 $tmp291 $const2 	%argrw{"wrr"}
	if		$tmp292 762 765 	%argrw{"r"}
	eq		$tmp293 ___679_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp294 $tmp293 $const2 	%argrw{"wrr"}
	assign		$tmp292 $tmp294 	%argrw{"wr"}
	if		$tmp292 772 772 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:351
#             finalResult[0] = result[0];
	compref		$tmp295 ___679_result $const2 	%line{351} %argrw{"wrr"}
	compassign	___679_finalResult $const2 $tmp295 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:352
#             finalResult[1] = result[0];
	compref		$tmp296 ___679_result $const2 	%line{352} %argrw{"wrr"}
	compassign	___679_finalResult $const3 $tmp296 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:353
#             finalResult[2] = result[0];
	compref		$tmp297 ___679_result $const2 	%line{353} %argrw{"wrr"}
	compassign	___679_finalResult $const4 $tmp297 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:357
#     return finalResult;
	assign		vecD2 ___679_finalResult 	%line{357} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	functioncall	$const35 777 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{494} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp299 vecD1 vecD1 	%line{62} %argrw{"wrr"}
	ge		$tmp298 $tmp299 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp300 $tmp298 $const2 	%line{494} %argrw{"wrr"}
	if		$tmp300 785 785 	%argrw{"r"}
	functioncall	$const35 783 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp302 vecD2 vecD2 	%line{62} %argrw{"wrr"}
	ge		$tmp301 $tmp302 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp303 $tmp301 $const2 	%line{494} %argrw{"wrr"}
	assign		$tmp300 $tmp303 	%argrw{"wr"}
	assign		___808_validDs $tmp300 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#     if (validDs)
	if		___808_validDs 908 908 	%line{644} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:648
#         if (invertBumpNormal == 0) {
	eq		$tmp304 invertBumpNormal $const2 	%line{648} %argrw{"wrr"}
	if		$tmp304 795 795 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:649
#             d1[0] = -d1[0];
	compref		$tmp305 vecD1 $const2 	%line{649} %argrw{"wrr"}
	neg		$tmp306 $tmp305 	%argrw{"wr"}
	compassign	vecD1 $const2 $tmp306 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:650
#             d1[1] = -d1[1];
	compref		$tmp307 vecD1 $const3 	%line{650} %argrw{"wrr"}
	neg		$tmp308 $tmp307 	%argrw{"wr"}
	compassign	vecD1 $const3 $tmp308 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	functioncall	$const37 876 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:542
#     float dx = d1[0];
	compref		___805_dx vecD1 $const2 	%line{542} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:543
#     float dy = d1[1];
	compref		___805_dy vecD1 $const3 	%line{543} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:544
#     float dxdx = d2[0];
	compref		___805_dxdx vecD2 $const2 	%line{544} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:545
#     float dydy = d2[1];
	compref		___805_dydy vecD2 $const3 	%line{545} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:546
#     float dxdy = d2[2];
	compref		___805_dxdy vecD2 $const4 	%line{546} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:554
#     float sxx = 2.0 * (dxdx - dx*dx);
	mul		$tmp310 ___805_dx ___805_dx 	%line{554} %argrw{"wrr"}
	sub		$tmp311 ___805_dxdx $tmp310 	%argrw{"wrr"}
	mul		___805_sxx $const38 $tmp311 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:555
#     float sxy = 2.0 * (dxdy - dx*dy);
	mul		$tmp312 ___805_dx ___805_dy 	%line{555} %argrw{"wrr"}
	sub		$tmp313 ___805_dxdy $tmp312 	%argrw{"wrr"}
	mul		___805_sxy $const38 $tmp313 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:556
#     float syy = 2.0 * (dydy - dy*dy);
	mul		$tmp314 ___805_dy ___805_dy 	%line{556} %argrw{"wrr"}
	sub		$tmp315 ___805_dydy $tmp314 	%argrw{"wrr"}
	mul		___805_syy $const38 $tmp315 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:558
#     if (varianceGain != 1.0) {
	neq		$tmp316 _gainRw $const11 	%line{558} %argrw{"wrr"}
	if		$tmp316 816 816 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:559
#         float varianceGainSqr = varianceGain * varianceGain;
	mul		___806_varianceGainSqr _gainRw _gainRw 	%line{559} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:560
#         sxx *= varianceGainSqr;
	mul		___805_sxx ___805_sxx ___806_varianceGainSqr 	%line{560} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:561
#         sxy *= varianceGainSqr;
	mul		___805_sxy ___805_sxy ___806_varianceGainSqr 	%line{561} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:562
#         syy *= varianceGainSqr;
	mul		___805_syy ___805_syy ___806_varianceGainSqr 	%line{562} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:569
#     BumpRough_CovarToEigen2D(sxx, sxy, syy, l1, l2, v1, v2);
	functioncall	$const39 841 	%line{569} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:219
#     float del = sqrt(a*a + 4.0*b*b - 2.0*a*c + c*c);
	mul		$tmp317 ___805_sxx ___805_sxx 	%line{219} %argrw{"wrr"}
	mul		$tmp318 $const40 ___805_sxy 	%argrw{"wrr"}
	mul		$tmp319 $tmp318 ___805_sxy 	%argrw{"wrr"}
	add		$tmp320 $tmp317 $tmp319 	%argrw{"wrr"}
	mul		$tmp321 $const38 ___805_sxx 	%argrw{"wrr"}
	mul		$tmp322 $tmp321 ___805_syy 	%argrw{"wrr"}
	sub		$tmp323 $tmp320 $tmp322 	%argrw{"wrr"}
	mul		$tmp324 ___805_syy ___805_syy 	%argrw{"wrr"}
	add		$tmp325 $tmp323 $tmp324 	%argrw{"wrr"}
	sqrt		___783_del $tmp325 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:222
#     l1 = 0.5 * (a + c + del);
	add		$tmp326 ___805_sxx ___805_syy 	%line{222} %argrw{"wrr"}
	add		$tmp327 $tmp326 ___783_del 	%argrw{"wrr"}
	mul		___805_l1 $const20 $tmp327 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:223
#     l2 = 0.5 * (a + c - del);
	add		$tmp328 ___805_sxx ___805_syy 	%line{223} %argrw{"wrr"}
	sub		$tmp329 $tmp328 ___783_del 	%argrw{"wrr"}
	mul		___805_l2 $const20 $tmp329 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:226
#     v1 = normalize(vector((l1 - c)/b, 1.0, 0.0));
	sub		$tmp331 ___805_l1 ___805_syy 	%line{226} %argrw{"wrr"}
	div		$tmp332 $tmp331 ___805_sxy 	%argrw{"wrr"}
	vector		$tmp330 $tmp332 $const11 $const17 	%argrw{"wrrr"}
	normalize	___805_v1 $tmp330 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:227
#     v2 = normalize(vector((l2 - c)/b, 1.0, 0.0));
	sub		$tmp334 ___805_l2 ___805_syy 	%line{227} %argrw{"wrr"}
	div		$tmp335 $tmp334 ___805_sxy 	%argrw{"wrr"}
	vector		$tmp333 $tmp335 $const11 $const17 	%argrw{"wrrr"}
	normalize	___805_v2 $tmp333 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:572
#     bumpRough.l1 = l1;
	assign		___808_result.l1 ___805_l1 	%line{572} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:573
#     bumpRough.l2 = l2;
	assign		___808_result.l2 ___805_l2 	%line{573} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     bumpRough.v1 = U * v1[0] + V * v1[1];
	compref		$tmp336 ___805_v1 $const2 	%line{578} %argrw{"wrr"}
	mul		$tmp337 ___808_U $tmp336 	%argrw{"wrr"}
	compref		$tmp338 ___805_v1 $const3 	%argrw{"wrr"}
	mul		$tmp339 ___808_V $tmp338 	%argrw{"wrr"}
	add		___808_result.v1 $tmp337 $tmp339 	%argrw{"wrr"}
	assign		___808_result.v1 ___808_result.v1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:579
#     bumpRough.v2 = U * v2[0] + V * v2[1];
	compref		$tmp340 ___805_v2 $const2 	%line{579} %argrw{"wrr"}
	mul		$tmp341 ___808_U $tmp340 	%argrw{"wrr"}
	compref		$tmp342 ___805_v2 $const3 	%argrw{"wrr"}
	mul		$tmp343 ___808_V $tmp342 	%argrw{"wrr"}
	add		___808_result.v2 $tmp341 $tmp343 	%argrw{"wrr"}
	assign		___808_result.v2 ___808_result.v2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	mul		$tmp344 _bumpNormalGainRw ___805_dx 	%line{582} %argrw{"wrr"}
	mul		$tmp345 $tmp344 ___808_U 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	mul		$tmp346 _bumpNormalGainRw ___805_dy 	%line{583} %argrw{"wrr"}
	mul		$tmp347 $tmp346 ___808_V 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	add		$tmp348 $tmp345 $tmp347 	%line{582} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	add		$tmp349 $tmp348 ___808_W 	%line{583} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	normalize	___808_result.n $tmp349 	%line{582} %argrw{"wr"}
	assign		___808_result.n ___808_result.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	functioncall	$const35 867 	%line{586} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp351 ___808_result.v1 ___808_result.v1 	%line{62} %argrw{"wrr"}
	ge		$tmp350 $tmp351 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp352 $tmp350 $const2 	%line{586} %argrw{"wrr"}
	if		$tmp352 875 875 	%argrw{"r"}
	functioncall	$const35 873 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp354 ___808_result.v2 ___808_result.v2 	%line{62} %argrw{"wrr"}
	ge		$tmp353 $tmp354 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp355 $tmp353 $const2 	%line{586} %argrw{"wrr"}
	assign		$tmp352 $tmp355 	%argrw{"wr"}
	assign		$tmp309 $tmp352 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	if		$tmp309 908 908 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:659
#             result.l1 += baseRoughnessSqr;
	add		___808_result.l1 ___808_result.l1 ___808_baseRoughnessSqr 	%line{659} %argrw{"wrr"}
	assign		___808_result.l1 ___808_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:660
#             result.l2 += baseRoughnessSqr;
	add		___808_result.l2 ___808_result.l2 ___808_baseRoughnessSqr 	%line{660} %argrw{"wrr"}
	assign		___808_result.l2 ___808_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:662
#             if (anisotropyGain != 1.0) {
	neq		$tmp356 anisotropyGain $const11 	%line{662} %argrw{"wrr"}
	if		$tmp356 908 908 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:663
#                 BumpRoughAnisotropyAdjust(anisotropyGain, result);
	functioncall	$const41 908 	%line{663} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:596
#     float eps = 1.e-12;
	assign		___807_eps $const42 	%line{596} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:597
#     float roughnessU = sqrt(bumpRough.l1) + eps;
	sqrt		$tmp357 ___808_result.l1 	%line{597} %argrw{"wr"}
	add		___807_roughnessU $tmp357 ___807_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:598
#     float roughnessV = sqrt(bumpRough.l2) + eps;
	sqrt		$tmp358 ___808_result.l2 	%line{598} %argrw{"wr"}
	add		___807_roughnessV $tmp358 ___807_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:600
#     float ratio = roughnessU / roughnessV;
	div		___807_ratio ___807_roughnessU ___807_roughnessV 	%line{600} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:601
#     float anisotropy = (ratio - 1.0) / (ratio + 1.0);
	sub		$tmp359 ___807_ratio $const11 	%line{601} %argrw{"wrr"}
	add		$tmp360 ___807_ratio $const11 	%argrw{"wrr"}
	div		___807_anisotropy $tmp359 $tmp360 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:603
#     anisotropy = clamp(anisotropy * anisotropyGain, 0.0, 1.0);
	mul		$tmp361 ___807_anisotropy anisotropyGain 	%line{603} %argrw{"wrr"}
	functioncall	$const43 897 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp362 $tmp361 $const11 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___807_anisotropy $tmp362 $const17 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:605
#     float alpha = 1.0 / (anisotropy*anisotropy - 2.0 * anisotropy + 2.0);
	mul		$tmp363 ___807_anisotropy ___807_anisotropy 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{605} %argrw{"wrr"}
	mul		$tmp364 $const38 ___807_anisotropy 	%argrw{"wrr"}
	sub		$tmp365 $tmp363 $tmp364 	%argrw{"wrr"}
	add		$tmp366 $tmp365 $const38 	%argrw{"wrr"}
	div		___807_alpha $const11 $tmp366 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:607
#     float variance = bumpRough.l1 + bumpRough.l2;
	add		___807_variance ___808_result.l1 ___808_result.l2 	%line{607} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:609
#     bumpRough.l1 = variance * alpha;
	mul		___808_result.l1 ___807_variance ___807_alpha 	%line{609} %argrw{"wrr"}
	assign		___808_result.l1 ___808_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:610
#     bumpRough.l2 = variance * (1.0 - alpha);
	sub		$tmp367 $const11 ___807_alpha 	%line{610} %argrw{"wrr"}
	mul		___808_result.l2 ___807_variance $tmp367 	%argrw{"wrr"}
	assign		___808_result.l2 ___808_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:668
#     return result;
	assign		br.l1 ___808_result.l1 	%line{668} %argrw{"wr"}
	assign		br.l2 ___808_result.l2 	%argrw{"wr"}
	assign		br.v1 ___808_result.v1 	%argrw{"wr"}
	assign		br.v2 ___808_result.v2 	%argrw{"wr"}
	assign		br.n ___808_result.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:314
#                         Nin, br, weight * inputW,
	mul		$tmp368 ___820_weight inputW 	%filename{"PxrBumpRoughness.osl"} %line{314} %argrw{"wrr"}
# PxrBumpRoughness.osl:313
#                     BumpRough_EigenBlend_AddNormalWeightedVariance(
	functioncall	$const47 1056 	%line{313} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:423
#     if(Oover<=0.){
	le		$tmp369 $tmp368 $const17 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{423} %argrw{"wrr"}
	if		$tmp369 924 924 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:424
#         Eout = Eunder;
	assign		___817_resultBumpRough.l1 ___817_resultBumpRough.l1 	%line{424} %argrw{"wr"}
	assign		___817_resultBumpRough.l2 ___817_resultBumpRough.l2 	%argrw{"wr"}
	assign		___817_resultBumpRough.v1 ___817_resultBumpRough.v1 	%argrw{"wr"}
	assign		___817_resultBumpRough.v2 ___817_resultBumpRough.v2 	%argrw{"wr"}
	assign		___817_resultBumpRough.n ___817_resultBumpRough.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:425
#         Oout = Ounder;
	assign		___817_resultBumpRoughPresence ___817_resultBumpRoughPresence 	%line{425} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:426
#         return;
	return	%line{426}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:430
#     BumpRough e_over = Eover;
	assign		___800_e_over.l1 br.l1 	%line{430} %argrw{"wr"}
	assign		___800_e_over.l2 br.l2 	%argrw{"wr"}
	assign		___800_e_over.v1 br.v1 	%argrw{"wr"}
	assign		___800_e_over.v2 br.v2 	%argrw{"wr"}
	assign		___800_e_over.n br.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:431
#     e_over.l1 = Oover*Eover.l1;
	mul		___800_e_over.l1 $tmp368 br.l1 	%line{431} %argrw{"wrr"}
	assign		___800_e_over.l1 ___800_e_over.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:432
#     e_over.l2 = Oover*Eover.l2;
	mul		___800_e_over.l2 $tmp368 br.l2 	%line{432} %argrw{"wrr"}
	assign		___800_e_over.l2 ___800_e_over.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:433
#     BumpRough_CombineEigens2D(Nin, e_over, Eunder, Eout);
	functioncall	$const48 1050 	%line{433} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:236
#     if(a.l1==0. && a.l2==0.){
	eq		$tmp370 ___800_e_over.l1 $const17 	%line{236} %argrw{"wrr"}
	neq		$tmp371 $tmp370 $const2 	%argrw{"wrr"}
	if		$tmp371 940 940 	%argrw{"r"}
	eq		$tmp372 ___800_e_over.l2 $const17 	%argrw{"wrr"}
	neq		$tmp373 $tmp372 $const2 	%argrw{"wrr"}
	assign		$tmp371 $tmp373 	%argrw{"wr"}
	if		$tmp371 946 1050 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:237
#         c = b;
	assign		___817_resultBumpRough.l1 ___817_resultBumpRough.l1 	%line{237} %argrw{"wr"}
	assign		___817_resultBumpRough.l2 ___817_resultBumpRough.l2 	%argrw{"wr"}
	assign		___817_resultBumpRough.v1 ___817_resultBumpRough.v1 	%argrw{"wr"}
	assign		___817_resultBumpRough.v2 ___817_resultBumpRough.v2 	%argrw{"wr"}
	assign		___817_resultBumpRough.n ___817_resultBumpRough.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:238
#     } else if (b.l1==0. && b.l2==0.){
	eq		$tmp374 ___817_resultBumpRough.l1 $const17 	%line{238} %argrw{"wrr"}
	neq		$tmp375 $tmp374 $const2 	%argrw{"wrr"}
	if		$tmp375 952 952 	%argrw{"r"}
	eq		$tmp376 ___817_resultBumpRough.l2 $const17 	%argrw{"wrr"}
	neq		$tmp377 $tmp376 $const2 	%argrw{"wrr"}
	assign		$tmp375 $tmp377 	%argrw{"wr"}
	if		$tmp375 958 1050 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:239
#         c = a;
	assign		___817_resultBumpRough.l1 ___800_e_over.l1 	%line{239} %argrw{"wr"}
	assign		___817_resultBumpRough.l2 ___800_e_over.l2 	%argrw{"wr"}
	assign		___817_resultBumpRough.v1 ___800_e_over.v1 	%argrw{"wr"}
	assign		___817_resultBumpRough.v2 ___800_e_over.v2 	%argrw{"wr"}
	assign		___817_resultBumpRough.n ___800_e_over.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:241
#         _combineEigens2D(Nin,
	functioncall	$const49 1050 	%line{241} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:157
#     _normalizeEigen2D(al1, al2, av1, av2, al1, al2, av1, av2);
	functioncall	$const50 966 	%line{157} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:81
#     float w1 = length(av1);
	length		___768_w1 ___800_e_over.v1 	%line{81} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:82
#     float w2 = length(av2);
	length		___768_w2 ___800_e_over.v2 	%line{82} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:83
#     ov1 = normalize(av1);
	normalize	___800_e_over.v1 ___800_e_over.v1 	%line{83} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:84
#     ov2 = normalize(av2);
	normalize	___800_e_over.v2 ___800_e_over.v2 	%line{84} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:85
#     ol1 = al1*w1;
	mul		___800_e_over.l1 ___800_e_over.l1 ___768_w1 	%line{85} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:86
#     ol2 = al2*w2;
	mul		___800_e_over.l2 ___800_e_over.l2 ___768_w2 	%line{86} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:158
#     _normalizeEigen2D(bl1, bl2, bv1, bv2, bl1, bl2, bv1, bv2);
	functioncall	$const50 973 	%line{158} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:81
#     float w1 = length(av1);
	length		___768_w1 ___817_resultBumpRough.v1 	%line{81} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:82
#     float w2 = length(av2);
	length		___768_w2 ___817_resultBumpRough.v2 	%line{82} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:83
#     ov1 = normalize(av1);
	normalize	___817_resultBumpRough.v1 ___817_resultBumpRough.v1 	%line{83} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:84
#     ov2 = normalize(av2);
	normalize	___817_resultBumpRough.v2 ___817_resultBumpRough.v2 	%line{84} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:85
#     ol1 = al1*w1;
	mul		___817_resultBumpRough.l1 ___817_resultBumpRough.l1 ___768_w1 	%line{85} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:86
#     ol2 = al2*w2;
	mul		___817_resultBumpRough.l2 ___817_resultBumpRough.l2 ___768_w2 	%line{86} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:159
#     if(al1<al2){
	lt		$tmp378 ___800_e_over.l1 ___800_e_over.l2 	%line{159} %argrw{"wrr"}
	if		$tmp378 980 980 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:160
#         _swapEigen2D(al1, al2, av1, av2, al1, al2, av1, av2);
	functioncall	$const51 980 	%line{160} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:70
#     ol1 = al2;
	assign		___800_e_over.l1 ___800_e_over.l2 	%line{70} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:71
#     ov1 = av2;
	assign		___800_e_over.v1 ___800_e_over.v2 	%line{71} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:72
#     ol2 = al1;
	assign		___800_e_over.l2 ___800_e_over.l1 	%line{72} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:73
#     ov2 = av1;
	assign		___800_e_over.v2 ___800_e_over.v1 	%line{73} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:162
#     if(bl1<bl2){
	lt		$tmp379 ___817_resultBumpRough.l1 ___817_resultBumpRough.l2 	%line{162} %argrw{"wrr"}
	if		$tmp379 987 987 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:163
#         _swapEigen2D(bl1, bl2, bv1, bv2, bl1, bl2, bv1, bv2);
	functioncall	$const51 987 	%line{163} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:70
#     ol1 = al2;
	assign		___817_resultBumpRough.l1 ___817_resultBumpRough.l2 	%line{70} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:71
#     ov1 = av2;
	assign		___817_resultBumpRough.v1 ___817_resultBumpRough.v2 	%line{71} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:72
#     ol2 = al1;
	assign		___817_resultBumpRough.l2 ___817_resultBumpRough.l1 	%line{72} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:73
#     ov2 = av1;
	assign		___817_resultBumpRough.v2 ___817_resultBumpRough.v1 	%line{73} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:165
#     _forceRhandEigen2D(Nin, al1, al2, av1, av2, al1, al2, av1, av2);
	functioncall	$const52 1000 	%line{165} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:97
#     ol1 = al1;
	assign		___800_e_over.l1 ___800_e_over.l1 	%line{97} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:98
#     ol2 = al2;
	assign		___800_e_over.l2 ___800_e_over.l2 	%line{98} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:99
#     ov1 = av1;
	assign		___800_e_over.v1 ___800_e_over.v1 	%line{99} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:100
#     vector Nn = vector(normalize(Nin));
	normalize	$tmp380 Nin 	%line{100} %argrw{"wr"}
	assign		___769_Nn $tmp380 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:101
#     vector Ncross = vector(cross(av1, av2));
	cross		$tmp381 ___800_e_over.v1 ___800_e_over.v2 	%line{101} %argrw{"wrr"}
	assign		___769_Ncross $tmp381 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:102
#     if(dot(Nn,Ncross)<.0){
	dot		$tmp382 ___769_Nn ___769_Ncross 	%line{102} %argrw{"wrr"}
	lt		$tmp383 $tmp382 $const17 	%argrw{"wrr"}
	if		$tmp383 999 1000 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:103
#         ov2 = -av2;
	neg		___800_e_over.v2 ___800_e_over.v2 	%line{103} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:105
#         ov2 = av2;
	assign		___800_e_over.v2 ___800_e_over.v2 	%line{105} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:166
#     _forceRhandEigen2D(Nin, bl1, bl2, bv1, bv2, bl1, bl2, bv1, bv2);
	functioncall	$const52 1013 	%line{166} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:97
#     ol1 = al1;
	assign		___817_resultBumpRough.l1 ___817_resultBumpRough.l1 	%line{97} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:98
#     ol2 = al2;
	assign		___817_resultBumpRough.l2 ___817_resultBumpRough.l2 	%line{98} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:99
#     ov1 = av1;
	assign		___817_resultBumpRough.v1 ___817_resultBumpRough.v1 	%line{99} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:100
#     vector Nn = vector(normalize(Nin));
	normalize	$tmp384 Nin 	%line{100} %argrw{"wr"}
	assign		___769_Nn $tmp384 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:101
#     vector Ncross = vector(cross(av1, av2));
	cross		$tmp385 ___817_resultBumpRough.v1 ___817_resultBumpRough.v2 	%line{101} %argrw{"wrr"}
	assign		___769_Ncross $tmp385 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:102
#     if(dot(Nn,Ncross)<.0){
	dot		$tmp386 ___769_Nn ___769_Ncross 	%line{102} %argrw{"wrr"}
	lt		$tmp387 $tmp386 $const17 	%argrw{"wrr"}
	if		$tmp387 1012 1013 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:103
#         ov2 = -av2;
	neg		___817_resultBumpRough.v2 ___817_resultBumpRough.v2 	%line{103} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:105
#         ov2 = av2;
	assign		___817_resultBumpRough.v2 ___817_resultBumpRough.v2 	%line{105} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:167
#     _alignEigenB2D(al1, al2, av1, av2,
	functioncall	$const53 1040 	%line{167} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:120
#     float Bumprough_Use2016Mode = 1.0;
	assign		___772_Bumprough_Use2016Mode $const11 	%line{120} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:121
#     getattribute("", "user:Bumprough_Use2016Mode", Bumprough_Use2016Mode);
	getattribute	$tmp388 $const54 $const55 ___772_Bumprough_Use2016Mode 	%line{121} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:123
#     if (Bumprough_Use2016Mode == 1.0){
	eq		$tmp389 ___772_Bumprough_Use2016Mode $const11 	%line{123} %argrw{"wrr"}
	if		$tmp389 1029 1040 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:124
#         if (dot(av1,bv1)<.0) {
	dot		$tmp390 ___800_e_over.v1 ___817_resultBumpRough.v1 	%line{124} %argrw{"wrr"}
	lt		$tmp391 $tmp390 $const17 	%argrw{"wrr"}
	if		$tmp391 1025 1029 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:125
#             ol1 = bl1;
	assign		___817_resultBumpRough.l1 ___817_resultBumpRough.l1 	%line{125} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:126
#             ol2 = bl2;
	assign		___817_resultBumpRough.l2 ___817_resultBumpRough.l2 	%line{126} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:127
#             ov1 = bv1;
	assign		___817_resultBumpRough.v1 ___817_resultBumpRough.v1 	%line{127} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:128
#             ov2 = bv2;
	assign		___817_resultBumpRough.v2 ___817_resultBumpRough.v2 	%line{128} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:130
#             ol1 = bl1;
	assign		___817_resultBumpRough.l1 ___817_resultBumpRough.l1 	%line{130} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:131
#             ol2 = bl2;
	assign		___817_resultBumpRough.l2 ___817_resultBumpRough.l2 	%line{131} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:132
#             ov1 = -bv1;
	neg		___817_resultBumpRough.v1 ___817_resultBumpRough.v1 	%line{132} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:133
#             ov2 = -bv2;
	neg		___817_resultBumpRough.v2 ___817_resultBumpRough.v2 	%line{133} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:136
#         if (dot(av1,bv1)>=.0) {
	dot		$tmp392 ___800_e_over.v1 ___817_resultBumpRough.v1 	%line{136} %argrw{"wrr"}
	ge		$tmp393 $tmp392 $const17 	%argrw{"wrr"}
	if		$tmp393 1036 1040 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:137
#             ol1 = bl1;
	assign		___817_resultBumpRough.l1 ___817_resultBumpRough.l1 	%line{137} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:138
#             ol2 = bl2;
	assign		___817_resultBumpRough.l2 ___817_resultBumpRough.l2 	%line{138} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:139
#             ov1 = bv1;
	assign		___817_resultBumpRough.v1 ___817_resultBumpRough.v1 	%line{139} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:140
#             ov2 = bv2;
	assign		___817_resultBumpRough.v2 ___817_resultBumpRough.v2 	%line{140} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:142
#             ol1 = bl1;
	assign		___817_resultBumpRough.l1 ___817_resultBumpRough.l1 	%line{142} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:143
#             ol2 = bl2;
	assign		___817_resultBumpRough.l2 ___817_resultBumpRough.l2 	%line{143} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:144
#             ov1 = -bv1;
	neg		___817_resultBumpRough.v1 ___817_resultBumpRough.v1 	%line{144} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:145
#             ov2 = -bv2;
	neg		___817_resultBumpRough.v2 ___817_resultBumpRough.v2 	%line{145} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:171
#     vector sumv = al1*av1+bl1*bv1;
	mul		$tmp394 ___800_e_over.l1 ___800_e_over.v1 	%line{171} %argrw{"wrr"}
	mul		$tmp395 ___817_resultBumpRough.l1 ___817_resultBumpRough.v1 	%argrw{"wrr"}
	add		___779_sumv $tmp394 $tmp395 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:173
#     ol1 = al1+bl1;
	add		___817_resultBumpRough.l1 ___800_e_over.l1 ___817_resultBumpRough.l1 	%line{173} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:174
#     ol2 = al2+bl2;
	add		___817_resultBumpRough.l2 ___800_e_over.l2 ___817_resultBumpRough.l2 	%line{174} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:175
#     ov1 = normalize(sumv);
	normalize	___817_resultBumpRough.v1 ___779_sumv 	%line{175} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:178
#     ov2 = normalize(cross(Nin, ov1));
	cross		$tmp396 Nin ___817_resultBumpRough.v1 	%line{178} %argrw{"wrr"}
	normalize	___817_resultBumpRough.v2 $tmp396 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:179
#     ov1 = normalize(cross(ov2, Nin));
	cross		$tmp397 ___817_resultBumpRough.v2 Nin 	%line{179} %argrw{"wrr"}
	normalize	___817_resultBumpRough.v1 $tmp397 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:435
#     Eout.n += Oover * e_over.n;
	mul		$tmp398 $tmp368 ___800_e_over.n 	%line{435} %argrw{"wrr"}
	add		___817_resultBumpRough.n ___817_resultBumpRough.n $tmp398 	%argrw{"wrr"}
	assign		___817_resultBumpRough.n ___817_resultBumpRough.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:438
#     Oout = Oover + (1.-Oover)*Ounder;
	sub		$tmp399 $const11 $tmp368 	%line{438} %argrw{"wrr"}
	mul		$tmp400 $tmp399 ___817_resultBumpRoughPresence 	%argrw{"wrr"}
	add		___817_resultBumpRoughPresence $tmp368 $tmp400 	%argrw{"wrr"}
# PxrBumpRoughness.osl:296
#                 for (int j = 0; j < numSamples; j++)
	assign		$tmp401 ___822_j 	%filename{"PxrBumpRoughness.osl"} %line{296} %argrw{"wr"}
	add		___822_j ___822_j $const3 	%argrw{"wrr"}
# PxrBumpRoughness.osl:318
#                 wvdenom += weight * weight * sqwaccum;
	mul		$tmp402 ___820_weight ___820_weight 	%line{318} %argrw{"wrr"}
	mul		$tmp403 $tmp402 ___817_sqwaccum 	%argrw{"wrr"}
	add		___817_wvdenom ___817_wvdenom $tmp403 	%argrw{"wrr"}
# PxrBumpRoughness.osl:283
#         for (int i = 0; i < numProj; i++)
	assign		$tmp404 ___819_i 	%line{283} %argrw{"wr"}
	add		___819_i ___819_i $const3 	%argrw{"wrr"}
# PxrBumpRoughness.osl:322
#         if (wvdenom > 0.0)
	gt		$tmp405 ___817_wvdenom $const17 	%line{322} %argrw{"wrr"}
	if		$tmp405 1069 1069 	%argrw{"r"}
# PxrBumpRoughness.osl:324
#             resultBumpRough.n = resultBumpRough.n / sqrt(wvdenom) + Nc;
	sqrt		$tmp406 ___817_wvdenom 	%line{324} %argrw{"wr"}
	div		$tmp407 ___817_resultBumpRough.n $tmp406 	%argrw{"wrr"}
	add		___817_resultBumpRough.n $tmp407 ___817_Nc 	%argrw{"wrr"}
	assign		___817_resultBumpRough.n ___817_resultBumpRough.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:326
#         resultBumpRough.n = normalize(resultBumpRough.n);
	normalize	___817_resultBumpRough.n ___817_resultBumpRough.n 	%line{326} %argrw{"wr"}
	assign		___817_resultBumpRough.n ___817_resultBumpRough.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:327
#         br = resultBumpRough;
	assign		br.l1 ___817_resultBumpRough.l1 	%line{327} %argrw{"wr"}
	assign		br.l2 ___817_resultBumpRough.l2 	%argrw{"wr"}
	assign		br.v1 ___817_resultBumpRough.v1 	%argrw{"wr"}
	assign		br.v2 ___817_resultBumpRough.v2 	%argrw{"wr"}
	assign		br.n ___817_resultBumpRough.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:331
#         if (textureRoughness > 0.0)
	gt		$tmp408 textureRoughness $const17 	%line{331} %argrw{"wrr"}
	if		$tmp408 1455 1455 	%argrw{"r"}
# PxrBumpRoughness.osl:333
#             textureRoughnessGain = estimateRoughnessGain(b2r_texture, inputS, inputT,
	functioncall	$const18 1455 	%line{333} %argrw{"r"}
# PxrBumpRoughness.osl:47
#     BumpRough textureBumpRough = NEUTRAL_BUMPROUGH;
	assign		___815_textureBumpRough.l1 $const8 	%line{47} %argrw{"wr"}
	assign		___815_textureBumpRough.l2 $const8 	%argrw{"wr"}
	assign		___815_textureBumpRough.v1 $const9 	%argrw{"wr"}
	assign		___815_textureBumpRough.v2 $const10 	%argrw{"wr"}
	assign		___815_textureBumpRough.n N 	%argrw{"wr"}
# PxrBumpRoughness.osl:48
#     vector vecD1 = 0, vecD2 = 0;
	assign		___815_vecD1 $const2 	%line{48} %argrw{"wr"}
	assign		___815_vecD2 $const2 	%argrw{"wr"}
# PxrBumpRoughness.osl:53
#                                         1e-04, floor(ss) + 0.5, floor(tt) + 0.5,
	floor		$tmp409 inputS 	%line{53} %argrw{"wr"}
	add		$tmp410 $tmp409 $const20 	%argrw{"wrr"}
	floor		$tmp411 inputT 	%argrw{"wr"}
	add		$tmp412 $tmp411 $const20 	%argrw{"wrr"}
# PxrBumpRoughness.osl:52
#     textureBumpRough = ReadBumpRough(b2r_texture,
	functioncall	$const23 1445 	%line{52} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:633
#     float baseRoughnessSqr = baseRoughness * baseRoughness;
	mul		___808_baseRoughnessSqr $const19 $const19 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{633} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:636
#     ComputeOrthonormalTangentSpace(Nin, dPds, dPdt, U, V, W);
	functioncall	$const24 1103 	%line{636} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:518
#     normal PN = cross(dPds, dPdt);
	cross		___804_PN dPdu dPdv 	%line{518} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:523
#     int lefthanded = dot(PN, Ng) < 0;
	dot		$tmp413 ___804_PN Ng 	%line{523} %argrw{"wrr"}
	lt		___804_lefthanded $tmp413 $const2 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:524
#     normal N_ = lefthanded ? -Nin : Nin;
	if		___804_lefthanded 1098 1099 	%line{524} %argrw{"r"}
	neg		___804_N_ Nin 	%argrw{"wr"}
	assign		___804_N_ Nin 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:526
#     U = normalize(cross(dPdt, N_));
	cross		$tmp414 dPdv ___804_N_ 	%line{526} %argrw{"wrr"}
	normalize	___808_U $tmp414 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:527
#     V = cross(N_, U);
	cross		___808_V ___804_N_ ___808_U 	%line{527} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:528
#     W = Nin;
	assign		___808_W Nin 	%line{528} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:639
#     BumpRough result = {baseRoughnessSqr, baseRoughnessSqr, U, V, W};
	assign		___808_result.l1 ___808_baseRoughnessSqr 	%line{639} %argrw{"wr"}
	assign		___808_result.l2 ___808_baseRoughnessSqr 	%argrw{"wr"}
	assign		___808_result.v1 ___808_U 	%argrw{"wr"}
	assign		___808_result.v2 ___808_V 	%argrw{"wr"}
	assign		___808_result.n ___808_W 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:641
#     int validDs = ReadBumpRoughTextures(filenameD1D2, inputS, inputT,
	functioncall	$const25 1318 	%line{641} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:482
#     TxCoords coords = initTxCoords(inputS, inputT, 0, 1);
	functioncall	$const26 1232 	%line{482} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:110
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 1117 1118 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{110} %argrw{"r"}
	functioncall	$const12 1117 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp415 $tmp412 	%line{48} %argrw{"wr"}
	add		$tmp416 $tmp415 $const11 	%argrw{"wrr"}
	floor		$tmp417 $tmp412 	%argrw{"wr"}
	sub		$tmp418 $tmp412 $tmp417 	%argrw{"wrr"}
	sub		___656__tt $tmp416 $tmp418 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:110
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___656__tt $tmp412 	%line{110} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:111
#     float blur0 = 0.0;
	assign		___656_blur0 $const17 	%line{111} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:113
#     if (smoothRayDerivs)
	if		$const3 1217 1224 	%line{113} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:115
#         float du = length(dPdu);  // width of the ray hit footprint projected onto the dPdu direction
	length		___657_du dPdu 	%line{115} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:116
#         float dv = length(dPdv);  // width of the ray hit footprint projected onto the dPdv direction
	length		___657_dv dPdv 	%line{116} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#         float dsdu = Dx(ss) * du;  // change in s over ray hit footprint
	Dx		$tmp419 $tmp410 	%line{118} %argrw{"wr"} %argderivs{1}
	mul		___657_dsdu $tmp419 ___657_du 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#         float dsdv = Dy(ss) * dv;
	Dy		$tmp420 $tmp410 	%line{119} %argrw{"wr"} %argderivs{1}
	mul		___657_dsdv $tmp420 ___657_dv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#         float dtdu = Dx(_tt) * du;  // change in t over ray hit footprint
	Dx		$tmp421 ___656__tt 	%line{120} %argrw{"wr"} %argderivs{1}
	mul		___657_dtdu $tmp421 ___657_du 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:121
#         float dtdv = Dy(_tt) * dv;
	Dy		$tmp422 ___656__tt 	%line{121} %argrw{"wr"} %argderivs{1}
	mul		___657_dtdv $tmp422 ___657_dv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:148
#         float det = dsdu * dtdv - dtdu * dsdv;
	mul		$tmp423 ___657_dsdu ___657_dtdv 	%line{148} %argrw{"wrr"}
	mul		$tmp424 ___657_dtdu ___657_dsdv 	%argrw{"wrr"}
	sub		___657_det $tmp423 $tmp424 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:150
#         if (det != 0.0)
	neq		$tmp425 ___657_det $const17 	%line{150} %argrw{"wrr"}
	if		$tmp425 1143 1177 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:152
#             dPds = (dPdu*dtdv - dPdv*dtdu) / det;
	mul		$tmp426 dPdu ___657_dtdv 	%line{152} %argrw{"wrr"}
	mul		$tmp427 dPdv ___657_dtdu 	%argrw{"wrr"}
	sub		$tmp428 $tmp426 $tmp427 	%argrw{"wrr"}
	div		___657_dPds $tmp428 ___657_det 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#             dPdt = (dPdv*dsdu - dPdu*dsdv) / det;
	mul		$tmp429 dPdv ___657_dsdu 	%line{153} %argrw{"wrr"}
	mul		$tmp430 dPdu ___657_dsdv 	%argrw{"wrr"}
	sub		$tmp431 $tmp429 $tmp430 	%argrw{"wrr"}
	div		___657_dPdt $tmp431 ___657_det 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#             dPds = (dsdu != 0.0) ? (dPdu / dsdu) : vector(0.0);
	neq		$tmp432 ___657_dsdu $const17 	%line{157} %argrw{"wrr"}
	if		$tmp432 1146 1147 	%argrw{"r"}
	div		___657_dPds dPdu ___657_dsdu 	%argrw{"wrr"}
	assign		___657_dPds $const1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:158
#             dPdt = (dtdv != 0.0) ? (dPdv / dtdv) : vector(0.0);
	neq		$tmp433 ___657_dtdv $const17 	%line{158} %argrw{"wrr"}
	if		$tmp433 1150 1151 	%argrw{"r"}
	div		___657_dPdt dPdv ___657_dtdv 	%argrw{"wrr"}
	assign		___657_dPdt $const1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:160
#             if (length(dPds) == 0.0 && dsdv != 0.0) dPds = dPdv / dsdv;
	length		$tmp434 ___657_dPds 	%line{160} %argrw{"wr"}
	eq		$tmp435 $tmp434 $const17 	%argrw{"wrr"}
	neq		$tmp436 $tmp435 $const2 	%argrw{"wrr"}
	if		$tmp436 1158 1158 	%argrw{"r"}
	neq		$tmp437 ___657_dsdv $const17 	%argrw{"wrr"}
	neq		$tmp438 $tmp437 $const2 	%argrw{"wrr"}
	assign		$tmp436 $tmp438 	%argrw{"wr"}
	if		$tmp436 1160 1160 	%argrw{"r"}
	div		___657_dPds dPdv ___657_dsdv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:161
#             if (length(dPdt) == 0.0 && dtdu != 0.0) dPdt = dPdu / dtdu;
	length		$tmp439 ___657_dPdt 	%line{161} %argrw{"wr"}
	eq		$tmp440 $tmp439 $const17 	%argrw{"wrr"}
	neq		$tmp441 $tmp440 $const2 	%argrw{"wrr"}
	if		$tmp441 1167 1167 	%argrw{"r"}
	neq		$tmp442 ___657_dtdu $const17 	%argrw{"wrr"}
	neq		$tmp443 $tmp442 $const2 	%argrw{"wrr"}
	assign		$tmp441 $tmp443 	%argrw{"wr"}
	if		$tmp441 1169 1169 	%argrw{"r"}
	div		___657_dPdt dPdu ___657_dtdu 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#             if (length(dPds) == 0.0) dPds = dPdt;
	length		$tmp444 ___657_dPds 	%line{163} %argrw{"wr"}
	eq		$tmp445 $tmp444 $const17 	%argrw{"wrr"}
	if		$tmp445 1173 1173 	%argrw{"r"}
	assign		___657_dPds ___657_dPdt 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:164
#             if (length(dPdt) == 0.0) dPdt = dPds;
	length		$tmp446 ___657_dPdt 	%line{164} %argrw{"wr"}
	eq		$tmp447 $tmp446 $const17 	%argrw{"wrr"}
	if		$tmp447 1177 1177 	%argrw{"r"}
	assign		___657_dPdt ___657_dPds 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         float filterwidthS = 1.0 / length(dPds);
	length		$tmp448 ___657_dPds 	%line{170} %argrw{"wr"}
	div		___657_filterwidthS $const11 $tmp448 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         float filterwidthT = 1.0 / length(dPdt);
	length		$tmp449 ___657_dPdt 	%line{171} %argrw{"wr"}
	div		___657_filterwidthT $const11 $tmp449 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:176
#         float dxss = Dx(ss);
	Dx		___657_dxss $tmp410 	%line{176} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:177
#         float dxtt = Dx(_tt);
	Dx		___657_dxtt ___656__tt 	%line{177} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:178
#         float dyss = Dy(ss);
	Dy		___657_dyss $tmp410 	%line{178} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:179
#         float dytt = Dy(_tt);
	Dy		___657_dytt ___656__tt 	%line{179} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:181
#         float signS = (abs(dxss) > abs(dyss)) ? sign(dxss) : sign(dyss);  // dominant sign (+/-) for ds
	abs		$tmp450 ___657_dxss 	%line{181} %argrw{"wr"}
	abs		$tmp451 ___657_dyss 	%argrw{"wr"}
	gt		$tmp452 $tmp450 $tmp451 	%argrw{"wrr"}
	if		$tmp452 1190 1191 	%argrw{"r"}
	sign		___657_signS ___657_dxss 	%argrw{"wr"}
	sign		___657_signS ___657_dyss 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:182
#         float signT = (abs(dxtt) > abs(dytt)) ? sign(dxtt) : sign(dytt);  // dominant sign (+/-) for dt
	abs		$tmp453 ___657_dxtt 	%line{182} %argrw{"wr"}
	abs		$tmp454 ___657_dytt 	%argrw{"wr"}
	gt		$tmp455 $tmp453 $tmp454 	%argrw{"wrr"}
	if		$tmp455 1196 1197 	%argrw{"r"}
	sign		___657_signT ___657_dxtt 	%argrw{"wr"}
	sign		___657_signT ___657_dytt 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:184
#         filterwidthS *= signS;
	mul		___657_filterwidthS ___657_filterwidthS ___657_signS 	%line{184} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#         filterwidthT *= signT;
	mul		___657_filterwidthT ___657_filterwidthT ___657_signT 	%line{185} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#         int unmixedDerivsAreDominant = (abs(dxss) > abs(dyss));
	abs		$tmp456 ___657_dxss 	%line{187} %argrw{"wr"}
	abs		$tmp457 ___657_dyss 	%argrw{"wr"}
	gt		___657_unmixedDerivsAreDominant $tmp456 $tmp457 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:188
#         if (unmixedDerivsAreDominant)
	if		___657_unmixedDerivsAreDominant 1210 1217 	%line{188} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:190
#             coords = TxCoords( ss, _tt, filterwidthS, 0.0, 0.0, filterwidthT, blur0 );
	assign		___656_coords.s $tmp410 	%line{190} %argrw{"wr"}
	assign		___656_coords.t ___656__tt 	%argrw{"wr"}
	assign		___656_coords.dsdx ___657_filterwidthS 	%argrw{"wr"}
	assign		___656_coords.dtdx $const17 	%argrw{"wr"}
	assign		___656_coords.dsdy $const17 	%argrw{"wr"}
	assign		___656_coords.dtdy ___657_filterwidthT 	%argrw{"wr"}
	assign		___656_coords.blur ___656_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:194
#             coords = TxCoords( ss, _tt, 0.0, filterwidthT, filterwidthS, 0.0, blur0 );
	assign		___656_coords.s $tmp410 	%line{194} %argrw{"wr"}
	assign		___656_coords.t ___656__tt 	%argrw{"wr"}
	assign		___656_coords.dsdx $const17 	%argrw{"wr"}
	assign		___656_coords.dtdx ___657_filterwidthT 	%argrw{"wr"}
	assign		___656_coords.dsdy ___657_filterwidthS 	%argrw{"wr"}
	assign		___656_coords.dtdy $const17 	%argrw{"wr"}
	assign		___656_coords.blur ___656_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:200
#         coords = TxCoords( ss, _tt, Dx(ss), Dx(_tt), Dy(ss), Dy(_tt), blur0 );
	assign		___656_coords.s $tmp410 	%line{200} %argrw{"wr"}
	assign		___656_coords.t ___656__tt 	%argrw{"wr"}
	Dx		___656_coords.dsdx $tmp410 	%argrw{"wr"} %argderivs{1}
	Dx		___656_coords.dtdx ___656__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___656_coords.dsdy $tmp410 	%argrw{"wr"} %argderivs{1}
	Dy		___656_coords.dtdy ___656__tt 	%argrw{"wr"} %argderivs{1}
	assign		___656_coords.blur ___656_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:203
#     return coords;
	assign		___803_coords.s ___656_coords.s 	%line{203} %argrw{"wr"}
	assign		___803_coords.t ___656_coords.t 	%argrw{"wr"}
	assign		___803_coords.dsdx ___656_coords.dsdx 	%argrw{"wr"}
	assign		___803_coords.dtdx ___656_coords.dtdx 	%argrw{"wr"}
	assign		___803_coords.dsdy ___656_coords.dsdy 	%argrw{"wr"}
	assign		___803_coords.dtdy ___656_coords.dtdy 	%argrw{"wr"}
	assign		___803_coords.blur ___656_coords.blur 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:483
#     TxParams params = {0, textureBlur, color(0), 0.0, textureFilter, textureFilterScale};
	assign		___803_params.firstchannel $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{483} %argrw{"wr"}
	assign		___803_params.blur $const22 	%argrw{"wr"}
	assign		___803_params.missingcolor $const27 	%argrw{"wr"}
	assign		___803_params.missingalpha $const17 	%argrw{"wr"}
	assign		___803_params.interp $const21 	%argrw{"wr"}
	assign		___803_params.width $const22 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:488
#     d1 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 1269 	%line{488} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:325
#     int success = 0;
	assign		___679_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{325} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:326
#     int nchannels = 0;
	assign		___679_nchannels $const2 	%line{326} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:327
#     color finalResult = 0;
	assign		___679_finalResult $const2 	%line{327} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:333
#                            "blur", max(coords.blur, params.blur),
	max		$tmp458 ___803_coords.blur ___803_params.blur 	%line{333} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:329
#     color result = texture(filename,
	texture		___679_result b2r_texture ___803_coords.s ___803_coords.t ___803_coords.dsdx ___803_coords.dtdx ___803_coords.dsdy ___803_coords.dtdy $const29 ___803_params.firstchannel $const30 $tmp458 $const31 ___803_params.missingcolor $const32 ___803_params.interp $const33 ___803_params.width 	%line{329} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:339
#     if (result == params.missingcolor) return result;
	eq		$tmp459 ___679_result ___803_params.missingcolor 	%line{339} %argrw{"wrr"}
	if		$tmp459 1248 1248 	%argrw{"r"}
	assign		___815_vecD1 ___679_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:342
#     finalResult = result;
	assign		___679_finalResult ___679_result 	%line{342} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:345
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___679_success b2r_texture $const34 ___679_nchannels 	%line{345} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:346
#     if (success && nchannels)
	neq		$tmp460 ___679_success $const2 	%line{346} %argrw{"wrr"}
	if		$tmp460 1254 1254 	%argrw{"r"}
	neq		$tmp461 ___679_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp460 $tmp461 	%argrw{"wr"}
	if		$tmp460 1268 1268 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:348
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp462 ___679_nchannels $const3 	%line{348} %argrw{"wrr"}
	neq		$tmp463 $tmp462 $const2 	%argrw{"wrr"}
	if		$tmp463 1258 1261 	%argrw{"r"}
	eq		$tmp464 ___679_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp465 $tmp464 $const2 	%argrw{"wrr"}
	assign		$tmp463 $tmp465 	%argrw{"wr"}
	if		$tmp463 1268 1268 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:351
#             finalResult[0] = result[0];
	compref		$tmp466 ___679_result $const2 	%line{351} %argrw{"wrr"}
	compassign	___679_finalResult $const2 $tmp466 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:352
#             finalResult[1] = result[0];
	compref		$tmp467 ___679_result $const2 	%line{352} %argrw{"wrr"}
	compassign	___679_finalResult $const3 $tmp467 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:353
#             finalResult[2] = result[0];
	compref		$tmp468 ___679_result $const2 	%line{353} %argrw{"wrr"}
	compassign	___679_finalResult $const4 $tmp468 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:357
#     return finalResult;
	assign		___815_vecD1 ___679_finalResult 	%line{357} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:489
#     d1[2] = max(d1[0], d1[1]);
	compref		$tmp470 ___815_vecD1 $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{489} %argrw{"wrr"}
	compref		$tmp471 ___815_vecD1 $const3 	%argrw{"wrr"}
	max		$tmp469 $tmp470 $tmp471 	%argrw{"wrr"}
	compassign	___815_vecD1 $const4 $tmp469 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:491
#     params.firstchannel = 2;
	assign		___803_params.firstchannel $const4 	%line{491} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:492
#     d2 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 1305 	%line{492} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:325
#     int success = 0;
	assign		___679_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{325} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:326
#     int nchannels = 0;
	assign		___679_nchannels $const2 	%line{326} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:327
#     color finalResult = 0;
	assign		___679_finalResult $const2 	%line{327} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:333
#                            "blur", max(coords.blur, params.blur),
	max		$tmp472 ___803_coords.blur ___803_params.blur 	%line{333} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:329
#     color result = texture(filename,
	texture		___679_result b2r_texture ___803_coords.s ___803_coords.t ___803_coords.dsdx ___803_coords.dtdx ___803_coords.dsdy ___803_coords.dtdy $const29 ___803_params.firstchannel $const30 $tmp472 $const31 ___803_params.missingcolor $const32 ___803_params.interp $const33 ___803_params.width 	%line{329} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:339
#     if (result == params.missingcolor) return result;
	eq		$tmp473 ___679_result ___803_params.missingcolor 	%line{339} %argrw{"wrr"}
	if		$tmp473 1284 1284 	%argrw{"r"}
	assign		___815_vecD2 ___679_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:342
#     finalResult = result;
	assign		___679_finalResult ___679_result 	%line{342} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:345
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___679_success b2r_texture $const34 ___679_nchannels 	%line{345} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:346
#     if (success && nchannels)
	neq		$tmp474 ___679_success $const2 	%line{346} %argrw{"wrr"}
	if		$tmp474 1290 1290 	%argrw{"r"}
	neq		$tmp475 ___679_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp474 $tmp475 	%argrw{"wr"}
	if		$tmp474 1304 1304 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:348
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp476 ___679_nchannels $const3 	%line{348} %argrw{"wrr"}
	neq		$tmp477 $tmp476 $const2 	%argrw{"wrr"}
	if		$tmp477 1294 1297 	%argrw{"r"}
	eq		$tmp478 ___679_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp479 $tmp478 $const2 	%argrw{"wrr"}
	assign		$tmp477 $tmp479 	%argrw{"wr"}
	if		$tmp477 1304 1304 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:351
#             finalResult[0] = result[0];
	compref		$tmp480 ___679_result $const2 	%line{351} %argrw{"wrr"}
	compassign	___679_finalResult $const2 $tmp480 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:352
#             finalResult[1] = result[0];
	compref		$tmp481 ___679_result $const2 	%line{352} %argrw{"wrr"}
	compassign	___679_finalResult $const3 $tmp481 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:353
#             finalResult[2] = result[0];
	compref		$tmp482 ___679_result $const2 	%line{353} %argrw{"wrr"}
	compassign	___679_finalResult $const4 $tmp482 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:357
#     return finalResult;
	assign		___815_vecD2 ___679_finalResult 	%line{357} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	functioncall	$const35 1309 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{494} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp484 ___815_vecD1 ___815_vecD1 	%line{62} %argrw{"wrr"}
	ge		$tmp483 $tmp484 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp485 $tmp483 $const2 	%line{494} %argrw{"wrr"}
	if		$tmp485 1317 1317 	%argrw{"r"}
	functioncall	$const35 1315 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp487 ___815_vecD2 ___815_vecD2 	%line{62} %argrw{"wrr"}
	ge		$tmp486 $tmp487 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp488 $tmp486 $const2 	%line{494} %argrw{"wrr"}
	assign		$tmp485 $tmp488 	%argrw{"wr"}
	assign		___808_validDs $tmp485 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#     if (validDs)
	if		___808_validDs 1440 1440 	%line{644} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:648
#         if (invertBumpNormal == 0) {
	eq		$tmp489 $const2 $const2 	%line{648} %argrw{"wrr"}
	if		$tmp489 1327 1327 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:649
#             d1[0] = -d1[0];
	compref		$tmp490 ___815_vecD1 $const2 	%line{649} %argrw{"wrr"}
	neg		$tmp491 $tmp490 	%argrw{"wr"}
	compassign	___815_vecD1 $const2 $tmp491 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:650
#             d1[1] = -d1[1];
	compref		$tmp492 ___815_vecD1 $const3 	%line{650} %argrw{"wrr"}
	neg		$tmp493 $tmp492 	%argrw{"wr"}
	compassign	___815_vecD1 $const3 $tmp493 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	functioncall	$const37 1408 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:542
#     float dx = d1[0];
	compref		___805_dx ___815_vecD1 $const2 	%line{542} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:543
#     float dy = d1[1];
	compref		___805_dy ___815_vecD1 $const3 	%line{543} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:544
#     float dxdx = d2[0];
	compref		___805_dxdx ___815_vecD2 $const2 	%line{544} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:545
#     float dydy = d2[1];
	compref		___805_dydy ___815_vecD2 $const3 	%line{545} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:546
#     float dxdy = d2[2];
	compref		___805_dxdy ___815_vecD2 $const4 	%line{546} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:554
#     float sxx = 2.0 * (dxdx - dx*dx);
	mul		$tmp495 ___805_dx ___805_dx 	%line{554} %argrw{"wrr"}
	sub		$tmp496 ___805_dxdx $tmp495 	%argrw{"wrr"}
	mul		___805_sxx $const38 $tmp496 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:555
#     float sxy = 2.0 * (dxdy - dx*dy);
	mul		$tmp497 ___805_dx ___805_dy 	%line{555} %argrw{"wrr"}
	sub		$tmp498 ___805_dxdy $tmp497 	%argrw{"wrr"}
	mul		___805_sxy $const38 $tmp498 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:556
#     float syy = 2.0 * (dydy - dy*dy);
	mul		$tmp499 ___805_dy ___805_dy 	%line{556} %argrw{"wrr"}
	sub		$tmp500 ___805_dydy $tmp499 	%argrw{"wrr"}
	mul		___805_syy $const38 $tmp500 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:558
#     if (varianceGain != 1.0) {
	neq		$tmp501 $const11 $const11 	%line{558} %argrw{"wrr"}
	if		$tmp501 1348 1348 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:559
#         float varianceGainSqr = varianceGain * varianceGain;
	mul		___806_varianceGainSqr $const11 $const11 	%line{559} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:560
#         sxx *= varianceGainSqr;
	mul		___805_sxx ___805_sxx ___806_varianceGainSqr 	%line{560} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:561
#         sxy *= varianceGainSqr;
	mul		___805_sxy ___805_sxy ___806_varianceGainSqr 	%line{561} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:562
#         syy *= varianceGainSqr;
	mul		___805_syy ___805_syy ___806_varianceGainSqr 	%line{562} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:569
#     BumpRough_CovarToEigen2D(sxx, sxy, syy, l1, l2, v1, v2);
	functioncall	$const39 1373 	%line{569} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:219
#     float del = sqrt(a*a + 4.0*b*b - 2.0*a*c + c*c);
	mul		$tmp502 ___805_sxx ___805_sxx 	%line{219} %argrw{"wrr"}
	mul		$tmp503 $const40 ___805_sxy 	%argrw{"wrr"}
	mul		$tmp504 $tmp503 ___805_sxy 	%argrw{"wrr"}
	add		$tmp505 $tmp502 $tmp504 	%argrw{"wrr"}
	mul		$tmp506 $const38 ___805_sxx 	%argrw{"wrr"}
	mul		$tmp507 $tmp506 ___805_syy 	%argrw{"wrr"}
	sub		$tmp508 $tmp505 $tmp507 	%argrw{"wrr"}
	mul		$tmp509 ___805_syy ___805_syy 	%argrw{"wrr"}
	add		$tmp510 $tmp508 $tmp509 	%argrw{"wrr"}
	sqrt		___783_del $tmp510 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:222
#     l1 = 0.5 * (a + c + del);
	add		$tmp511 ___805_sxx ___805_syy 	%line{222} %argrw{"wrr"}
	add		$tmp512 $tmp511 ___783_del 	%argrw{"wrr"}
	mul		___805_l1 $const20 $tmp512 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:223
#     l2 = 0.5 * (a + c - del);
	add		$tmp513 ___805_sxx ___805_syy 	%line{223} %argrw{"wrr"}
	sub		$tmp514 $tmp513 ___783_del 	%argrw{"wrr"}
	mul		___805_l2 $const20 $tmp514 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:226
#     v1 = normalize(vector((l1 - c)/b, 1.0, 0.0));
	sub		$tmp516 ___805_l1 ___805_syy 	%line{226} %argrw{"wrr"}
	div		$tmp517 $tmp516 ___805_sxy 	%argrw{"wrr"}
	vector		$tmp515 $tmp517 $const11 $const17 	%argrw{"wrrr"}
	normalize	___805_v1 $tmp515 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:227
#     v2 = normalize(vector((l2 - c)/b, 1.0, 0.0));
	sub		$tmp519 ___805_l2 ___805_syy 	%line{227} %argrw{"wrr"}
	div		$tmp520 $tmp519 ___805_sxy 	%argrw{"wrr"}
	vector		$tmp518 $tmp520 $const11 $const17 	%argrw{"wrrr"}
	normalize	___805_v2 $tmp518 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:572
#     bumpRough.l1 = l1;
	assign		___808_result.l1 ___805_l1 	%line{572} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:573
#     bumpRough.l2 = l2;
	assign		___808_result.l2 ___805_l2 	%line{573} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     bumpRough.v1 = U * v1[0] + V * v1[1];
	compref		$tmp521 ___805_v1 $const2 	%line{578} %argrw{"wrr"}
	mul		$tmp522 ___808_U $tmp521 	%argrw{"wrr"}
	compref		$tmp523 ___805_v1 $const3 	%argrw{"wrr"}
	mul		$tmp524 ___808_V $tmp523 	%argrw{"wrr"}
	add		___808_result.v1 $tmp522 $tmp524 	%argrw{"wrr"}
	assign		___808_result.v1 ___808_result.v1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:579
#     bumpRough.v2 = U * v2[0] + V * v2[1];
	compref		$tmp525 ___805_v2 $const2 	%line{579} %argrw{"wrr"}
	mul		$tmp526 ___808_U $tmp525 	%argrw{"wrr"}
	compref		$tmp527 ___805_v2 $const3 	%argrw{"wrr"}
	mul		$tmp528 ___808_V $tmp527 	%argrw{"wrr"}
	add		___808_result.v2 $tmp526 $tmp528 	%argrw{"wrr"}
	assign		___808_result.v2 ___808_result.v2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	mul		$tmp529 $const11 ___805_dx 	%line{582} %argrw{"wrr"}
	mul		$tmp530 $tmp529 ___808_U 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	mul		$tmp531 $const11 ___805_dy 	%line{583} %argrw{"wrr"}
	mul		$tmp532 $tmp531 ___808_V 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	add		$tmp533 $tmp530 $tmp532 	%line{582} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	add		$tmp534 $tmp533 ___808_W 	%line{583} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	normalize	___808_result.n $tmp534 	%line{582} %argrw{"wr"}
	assign		___808_result.n ___808_result.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	functioncall	$const35 1399 	%line{586} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp536 ___808_result.v1 ___808_result.v1 	%line{62} %argrw{"wrr"}
	ge		$tmp535 $tmp536 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp537 $tmp535 $const2 	%line{586} %argrw{"wrr"}
	if		$tmp537 1407 1407 	%argrw{"r"}
	functioncall	$const35 1405 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp539 ___808_result.v2 ___808_result.v2 	%line{62} %argrw{"wrr"}
	ge		$tmp538 $tmp539 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp540 $tmp538 $const2 	%line{586} %argrw{"wrr"}
	assign		$tmp537 $tmp540 	%argrw{"wr"}
	assign		$tmp494 $tmp537 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	if		$tmp494 1440 1440 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:659
#             result.l1 += baseRoughnessSqr;
	add		___808_result.l1 ___808_result.l1 ___808_baseRoughnessSqr 	%line{659} %argrw{"wrr"}
	assign		___808_result.l1 ___808_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:660
#             result.l2 += baseRoughnessSqr;
	add		___808_result.l2 ___808_result.l2 ___808_baseRoughnessSqr 	%line{660} %argrw{"wrr"}
	assign		___808_result.l2 ___808_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:662
#             if (anisotropyGain != 1.0) {
	neq		$tmp541 $const11 $const11 	%line{662} %argrw{"wrr"}
	if		$tmp541 1440 1440 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:663
#                 BumpRoughAnisotropyAdjust(anisotropyGain, result);
	functioncall	$const41 1440 	%line{663} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:596
#     float eps = 1.e-12;
	assign		___807_eps $const42 	%line{596} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:597
#     float roughnessU = sqrt(bumpRough.l1) + eps;
	sqrt		$tmp542 ___808_result.l1 	%line{597} %argrw{"wr"}
	add		___807_roughnessU $tmp542 ___807_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:598
#     float roughnessV = sqrt(bumpRough.l2) + eps;
	sqrt		$tmp543 ___808_result.l2 	%line{598} %argrw{"wr"}
	add		___807_roughnessV $tmp543 ___807_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:600
#     float ratio = roughnessU / roughnessV;
	div		___807_ratio ___807_roughnessU ___807_roughnessV 	%line{600} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:601
#     float anisotropy = (ratio - 1.0) / (ratio + 1.0);
	sub		$tmp544 ___807_ratio $const11 	%line{601} %argrw{"wrr"}
	add		$tmp545 ___807_ratio $const11 	%argrw{"wrr"}
	div		___807_anisotropy $tmp544 $tmp545 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:603
#     anisotropy = clamp(anisotropy * anisotropyGain, 0.0, 1.0);
	mul		$tmp546 ___807_anisotropy $const11 	%line{603} %argrw{"wrr"}
	functioncall	$const43 1429 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp547 $tmp546 $const11 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___807_anisotropy $tmp547 $const17 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:605
#     float alpha = 1.0 / (anisotropy*anisotropy - 2.0 * anisotropy + 2.0);
	mul		$tmp548 ___807_anisotropy ___807_anisotropy 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{605} %argrw{"wrr"}
	mul		$tmp549 $const38 ___807_anisotropy 	%argrw{"wrr"}
	sub		$tmp550 $tmp548 $tmp549 	%argrw{"wrr"}
	add		$tmp551 $tmp550 $const38 	%argrw{"wrr"}
	div		___807_alpha $const11 $tmp551 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:607
#     float variance = bumpRough.l1 + bumpRough.l2;
	add		___807_variance ___808_result.l1 ___808_result.l2 	%line{607} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:609
#     bumpRough.l1 = variance * alpha;
	mul		___808_result.l1 ___807_variance ___807_alpha 	%line{609} %argrw{"wrr"}
	assign		___808_result.l1 ___808_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:610
#     bumpRough.l2 = variance * (1.0 - alpha);
	sub		$tmp552 $const11 ___807_alpha 	%line{610} %argrw{"wrr"}
	mul		___808_result.l2 ___807_variance $tmp552 	%argrw{"wrr"}
	assign		___808_result.l2 ___808_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:668
#     return result;
	assign		___815_textureBumpRough.l1 ___808_result.l1 	%line{668} %argrw{"wr"}
	assign		___815_textureBumpRough.l2 ___808_result.l2 	%argrw{"wr"}
	assign		___815_textureBumpRough.v1 ___808_result.v1 	%argrw{"wr"}
	assign		___815_textureBumpRough.v2 ___808_result.v2 	%argrw{"wr"}
	assign		___815_textureBumpRough.n ___808_result.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:58
#     float textureRoughnessU = sqrt(textureBumpRough.l1);
	sqrt		___815_textureRoughnessU ___815_textureBumpRough.l1 	%filename{"PxrBumpRoughness.osl"} %line{58} %argrw{"wr"}
# PxrBumpRoughness.osl:59
#     float textureRoughnessV = sqrt(textureBumpRough.l2);
	sqrt		___815_textureRoughnessV ___815_textureBumpRough.l2 	%line{59} %argrw{"wr"}
# PxrBumpRoughness.osl:60
#     float rudivrv = textureRoughnessU/textureRoughnessV;
	div		___815_rudivrv ___815_textureRoughnessU ___815_textureRoughnessV 	%line{60} %argrw{"wrr"}
# PxrBumpRoughness.osl:62
#     float textureAnisotropy = (rudivrv-1.0)/(rudivrv+1.0);
	sub		$tmp553 ___815_rudivrv $const11 	%line{62} %argrw{"wrr"}
	add		$tmp554 ___815_rudivrv $const11 	%argrw{"wrr"}
	div		___815_textureAnisotropy $tmp553 $tmp554 	%argrw{"wrr"}
# PxrBumpRoughness.osl:63
#     float textureRoughnessGain = textureRoughness / (textureRoughnessU / (1 + textureAnisotropy));
	add		$tmp555 $const11 ___815_textureAnisotropy 	%line{63} %argrw{"wrr"}
	div		$tmp556 ___815_textureRoughnessU $tmp555 	%argrw{"wrr"}
	div		___815_textureRoughnessGain textureRoughness $tmp556 	%argrw{"wrr"}
# PxrBumpRoughness.osl:68
#     return textureRoughnessGain;
	assign		textureRoughnessGain ___815_textureRoughnessGain 	%line{68} %argrw{"wr"}
# PxrBumpRoughness.osl:336
#         if (BumpRough_PartialDeriv(Pos, inputS, inputT, dPds, dPdt))
	functioncall	$const46 1487 	%line{336} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:192
#     vector dQdx = Dx(Q);
	Dx		___782_dQdx Pos 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{192} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:193
#     vector dQdy = Dy(Q);
	Dy		___782_dQdy Pos 	%line{193} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:195
#     float A = Dx(a);
	Dx		___782_A inputS 	%line{195} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:196
#     float B = Dx(b);
	Dx		___782_B inputT 	%line{196} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:197
#     float C = Dy(a);
	Dy		___782_C inputS 	%line{197} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:198
#     float D = Dy(b);
	Dy		___782_D inputT 	%line{198} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:200
#     float invdet = 1./(A*D - B*C);
	mul		$tmp558 ___782_A ___782_D 	%line{200} %argrw{"wrr"}
	mul		$tmp559 ___782_B ___782_C 	%argrw{"wrr"}
	sub		$tmp560 $tmp558 $tmp559 	%argrw{"wrr"}
	div		___782_invdet $const11 $tmp560 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:202
#     dQda = (dQdx*D-dQdy*B)*invdet;
	mul		$tmp561 ___782_dQdx ___782_D 	%line{202} %argrw{"wrr"}
	mul		$tmp562 ___782_dQdy ___782_B 	%argrw{"wrr"}
	sub		$tmp563 $tmp561 $tmp562 	%argrw{"wrr"}
	mul		dPds $tmp563 ___782_invdet 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:203
#     dQdb = (dQdy*A-dQdx*C)*invdet;
	mul		$tmp564 ___782_dQdy ___782_A 	%line{203} %argrw{"wrr"}
	mul		$tmp565 ___782_dQdx ___782_C 	%argrw{"wrr"}
	sub		$tmp566 $tmp564 $tmp565 	%argrw{"wrr"}
	mul		dPdt $tmp566 ___782_invdet 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	functioncall	$const35 1478 	%line{205} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp568 dPds dPds 	%line{62} %argrw{"wrr"}
	ge		$tmp567 $tmp568 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	neq		$tmp569 $tmp567 $const2 	%line{205} %argrw{"wrr"}
	if		$tmp569 1486 1486 	%argrw{"r"}
	functioncall	$const35 1484 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp571 dPdt dPdt 	%line{62} %argrw{"wrr"}
	ge		$tmp570 $tmp571 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:205
#     return _IsValidVector(dQda) && _IsValidVector(dQdb);
	neq		$tmp572 $tmp570 $const2 	%line{205} %argrw{"wrr"}
	assign		$tmp569 $tmp572 	%argrw{"wr"}
	assign		$tmp557 $tmp569 	%argrw{"wr"}
# PxrBumpRoughness.osl:336
#         if (BumpRough_PartialDeriv(Pos, inputS, inputT, dPds, dPdt))
	if		$tmp557 1843 1843 	%filename{"PxrBumpRoughness.osl"} %line{336} %argrw{"r"}
# PxrBumpRoughness.osl:338
#             br = ReadBumpRough(b2r_texture,
	functioncall	$const23 1843 	%line{338} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:633
#     float baseRoughnessSqr = baseRoughness * baseRoughness;
	mul		___808_baseRoughnessSqr baseRoughness baseRoughness 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{633} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:636
#     ComputeOrthonormalTangentSpace(Nin, dPds, dPdt, U, V, W);
	functioncall	$const24 1501 	%line{636} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:518
#     normal PN = cross(dPds, dPdt);
	cross		___804_PN dPds dPdt 	%line{518} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:523
#     int lefthanded = dot(PN, Ng) < 0;
	dot		$tmp573 ___804_PN Ng 	%line{523} %argrw{"wrr"}
	lt		___804_lefthanded $tmp573 $const2 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:524
#     normal N_ = lefthanded ? -Nin : Nin;
	if		___804_lefthanded 1496 1497 	%line{524} %argrw{"r"}
	neg		___804_N_ Nin 	%argrw{"wr"}
	assign		___804_N_ Nin 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:526
#     U = normalize(cross(dPdt, N_));
	cross		$tmp574 dPdt ___804_N_ 	%line{526} %argrw{"wrr"}
	normalize	___808_U $tmp574 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:527
#     V = cross(N_, U);
	cross		___808_V ___804_N_ ___808_U 	%line{527} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:528
#     W = Nin;
	assign		___808_W Nin 	%line{528} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:639
#     BumpRough result = {baseRoughnessSqr, baseRoughnessSqr, U, V, W};
	assign		___808_result.l1 ___808_baseRoughnessSqr 	%line{639} %argrw{"wr"}
	assign		___808_result.l2 ___808_baseRoughnessSqr 	%argrw{"wr"}
	assign		___808_result.v1 ___808_U 	%argrw{"wr"}
	assign		___808_result.v2 ___808_V 	%argrw{"wr"}
	assign		___808_result.n ___808_W 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:641
#     int validDs = ReadBumpRoughTextures(filenameD1D2, inputS, inputT,
	functioncall	$const25 1716 	%line{641} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:482
#     TxCoords coords = initTxCoords(inputS, inputT, 0, 1);
	functioncall	$const26 1630 	%line{482} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:110
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		$const2 1515 1516 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{110} %argrw{"r"}
	functioncall	$const12 1515 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp575 inputT 	%line{48} %argrw{"wr"}
	add		$tmp576 $tmp575 $const11 	%argrw{"wrr"}
	floor		$tmp577 inputT 	%argrw{"wr"}
	sub		$tmp578 inputT $tmp577 	%argrw{"wrr"}
	sub		___656__tt $tmp576 $tmp578 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:110
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___656__tt inputT 	%line{110} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:111
#     float blur0 = 0.0;
	assign		___656_blur0 $const17 	%line{111} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:113
#     if (smoothRayDerivs)
	if		$const3 1615 1622 	%line{113} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:115
#         float du = length(dPdu);  // width of the ray hit footprint projected onto the dPdu direction
	length		___657_du dPdu 	%line{115} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:116
#         float dv = length(dPdv);  // width of the ray hit footprint projected onto the dPdv direction
	length		___657_dv dPdv 	%line{116} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#         float dsdu = Dx(ss) * du;  // change in s over ray hit footprint
	Dx		$tmp579 inputS 	%line{118} %argrw{"wr"} %argderivs{1}
	mul		___657_dsdu $tmp579 ___657_du 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#         float dsdv = Dy(ss) * dv;
	Dy		$tmp580 inputS 	%line{119} %argrw{"wr"} %argderivs{1}
	mul		___657_dsdv $tmp580 ___657_dv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#         float dtdu = Dx(_tt) * du;  // change in t over ray hit footprint
	Dx		$tmp581 ___656__tt 	%line{120} %argrw{"wr"} %argderivs{1}
	mul		___657_dtdu $tmp581 ___657_du 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:121
#         float dtdv = Dy(_tt) * dv;
	Dy		$tmp582 ___656__tt 	%line{121} %argrw{"wr"} %argderivs{1}
	mul		___657_dtdv $tmp582 ___657_dv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:148
#         float det = dsdu * dtdv - dtdu * dsdv;
	mul		$tmp583 ___657_dsdu ___657_dtdv 	%line{148} %argrw{"wrr"}
	mul		$tmp584 ___657_dtdu ___657_dsdv 	%argrw{"wrr"}
	sub		___657_det $tmp583 $tmp584 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:150
#         if (det != 0.0)
	neq		$tmp585 ___657_det $const17 	%line{150} %argrw{"wrr"}
	if		$tmp585 1541 1575 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:152
#             dPds = (dPdu*dtdv - dPdv*dtdu) / det;
	mul		$tmp586 dPdu ___657_dtdv 	%line{152} %argrw{"wrr"}
	mul		$tmp587 dPdv ___657_dtdu 	%argrw{"wrr"}
	sub		$tmp588 $tmp586 $tmp587 	%argrw{"wrr"}
	div		___657_dPds $tmp588 ___657_det 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#             dPdt = (dPdv*dsdu - dPdu*dsdv) / det;
	mul		$tmp589 dPdv ___657_dsdu 	%line{153} %argrw{"wrr"}
	mul		$tmp590 dPdu ___657_dsdv 	%argrw{"wrr"}
	sub		$tmp591 $tmp589 $tmp590 	%argrw{"wrr"}
	div		___657_dPdt $tmp591 ___657_det 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#             dPds = (dsdu != 0.0) ? (dPdu / dsdu) : vector(0.0);
	neq		$tmp592 ___657_dsdu $const17 	%line{157} %argrw{"wrr"}
	if		$tmp592 1544 1545 	%argrw{"r"}
	div		___657_dPds dPdu ___657_dsdu 	%argrw{"wrr"}
	assign		___657_dPds $const1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:158
#             dPdt = (dtdv != 0.0) ? (dPdv / dtdv) : vector(0.0);
	neq		$tmp593 ___657_dtdv $const17 	%line{158} %argrw{"wrr"}
	if		$tmp593 1548 1549 	%argrw{"r"}
	div		___657_dPdt dPdv ___657_dtdv 	%argrw{"wrr"}
	assign		___657_dPdt $const1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:160
#             if (length(dPds) == 0.0 && dsdv != 0.0) dPds = dPdv / dsdv;
	length		$tmp594 ___657_dPds 	%line{160} %argrw{"wr"}
	eq		$tmp595 $tmp594 $const17 	%argrw{"wrr"}
	neq		$tmp596 $tmp595 $const2 	%argrw{"wrr"}
	if		$tmp596 1556 1556 	%argrw{"r"}
	neq		$tmp597 ___657_dsdv $const17 	%argrw{"wrr"}
	neq		$tmp598 $tmp597 $const2 	%argrw{"wrr"}
	assign		$tmp596 $tmp598 	%argrw{"wr"}
	if		$tmp596 1558 1558 	%argrw{"r"}
	div		___657_dPds dPdv ___657_dsdv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:161
#             if (length(dPdt) == 0.0 && dtdu != 0.0) dPdt = dPdu / dtdu;
	length		$tmp599 ___657_dPdt 	%line{161} %argrw{"wr"}
	eq		$tmp600 $tmp599 $const17 	%argrw{"wrr"}
	neq		$tmp601 $tmp600 $const2 	%argrw{"wrr"}
	if		$tmp601 1565 1565 	%argrw{"r"}
	neq		$tmp602 ___657_dtdu $const17 	%argrw{"wrr"}
	neq		$tmp603 $tmp602 $const2 	%argrw{"wrr"}
	assign		$tmp601 $tmp603 	%argrw{"wr"}
	if		$tmp601 1567 1567 	%argrw{"r"}
	div		___657_dPdt dPdu ___657_dtdu 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#             if (length(dPds) == 0.0) dPds = dPdt;
	length		$tmp604 ___657_dPds 	%line{163} %argrw{"wr"}
	eq		$tmp605 $tmp604 $const17 	%argrw{"wrr"}
	if		$tmp605 1571 1571 	%argrw{"r"}
	assign		___657_dPds ___657_dPdt 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:164
#             if (length(dPdt) == 0.0) dPdt = dPds;
	length		$tmp606 ___657_dPdt 	%line{164} %argrw{"wr"}
	eq		$tmp607 $tmp606 $const17 	%argrw{"wrr"}
	if		$tmp607 1575 1575 	%argrw{"r"}
	assign		___657_dPdt ___657_dPds 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         float filterwidthS = 1.0 / length(dPds);
	length		$tmp608 ___657_dPds 	%line{170} %argrw{"wr"}
	div		___657_filterwidthS $const11 $tmp608 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         float filterwidthT = 1.0 / length(dPdt);
	length		$tmp609 ___657_dPdt 	%line{171} %argrw{"wr"}
	div		___657_filterwidthT $const11 $tmp609 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:176
#         float dxss = Dx(ss);
	Dx		___657_dxss inputS 	%line{176} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:177
#         float dxtt = Dx(_tt);
	Dx		___657_dxtt ___656__tt 	%line{177} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:178
#         float dyss = Dy(ss);
	Dy		___657_dyss inputS 	%line{178} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:179
#         float dytt = Dy(_tt);
	Dy		___657_dytt ___656__tt 	%line{179} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:181
#         float signS = (abs(dxss) > abs(dyss)) ? sign(dxss) : sign(dyss);  // dominant sign (+/-) for ds
	abs		$tmp610 ___657_dxss 	%line{181} %argrw{"wr"}
	abs		$tmp611 ___657_dyss 	%argrw{"wr"}
	gt		$tmp612 $tmp610 $tmp611 	%argrw{"wrr"}
	if		$tmp612 1588 1589 	%argrw{"r"}
	sign		___657_signS ___657_dxss 	%argrw{"wr"}
	sign		___657_signS ___657_dyss 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:182
#         float signT = (abs(dxtt) > abs(dytt)) ? sign(dxtt) : sign(dytt);  // dominant sign (+/-) for dt
	abs		$tmp613 ___657_dxtt 	%line{182} %argrw{"wr"}
	abs		$tmp614 ___657_dytt 	%argrw{"wr"}
	gt		$tmp615 $tmp613 $tmp614 	%argrw{"wrr"}
	if		$tmp615 1594 1595 	%argrw{"r"}
	sign		___657_signT ___657_dxtt 	%argrw{"wr"}
	sign		___657_signT ___657_dytt 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:184
#         filterwidthS *= signS;
	mul		___657_filterwidthS ___657_filterwidthS ___657_signS 	%line{184} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#         filterwidthT *= signT;
	mul		___657_filterwidthT ___657_filterwidthT ___657_signT 	%line{185} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#         int unmixedDerivsAreDominant = (abs(dxss) > abs(dyss));
	abs		$tmp616 ___657_dxss 	%line{187} %argrw{"wr"}
	abs		$tmp617 ___657_dyss 	%argrw{"wr"}
	gt		___657_unmixedDerivsAreDominant $tmp616 $tmp617 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:188
#         if (unmixedDerivsAreDominant)
	if		___657_unmixedDerivsAreDominant 1608 1615 	%line{188} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:190
#             coords = TxCoords( ss, _tt, filterwidthS, 0.0, 0.0, filterwidthT, blur0 );
	assign		___656_coords.s inputS 	%line{190} %argrw{"wr"}
	assign		___656_coords.t ___656__tt 	%argrw{"wr"}
	assign		___656_coords.dsdx ___657_filterwidthS 	%argrw{"wr"}
	assign		___656_coords.dtdx $const17 	%argrw{"wr"}
	assign		___656_coords.dsdy $const17 	%argrw{"wr"}
	assign		___656_coords.dtdy ___657_filterwidthT 	%argrw{"wr"}
	assign		___656_coords.blur ___656_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:194
#             coords = TxCoords( ss, _tt, 0.0, filterwidthT, filterwidthS, 0.0, blur0 );
	assign		___656_coords.s inputS 	%line{194} %argrw{"wr"}
	assign		___656_coords.t ___656__tt 	%argrw{"wr"}
	assign		___656_coords.dsdx $const17 	%argrw{"wr"}
	assign		___656_coords.dtdx ___657_filterwidthT 	%argrw{"wr"}
	assign		___656_coords.dsdy ___657_filterwidthS 	%argrw{"wr"}
	assign		___656_coords.dtdy $const17 	%argrw{"wr"}
	assign		___656_coords.blur ___656_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:200
#         coords = TxCoords( ss, _tt, Dx(ss), Dx(_tt), Dy(ss), Dy(_tt), blur0 );
	assign		___656_coords.s inputS 	%line{200} %argrw{"wr"}
	assign		___656_coords.t ___656__tt 	%argrw{"wr"}
	Dx		___656_coords.dsdx inputS 	%argrw{"wr"} %argderivs{1}
	Dx		___656_coords.dtdx ___656__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___656_coords.dsdy inputS 	%argrw{"wr"} %argderivs{1}
	Dy		___656_coords.dtdy ___656__tt 	%argrw{"wr"} %argderivs{1}
	assign		___656_coords.blur ___656_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:203
#     return coords;
	assign		___803_coords.s ___656_coords.s 	%line{203} %argrw{"wr"}
	assign		___803_coords.t ___656_coords.t 	%argrw{"wr"}
	assign		___803_coords.dsdx ___656_coords.dsdx 	%argrw{"wr"}
	assign		___803_coords.dtdx ___656_coords.dtdx 	%argrw{"wr"}
	assign		___803_coords.dsdy ___656_coords.dsdy 	%argrw{"wr"}
	assign		___803_coords.dtdy ___656_coords.dtdy 	%argrw{"wr"}
	assign		___803_coords.blur ___656_coords.blur 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:483
#     TxParams params = {0, textureBlur, color(0), 0.0, textureFilter, textureFilterScale};
	assign		___803_params.firstchannel $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{483} %argrw{"wr"}
	assign		___803_params.blur blur 	%argrw{"wr"}
	assign		___803_params.missingcolor $const27 	%argrw{"wr"}
	assign		___803_params.missingalpha $const17 	%argrw{"wr"}
	assign		___803_params.interp filter 	%argrw{"wr"}
	assign		___803_params.width filterScale 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:488
#     d1 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 1667 	%line{488} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:325
#     int success = 0;
	assign		___679_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{325} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:326
#     int nchannels = 0;
	assign		___679_nchannels $const2 	%line{326} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:327
#     color finalResult = 0;
	assign		___679_finalResult $const2 	%line{327} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:333
#                            "blur", max(coords.blur, params.blur),
	max		$tmp618 ___803_coords.blur ___803_params.blur 	%line{333} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:329
#     color result = texture(filename,
	texture		___679_result b2r_texture ___803_coords.s ___803_coords.t ___803_coords.dsdx ___803_coords.dtdx ___803_coords.dsdy ___803_coords.dtdy $const29 ___803_params.firstchannel $const30 $tmp618 $const31 ___803_params.missingcolor $const32 ___803_params.interp $const33 ___803_params.width 	%line{329} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:339
#     if (result == params.missingcolor) return result;
	eq		$tmp619 ___679_result ___803_params.missingcolor 	%line{339} %argrw{"wrr"}
	if		$tmp619 1646 1646 	%argrw{"r"}
	assign		vecD1 ___679_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:342
#     finalResult = result;
	assign		___679_finalResult ___679_result 	%line{342} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:345
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___679_success b2r_texture $const34 ___679_nchannels 	%line{345} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:346
#     if (success && nchannels)
	neq		$tmp620 ___679_success $const2 	%line{346} %argrw{"wrr"}
	if		$tmp620 1652 1652 	%argrw{"r"}
	neq		$tmp621 ___679_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp620 $tmp621 	%argrw{"wr"}
	if		$tmp620 1666 1666 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:348
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp622 ___679_nchannels $const3 	%line{348} %argrw{"wrr"}
	neq		$tmp623 $tmp622 $const2 	%argrw{"wrr"}
	if		$tmp623 1656 1659 	%argrw{"r"}
	eq		$tmp624 ___679_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp625 $tmp624 $const2 	%argrw{"wrr"}
	assign		$tmp623 $tmp625 	%argrw{"wr"}
	if		$tmp623 1666 1666 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:351
#             finalResult[0] = result[0];
	compref		$tmp626 ___679_result $const2 	%line{351} %argrw{"wrr"}
	compassign	___679_finalResult $const2 $tmp626 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:352
#             finalResult[1] = result[0];
	compref		$tmp627 ___679_result $const2 	%line{352} %argrw{"wrr"}
	compassign	___679_finalResult $const3 $tmp627 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:353
#             finalResult[2] = result[0];
	compref		$tmp628 ___679_result $const2 	%line{353} %argrw{"wrr"}
	compassign	___679_finalResult $const4 $tmp628 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:357
#     return finalResult;
	assign		vecD1 ___679_finalResult 	%line{357} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:489
#     d1[2] = max(d1[0], d1[1]);
	compref		$tmp630 vecD1 $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{489} %argrw{"wrr"}
	compref		$tmp631 vecD1 $const3 	%argrw{"wrr"}
	max		$tmp629 $tmp630 $tmp631 	%argrw{"wrr"}
	compassign	vecD1 $const4 $tmp629 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:491
#     params.firstchannel = 2;
	assign		___803_params.firstchannel $const4 	%line{491} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:492
#     d2 = (color)PxrTextureLookup(filenameD1D2, coords, params);
	functioncall	$const28 1703 	%line{492} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:325
#     int success = 0;
	assign		___679_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{325} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:326
#     int nchannels = 0;
	assign		___679_nchannels $const2 	%line{326} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:327
#     color finalResult = 0;
	assign		___679_finalResult $const2 	%line{327} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:333
#                            "blur", max(coords.blur, params.blur),
	max		$tmp632 ___803_coords.blur ___803_params.blur 	%line{333} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:329
#     color result = texture(filename,
	texture		___679_result b2r_texture ___803_coords.s ___803_coords.t ___803_coords.dsdx ___803_coords.dtdx ___803_coords.dsdy ___803_coords.dtdy $const29 ___803_params.firstchannel $const30 $tmp632 $const31 ___803_params.missingcolor $const32 ___803_params.interp $const33 ___803_params.width 	%line{329} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:339
#     if (result == params.missingcolor) return result;
	eq		$tmp633 ___679_result ___803_params.missingcolor 	%line{339} %argrw{"wrr"}
	if		$tmp633 1682 1682 	%argrw{"r"}
	assign		vecD2 ___679_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:342
#     finalResult = result;
	assign		___679_finalResult ___679_result 	%line{342} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:345
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___679_success b2r_texture $const34 ___679_nchannels 	%line{345} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:346
#     if (success && nchannels)
	neq		$tmp634 ___679_success $const2 	%line{346} %argrw{"wrr"}
	if		$tmp634 1688 1688 	%argrw{"r"}
	neq		$tmp635 ___679_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp634 $tmp635 	%argrw{"wr"}
	if		$tmp634 1702 1702 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:348
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp636 ___679_nchannels $const3 	%line{348} %argrw{"wrr"}
	neq		$tmp637 $tmp636 $const2 	%argrw{"wrr"}
	if		$tmp637 1692 1695 	%argrw{"r"}
	eq		$tmp638 ___679_nchannels $const4 	%argrw{"wrr"}
	neq		$tmp639 $tmp638 $const2 	%argrw{"wrr"}
	assign		$tmp637 $tmp639 	%argrw{"wr"}
	if		$tmp637 1702 1702 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:351
#             finalResult[0] = result[0];
	compref		$tmp640 ___679_result $const2 	%line{351} %argrw{"wrr"}
	compassign	___679_finalResult $const2 $tmp640 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:352
#             finalResult[1] = result[0];
	compref		$tmp641 ___679_result $const2 	%line{352} %argrw{"wrr"}
	compassign	___679_finalResult $const3 $tmp641 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:353
#             finalResult[2] = result[0];
	compref		$tmp642 ___679_result $const2 	%line{353} %argrw{"wrr"}
	compassign	___679_finalResult $const4 $tmp642 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:357
#     return finalResult;
	assign		vecD2 ___679_finalResult 	%line{357} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	functioncall	$const35 1707 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{494} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp644 vecD1 vecD1 	%line{62} %argrw{"wrr"}
	ge		$tmp643 $tmp644 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp645 $tmp643 $const2 	%line{494} %argrw{"wrr"}
	if		$tmp645 1715 1715 	%argrw{"r"}
	functioncall	$const35 1713 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp647 vecD2 vecD2 	%line{62} %argrw{"wrr"}
	ge		$tmp646 $tmp647 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:494
#     return _IsValidVector(d1) && _IsValidVector(d2);
	neq		$tmp648 $tmp646 $const2 	%line{494} %argrw{"wrr"}
	assign		$tmp645 $tmp648 	%argrw{"wr"}
	assign		___808_validDs $tmp645 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:644
#     if (validDs)
	if		___808_validDs 1838 1838 	%line{644} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:648
#         if (invertBumpNormal == 0) {
	eq		$tmp649 invertBumpNormal $const2 	%line{648} %argrw{"wrr"}
	if		$tmp649 1725 1725 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:649
#             d1[0] = -d1[0];
	compref		$tmp650 vecD1 $const2 	%line{649} %argrw{"wrr"}
	neg		$tmp651 $tmp650 	%argrw{"wr"}
	compassign	vecD1 $const2 $tmp651 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:650
#             d1[1] = -d1[1];
	compref		$tmp652 vecD1 $const3 	%line{650} %argrw{"wrr"}
	neg		$tmp653 $tmp652 	%argrw{"wr"}
	compassign	vecD1 $const3 $tmp653 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	functioncall	$const37 1806 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:542
#     float dx = d1[0];
	compref		___805_dx vecD1 $const2 	%line{542} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:543
#     float dy = d1[1];
	compref		___805_dy vecD1 $const3 	%line{543} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:544
#     float dxdx = d2[0];
	compref		___805_dxdx vecD2 $const2 	%line{544} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:545
#     float dydy = d2[1];
	compref		___805_dydy vecD2 $const3 	%line{545} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:546
#     float dxdy = d2[2];
	compref		___805_dxdy vecD2 $const4 	%line{546} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:554
#     float sxx = 2.0 * (dxdx - dx*dx);
	mul		$tmp655 ___805_dx ___805_dx 	%line{554} %argrw{"wrr"}
	sub		$tmp656 ___805_dxdx $tmp655 	%argrw{"wrr"}
	mul		___805_sxx $const38 $tmp656 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:555
#     float sxy = 2.0 * (dxdy - dx*dy);
	mul		$tmp657 ___805_dx ___805_dy 	%line{555} %argrw{"wrr"}
	sub		$tmp658 ___805_dxdy $tmp657 	%argrw{"wrr"}
	mul		___805_sxy $const38 $tmp658 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:556
#     float syy = 2.0 * (dydy - dy*dy);
	mul		$tmp659 ___805_dy ___805_dy 	%line{556} %argrw{"wrr"}
	sub		$tmp660 ___805_dydy $tmp659 	%argrw{"wrr"}
	mul		___805_syy $const38 $tmp660 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:558
#     if (varianceGain != 1.0) {
	neq		$tmp661 _gainRw $const11 	%line{558} %argrw{"wrr"}
	if		$tmp661 1746 1746 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:559
#         float varianceGainSqr = varianceGain * varianceGain;
	mul		___806_varianceGainSqr _gainRw _gainRw 	%line{559} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:560
#         sxx *= varianceGainSqr;
	mul		___805_sxx ___805_sxx ___806_varianceGainSqr 	%line{560} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:561
#         sxy *= varianceGainSqr;
	mul		___805_sxy ___805_sxy ___806_varianceGainSqr 	%line{561} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:562
#         syy *= varianceGainSqr;
	mul		___805_syy ___805_syy ___806_varianceGainSqr 	%line{562} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:569
#     BumpRough_CovarToEigen2D(sxx, sxy, syy, l1, l2, v1, v2);
	functioncall	$const39 1771 	%line{569} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:219
#     float del = sqrt(a*a + 4.0*b*b - 2.0*a*c + c*c);
	mul		$tmp662 ___805_sxx ___805_sxx 	%line{219} %argrw{"wrr"}
	mul		$tmp663 $const40 ___805_sxy 	%argrw{"wrr"}
	mul		$tmp664 $tmp663 ___805_sxy 	%argrw{"wrr"}
	add		$tmp665 $tmp662 $tmp664 	%argrw{"wrr"}
	mul		$tmp666 $const38 ___805_sxx 	%argrw{"wrr"}
	mul		$tmp667 $tmp666 ___805_syy 	%argrw{"wrr"}
	sub		$tmp668 $tmp665 $tmp667 	%argrw{"wrr"}
	mul		$tmp669 ___805_syy ___805_syy 	%argrw{"wrr"}
	add		$tmp670 $tmp668 $tmp669 	%argrw{"wrr"}
	sqrt		___783_del $tmp670 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:222
#     l1 = 0.5 * (a + c + del);
	add		$tmp671 ___805_sxx ___805_syy 	%line{222} %argrw{"wrr"}
	add		$tmp672 $tmp671 ___783_del 	%argrw{"wrr"}
	mul		___805_l1 $const20 $tmp672 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:223
#     l2 = 0.5 * (a + c - del);
	add		$tmp673 ___805_sxx ___805_syy 	%line{223} %argrw{"wrr"}
	sub		$tmp674 $tmp673 ___783_del 	%argrw{"wrr"}
	mul		___805_l2 $const20 $tmp674 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:226
#     v1 = normalize(vector((l1 - c)/b, 1.0, 0.0));
	sub		$tmp676 ___805_l1 ___805_syy 	%line{226} %argrw{"wrr"}
	div		$tmp677 $tmp676 ___805_sxy 	%argrw{"wrr"}
	vector		$tmp675 $tmp677 $const11 $const17 	%argrw{"wrrr"}
	normalize	___805_v1 $tmp675 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:227
#     v2 = normalize(vector((l2 - c)/b, 1.0, 0.0));
	sub		$tmp679 ___805_l2 ___805_syy 	%line{227} %argrw{"wrr"}
	div		$tmp680 $tmp679 ___805_sxy 	%argrw{"wrr"}
	vector		$tmp678 $tmp680 $const11 $const17 	%argrw{"wrrr"}
	normalize	___805_v2 $tmp678 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:572
#     bumpRough.l1 = l1;
	assign		___808_result.l1 ___805_l1 	%line{572} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:573
#     bumpRough.l2 = l2;
	assign		___808_result.l2 ___805_l2 	%line{573} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:578
#     bumpRough.v1 = U * v1[0] + V * v1[1];
	compref		$tmp681 ___805_v1 $const2 	%line{578} %argrw{"wrr"}
	mul		$tmp682 ___808_U $tmp681 	%argrw{"wrr"}
	compref		$tmp683 ___805_v1 $const3 	%argrw{"wrr"}
	mul		$tmp684 ___808_V $tmp683 	%argrw{"wrr"}
	add		___808_result.v1 $tmp682 $tmp684 	%argrw{"wrr"}
	assign		___808_result.v1 ___808_result.v1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:579
#     bumpRough.v2 = U * v2[0] + V * v2[1];
	compref		$tmp685 ___805_v2 $const2 	%line{579} %argrw{"wrr"}
	mul		$tmp686 ___808_U $tmp685 	%argrw{"wrr"}
	compref		$tmp687 ___805_v2 $const3 	%argrw{"wrr"}
	mul		$tmp688 ___808_V $tmp687 	%argrw{"wrr"}
	add		___808_result.v2 $tmp686 $tmp688 	%argrw{"wrr"}
	assign		___808_result.v2 ___808_result.v2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	mul		$tmp689 _bumpNormalGainRw ___805_dx 	%line{582} %argrw{"wrr"}
	mul		$tmp690 $tmp689 ___808_U 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	mul		$tmp691 _bumpNormalGainRw ___805_dy 	%line{583} %argrw{"wrr"}
	mul		$tmp692 $tmp691 ___808_V 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	add		$tmp693 $tmp690 $tmp692 	%line{582} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:583
#                             bumpNormalGain * dy * V +
	add		$tmp694 $tmp693 ___808_W 	%line{583} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:582
#     bumpRough.n = normalize(bumpNormalGain * dx * U +
	normalize	___808_result.n $tmp694 	%line{582} %argrw{"wr"}
	assign		___808_result.n ___808_result.n 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	functioncall	$const35 1797 	%line{586} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp696 ___808_result.v1 ___808_result.v1 	%line{62} %argrw{"wrr"}
	ge		$tmp695 $tmp696 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp697 $tmp695 $const2 	%line{586} %argrw{"wrr"}
	if		$tmp697 1805 1805 	%argrw{"r"}
	functioncall	$const35 1803 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:61
#     float epsilon = 1.e-8;
	assign		___766_epsilon $const36 	%line{61} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:62
#     return dot(v, v) >= epsilon;
	dot		$tmp699 ___808_result.v2 ___808_result.v2 	%line{62} %argrw{"wrr"}
	ge		$tmp698 $tmp699 ___766_epsilon 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:586
#     return _IsValidVector(bumpRough.v1) && _IsValidVector(bumpRough.v2);
	neq		$tmp700 $tmp698 $const2 	%line{586} %argrw{"wrr"}
	assign		$tmp697 $tmp700 	%argrw{"wr"}
	assign		$tmp654 $tmp697 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:653
#         if (ComputeBumpRoughStruct(d1, d2, U, V, W, result,
	if		$tmp654 1838 1838 	%line{653} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:659
#             result.l1 += baseRoughnessSqr;
	add		___808_result.l1 ___808_result.l1 ___808_baseRoughnessSqr 	%line{659} %argrw{"wrr"}
	assign		___808_result.l1 ___808_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:660
#             result.l2 += baseRoughnessSqr;
	add		___808_result.l2 ___808_result.l2 ___808_baseRoughnessSqr 	%line{660} %argrw{"wrr"}
	assign		___808_result.l2 ___808_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:662
#             if (anisotropyGain != 1.0) {
	neq		$tmp701 anisotropyGain $const11 	%line{662} %argrw{"wrr"}
	if		$tmp701 1838 1838 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:663
#                 BumpRoughAnisotropyAdjust(anisotropyGain, result);
	functioncall	$const41 1838 	%line{663} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:596
#     float eps = 1.e-12;
	assign		___807_eps $const42 	%line{596} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:597
#     float roughnessU = sqrt(bumpRough.l1) + eps;
	sqrt		$tmp702 ___808_result.l1 	%line{597} %argrw{"wr"}
	add		___807_roughnessU $tmp702 ___807_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:598
#     float roughnessV = sqrt(bumpRough.l2) + eps;
	sqrt		$tmp703 ___808_result.l2 	%line{598} %argrw{"wr"}
	add		___807_roughnessV $tmp703 ___807_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:600
#     float ratio = roughnessU / roughnessV;
	div		___807_ratio ___807_roughnessU ___807_roughnessV 	%line{600} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:601
#     float anisotropy = (ratio - 1.0) / (ratio + 1.0);
	sub		$tmp704 ___807_ratio $const11 	%line{601} %argrw{"wrr"}
	add		$tmp705 ___807_ratio $const11 	%argrw{"wrr"}
	div		___807_anisotropy $tmp704 $tmp705 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:603
#     anisotropy = clamp(anisotropy * anisotropyGain, 0.0, 1.0);
	mul		$tmp706 ___807_anisotropy anisotropyGain 	%line{603} %argrw{"wrr"}
	functioncall	$const43 1827 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp707 $tmp706 $const11 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___807_anisotropy $tmp707 $const17 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:605
#     float alpha = 1.0 / (anisotropy*anisotropy - 2.0 * anisotropy + 2.0);
	mul		$tmp708 ___807_anisotropy ___807_anisotropy 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{605} %argrw{"wrr"}
	mul		$tmp709 $const38 ___807_anisotropy 	%argrw{"wrr"}
	sub		$tmp710 $tmp708 $tmp709 	%argrw{"wrr"}
	add		$tmp711 $tmp710 $const38 	%argrw{"wrr"}
	div		___807_alpha $const11 $tmp711 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:607
#     float variance = bumpRough.l1 + bumpRough.l2;
	add		___807_variance ___808_result.l1 ___808_result.l2 	%line{607} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:609
#     bumpRough.l1 = variance * alpha;
	mul		___808_result.l1 ___807_variance ___807_alpha 	%line{609} %argrw{"wrr"}
	assign		___808_result.l1 ___808_result.l1 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:610
#     bumpRough.l2 = variance * (1.0 - alpha);
	sub		$tmp712 $const11 ___807_alpha 	%line{610} %argrw{"wrr"}
	mul		___808_result.l2 ___807_variance $tmp712 	%argrw{"wrr"}
	assign		___808_result.l2 ___808_result.l2 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:668
#     return result;
	assign		br.l1 ___808_result.l1 	%line{668} %argrw{"wr"}
	assign		br.l2 ___808_result.l2 	%argrw{"wr"}
	assign		br.v1 ___808_result.v1 	%argrw{"wr"}
	assign		br.v2 ___808_result.v2 	%argrw{"wr"}
	assign		br.n ___808_result.n 	%argrw{"wr"}
# PxrBumpRoughness.osl:346
#     bumpRoughComponents(br, resultRoughness, resultAnisotropy,
	functioncall	$const56 1854 	%filename{"PxrBumpRoughness.osl"} %line{346} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:677
#     float resultRoughnessU = sqrt(br.l1);
	sqrt		___813_resultRoughnessU br.l1 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h"} %line{677} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:678
#     float resultRoughnessV = sqrt(br.l2);
	sqrt		___813_resultRoughnessV br.l2 	%line{678} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:679
#     float rudivrv = resultRoughnessU/resultRoughnessV;
	div		___813_rudivrv ___813_resultRoughnessU ___813_resultRoughnessV 	%line{679} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:681
#     roughness = resultRoughnessU / (1.0 + anisotropy);
	add		$tmp713 $const11 resultAnisotropy 	%line{681} %argrw{"wrr"}
	div		resultRoughness ___813_resultRoughnessU $tmp713 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:682
#     anisotropy = (rudivrv - 1.0) / (rudivrv + 1.0);
	sub		$tmp714 ___813_rudivrv $const11 	%line{682} %argrw{"wrr"}
	add		$tmp715 ___813_rudivrv $const11 	%argrw{"wrr"}
	div		resultAnisotropy $tmp714 $tmp715 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:683
#     anisotropyDirection = br.v1;
	assign		resultAnisotropyDirection br.v1 	%line{683} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLBumpRough.h:684
#     bumpN = normalize(br.n);
	normalize	resultN br.n 	%line{684} %argrw{"wr"}
# PxrBumpRoughness.osl:350
#     vector Vn = normalize(-I);
	neg		$tmp716 I 	%filename{"PxrBumpRoughness.osl"} %line{350} %argrw{"wr"}
	normalize	Vn $tmp716 	%argrw{"wr"}
# PxrBumpRoughness.osl:351
#     RixAdjustNormal(adjustAmount, Vn, Ng, resultN);
	functioncall	$const57 1871 	%line{351} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:198
#     if (amount == 0) return;
	eq		$tmp717 adjustAmount $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{198} %argrw{"wrr"}
	if		$tmp717 1860 1860 	%argrw{"r"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:200
#     if (dot(Vn, Ngn) >= 0)
	dot		$tmp718 Vn Ng 	%line{200} %argrw{"wrr"}
	ge		$tmp719 $tmp718 $const2 	%argrw{"wrr"}
	if		$tmp719 1871 1871 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:202
#         float VdotN = dot(Vn, Nn);
	dot		___729_VdotN Vn resultN 	%line{202} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:203
#         if (VdotN <= 0)
	le		$tmp720 ___729_VdotN $const2 	%line{203} %argrw{"wrr"}
	if		$tmp720 1871 1871 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:207
#             Nn -= amount * 1.01 * VdotN * Vn;
	mul		$tmp721 adjustAmount $const58 	%line{207} %argrw{"wrr"}
	mul		$tmp722 $tmp721 ___729_VdotN 	%argrw{"wrr"}
	mul		$tmp723 $tmp722 Vn 	%argrw{"wrr"}
	sub		resultN resultN $tmp723 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:208
#             Nn = normalize(Nn);
	normalize	resultN resultN 	%line{208} %argrw{"wr"}
# PxrBumpRoughness.osl:352
#     RixBlendWithNormal(surfaceNormalMix, N, resultN);
	functioncall	$const59 1876 	%filename{"PxrBumpRoughness.osl"} %line{352} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:215
#     if (surfaceNormalMix > 0)
	gt		$tmp724 surfaceNormalMix $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{215} %argrw{"wrr"}
	if		$tmp724 1876 1876 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:216
#         bumpN = normalize(mix(bumpN, Nn, surfaceNormalMix));
	mix		$tmp725 resultN N surfaceNormalMix 	%line{216} %argrw{"wrrr"}
	normalize	resultN $tmp725 	%argrw{"wr"}
# PxrBumpRoughness.osl:354
#     if (isconnected(resultNG))
	isconnected	$tmp726 resultNG 	%filename{"PxrBumpRoughness.osl"} %line{354} %argrw{"wr"}
	if		$tmp726 1885 1885 	%argrw{"r"}
# PxrBumpRoughness.osl:356
#         resultNG = surfgradFromPerturbedNormal(resultN, N);
	functioncall	$const60 1885 	%line{356} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:100
# 	float k = dot(Nn, bN);
	dot		___717_k N resultN 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{100} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:101
# 	return (k * Nn - bN) / max(1.0e-8, abs(k));
	mul		$tmp727 ___717_k N 	%line{101} %argrw{"wrr"}
	sub		$tmp728 $tmp727 resultN 	%argrw{"wrr"}
	abs		$tmp730 ___717_k 	%argrw{"wr"}
	max		$tmp729 $const36 $tmp730 	%argrw{"wrr"}
	div		resultNG $tmp728 $tmp729 	%argrw{"wrr"}
	end
