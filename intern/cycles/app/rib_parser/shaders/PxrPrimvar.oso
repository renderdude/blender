OpenShadingLanguage 1.00
# Compiled by oslc 1.11.0@OPROJECT_VERSION_RELEASE_TYPE@
# options: -DOSX -I/Users/Shared/build/ratbuild/rman/_built/osxMonterey_x86-64_clang14_external_release/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/common -I/Users/Shared/build/ratbuild/rmanshare/RIS/pattern/osl -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl -o /Users/Shared/build/ratbuild/rmanshare/_built/osxMonterey_x86-64_clang14_external_release/osl/PxrPrimvar.osl/obj/PxrPrimvar.oso
shader PxrPrimvar	%meta{int,rfm_nodeid,1053400} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/utility"} %meta{string,rfh_classification,"Pattern/Utility"} 
param	string	variable	""		%meta{string,widget,"mapper"} %meta{int,connectable,0} %meta{string,options,"Use Named Primvar:|Shading position (P):P|Undisplaced position(Po):Po|Shading normal (Nn):N|Geometric normal (Ngn):Ngn|Undisplaced normal (Non):Non|Shading tangent (Tn):Tn|Normalized view vector (Vn):Vn|Length of view vector (VLen):VLen|Surface mean curvature (curvature):curvature|Surface principal curvature in u dir (curvatureU):curvatureU|Surface principal curvature in v dir (curvatureV):curvatureV|Ray Spread (incidentRaySpread):incidentRaySpread|Ray Radius (incidentRayRadius):incidentRayRadius|Micropolygon radius (PRadius):PRadius|Micropolygon size (mpSize):mpSize|Reflection Bias (biasR):biasR|Transmission (biasT):biasT|Surface U (u):u|Surface V (v):v|Surface W (w):w|Surface UV (uv):uv|Surface UVW (uvw):uvw|Ray footprint U (du):du|Ray footprint V (dv):dv|Ray footprint W (dw):dw|Ray footprint UV (duv):duv|Ray footprint UVW (duvw):duvw|Surface derivative U (dPdu):dPdu|Surface derivative V (dPdv):dPdv|Surface derivative W (dPdw):dPdw|Velocity (dPdtime):dPdtime|Time (time):time|Outside IOR (outsideIOR):outsideIOR|Opacity (Oi):Oi|Forward Motion (motionFore):motionFore|Backward Motion (motionBack):motionBack"} %meta{string,label,"Variable"}  %read{2,5} %write{2147483647,-1}
param	string	varname	""		%meta{string,widget,"default"} %meta{int,connectable,0} %meta{string,label,"Variable Name"}  %read{4,4} %write{2147483647,-1}
param	string	type	"float"		%meta{string,widget,"mapper"} %meta{int,connectable,0} %meta{string,label,"Variable Type"} %meta{string,options,"Float:float|Float2:float2|Color:color|Point:point|Vector:vector|Normal:normal|Integer:int"}  %read{6,149} %write{2147483647,-1}
param	string	coordsys	"object"		%meta{string,widget,"string"} %meta{string,houdiniui,"oplist"} %meta{string,help,"By default, the shader uses object for coordinate system.  Possible coordinate systems include world, object, or a user defined coordinate system. "} %meta{int,connectable,0} %meta{string,conditionalVisOp,"or"} %meta{string,conditionalVisLeft,"conditionalVis1"} %meta{string,conditionalVisRight,"conditionalVis2"} %meta{string,conditionalVis2Op,"or"} %meta{string,conditionalVis2Left,"conditionalVis3"} %meta{string,conditionalVis2Right,"conditionalVis4"} %meta{string,conditionalVis1Path,"../type"} %meta{string,conditionalVis1Op,"equalTo"} %meta{string,conditionalVis1Value,"point"} %meta{string,conditionalVis3Path,"../type"} %meta{string,conditionalVis3Op,"equalTo"} %meta{string,conditionalVis3Value,"vector"} %meta{string,conditionalVis4Path,"../type"} %meta{string,conditionalVis4Op,"equalTo"} %meta{string,conditionalVis4Value,"normal"} %meta{string,label,"Coordinate System"}  %read{29,100} %write{2147483647,-1}
param	int	defaultInt	0		%meta{string,widget,"int"} %meta{string,help,"If there is an error when retrieving a variable of type 'int', this is the value that will be used. "} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"../type"} %meta{string,conditionalVisValue,"int"} %meta{string,label,"Default Int"}  %read{151,151} %write{2147483647,-1}
param	float	defaultFloat	0		%meta{string,widget,"float"} %meta{string,help,"If there is an error when retrieving a variable of type 'float', this is the value that will be used. "} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"../type"} %meta{string,conditionalVisValue,"float"} %meta{string,label,"Default Float"}  %read{165,165} %write{2147483647,-1}
param	vector	defaultFloat3	0 0 0		%meta{string,widget,"vector"} %meta{string,help,"If there is an error when retrieving a variable of type 'float2', 'normal', 'point' or 'vector', this is the value that will be used. For the type 'float2', only the first two components will be used. "} %meta{string,conditionalVisOp,"and"} %meta{string,conditionalVisLeft,"conditionalVis1"} %meta{string,conditionalVisRight,"conditionalVis2"} %meta{string,conditionalVis2Op,"and"} %meta{string,conditionalVis2Left,"conditionalVis3"} %meta{string,conditionalVis2Right,"conditionalVis4"} %meta{string,conditionalVis1Path,"../type"} %meta{string,conditionalVis1Op,"notEqualTo"} %meta{string,conditionalVis1Value,"float"} %meta{string,conditionalVis3Path,"../type"} %meta{string,conditionalVis3Op,"notEqualTo"} %meta{string,conditionalVis3Value,"color"} %meta{string,conditionalVis4Path,"../type"} %meta{string,conditionalVis4Op,"notEqualTo"} %meta{string,conditionalVis4Value,"int"} %meta{string,label,"Default Float3"}  %read{24,119} %write{2147483647,-1}
param	int	transformDefaultValues	1		%meta{string,widget,"checkBox"} %meta{string,help,"If this is not checked, the default values are used directly. If this is checked, the default values will be transformed from 'object' to 'Coordinate System' (similarly to what happens for primvars values). This setting is only used for 'normal', 'point' or 'vector' types, and only when the primvar wasn't found. "} %meta{int,connectable,0} %meta{string,conditionalVisOp,"or"} %meta{string,conditionalVisLeft,"conditionalVis1"} %meta{string,conditionalVisRight,"conditionalVis2"} %meta{string,conditionalVis2Op,"or"} %meta{string,conditionalVis2Left,"conditionalVis3"} %meta{string,conditionalVis2Right,"conditionalVis4"} %meta{string,conditionalVis1Path,"../type"} %meta{string,conditionalVis1Op,"equalTo"} %meta{string,conditionalVis1Value,"point"} %meta{string,conditionalVis3Path,"../type"} %meta{string,conditionalVis3Op,"equalTo"} %meta{string,conditionalVis3Value,"vector"} %meta{string,conditionalVis4Path,"../type"} %meta{string,conditionalVis4Op,"equalTo"} %meta{string,conditionalVis4Value,"normal"} %meta{string,label,"Transform Default Values"}  %read{25,25} %write{2147483647,-1}
param	color	defaultColor	0 1 0		%meta{string,widget,"color"} %meta{string,help,"If there is an error when retrieving a variable of type 'normal', 'point' or 'vector', this is the value that will be used. "} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"../type"} %meta{string,conditionalVisValue,"color"} %meta{string,label,"Default Color"}  %read{40,40} %write{2147483647,-1}
param	int	verbosity	0		%meta{string,widget,"mapper"} %meta{string,options,"Silent:0|Warnings:1|Info:2"} %meta{string,help,"Diagnostic output levels for scene debugging."} %meta{int,connectable,0} %meta{string,label,"Verbosity"}  %read{216,216} %write{2147483647,-1}
oparam	color	resultRGB	0 0 0		%meta{string,help,"resultRGB (color)"}  %read{221,223} %write{101,194}
oparam	float	resultR	0		%meta{string,help,"resultR (float)"}  %read{2147483647,-1} %write{221,221}
oparam	float	resultG	0		%meta{string,help,"resultG (float)"}  %read{2147483647,-1} %write{222,222}
oparam	float	resultB	0		%meta{string,help,"resultB (float)"}  %read{2147483647,-1} %write{223,223}
oparam	float	resultF	0		%meta{string,help,"resultF (float)"}  %read{2147483647,-1} %write{102,193}
oparam	point	resultP	0 0 0		%meta{string,help,"resultP (vector)"}  %read{2147483647,-1} %write{0,195} %initexpr
oparam	float	width	0		%meta{string,help,"width (float)"}  %read{2147483647,-1} %write{104,212}
global	vector	I	%read{59,182} %write{2147483647,-1}
global	normal	N	%read{51,51} %write{2147483647,-1}
global	normal	Ng	%read{55,55} %write{2147483647,-1}
global	float	u	%read{43,168} %write{2147483647,-1}
global	float	v	%read{43,171} %write{2147483647,-1}
global	float	time	%read{185,185} %write{2147483647,-1}
global	vector	dPdtime	%read{75,75} %write{2147483647,-1}
local	int	found	%read{78,213} %write{1,192}
local	string	var	%read{41,220} %write{4,5}
local	int	___327_transformVal	%read{86,86} %write{23,76}
local	vector	___327_value	%read{28,103} %write{24,100}
local	point	___329_val	%read{29,29} %write{28,28}
local	normal	___330_val	%read{33,33} %write{32,32}
local	vector	___331_val	%read{37,37} %write{36,36}
local	float	___337_du	%read{66,66} %write{64,64}
local	float	___337_dv	%read{66,66} %write{65,65}
local	float	___338_du	%read{72,72} %write{69,69}
local	float	___338_dv	%read{72,72} %write{70,70}
local	float	___338_dw	%read{72,72} %write{71,71}
local	point	___344_val	%read{92,92} %write{91,91}
local	normal	___345_val	%read{96,96} %write{95,95}
local	vector	___346_val	%read{100,100} %write{99,99}
local	float[2]	___347_value	%read{141,146} %write{118,140}
local	int	___353_value	%read{159,162} %write{151,158}
local	float	___356_value	%read{193,195} %write{165,192}
const	vector	$const1	0 0 0		%read{0,0} %write{2147483647,-1}
const	int	$const2	1		%read{1,222} %write{2147483647,-1}
const	string	$const3	""		%read{2,2} %write{2147483647,-1}
temp	int	$tmp1	%read{3,3} %write{2,2}
const	string	$const4	"point"		%read{6,89} %write{2147483647,-1}
temp	int	$tmp2	%read{7,7} %write{6,6}
temp	int	$tmp3	%read{8,12} %write{7,11}
const	int	$const5	0		%read{7,221} %write{2147483647,-1}
const	string	$const6	"normal"		%read{9,93} %write{2147483647,-1}
temp	int	$tmp4	%read{10,10} %write{9,9}
temp	int	$tmp5	%read{11,11} %write{10,10}
temp	int	$tmp6	%read{13,17} %write{12,16}
const	string	$const7	"vector"		%read{14,97} %write{2147483647,-1}
temp	int	$tmp7	%read{15,15} %write{14,14}
temp	int	$tmp8	%read{16,16} %write{15,15}
temp	int	$tmp9	%read{18,22} %write{17,21}
const	string	$const8	"color"		%read{19,38} %write{2147483647,-1}
temp	int	$tmp10	%read{20,20} %write{19,19}
temp	int	$tmp11	%read{21,21} %write{20,20}
temp	int	$tmp12	%read{27,27} %write{26,26}
const	string	$const9	"object"		%read{29,37} %write{2147483647,-1}
temp	int	$tmp13	%read{31,31} %write{30,30}
temp	int	$tmp14	%read{35,35} %write{34,34}
temp	int	$tmp15	%read{39,39} %write{38,38}
const	string	$const10	"uvw"		%read{41,41} %write{2147483647,-1}
temp	int	$tmp16	%read{42,42} %write{41,41}
const	float	$const11	0		%read{43,147} %write{2147483647,-1}
const	string	$const12	"N"		%read{44,44} %write{2147483647,-1}
temp	int	$tmp17	%read{45,45} %write{44,44}
temp	int	$tmp18	%read{46,50} %write{45,49}
const	string	$const13	"Nn"		%read{47,47} %write{2147483647,-1}
temp	int	$tmp19	%read{48,48} %write{47,47}
temp	int	$tmp20	%read{49,49} %write{48,48}
const	string	$const14	"Ngn"		%read{53,53} %write{2147483647,-1}
temp	int	$tmp21	%read{54,54} %write{53,53}
const	string	$const15	"Vn"		%read{57,57} %write{2147483647,-1}
temp	int	$tmp22	%read{58,58} %write{57,57}
temp	vector	$tmp23	%read{60,60} %write{59,59}
const	string	$const16	"duv"		%read{62,62} %write{2147483647,-1}
temp	int	$tmp24	%read{63,63} %write{62,62}
const	string	$const17	"builtin"		%read{64,211} %write{2147483647,-1}
const	string	$const18	"du"		%read{64,203} %write{2147483647,-1}
const	string	$const19	"dv"		%read{65,211} %write{2147483647,-1}
const	string	$const20	"duvw"		%read{67,67} %write{2147483647,-1}
temp	int	$tmp25	%read{68,68} %write{67,67}
const	string	$const21	"dw"		%read{71,71} %write{2147483647,-1}
const	string	$const22	"dPdtime"		%read{73,73} %write{2147483647,-1}
temp	int	$tmp26	%read{74,74} %write{73,73}
const	string	$const23	"primvar"		%read{77,186} %write{2147483647,-1}
temp	int	$tmp27	%read{79,79} %write{78,78}
temp	int	$tmp28	%read{82,82} %write{81,81}
temp	int	$tmp29	%read{85,88} %write{84,87}
temp	int	$tmp30	%read{87,87} %write{86,86}
temp	int	$tmp31	%read{90,90} %write{89,89}
const	string	$const24	"current"		%read{92,100} %write{2147483647,-1}
temp	int	$tmp32	%read{94,94} %write{93,93}
temp	int	$tmp33	%read{98,98} %write{97,97}
const	string	$const25	"float[2]"		%read{105,105} %write{2147483647,-1}
temp	int	$tmp34	%read{106,106} %write{105,105}
temp	int	$tmp35	%read{107,111} %write{106,110}
const	string	$const26	"float2"		%read{108,108} %write{2147483647,-1}
temp	int	$tmp36	%read{109,109} %write{108,108}
temp	int	$tmp37	%read{110,110} %write{109,109}
temp	int	$tmp38	%read{112,116} %write{111,115}
const	string	$const27	"st"		%read{113,135} %write{2147483647,-1}
temp	int	$tmp39	%read{114,114} %write{113,113}
temp	int	$tmp40	%read{115,115} %write{114,114}
temp	float	$tmp41	%read{118,118} %write{117,117}
temp	float	$tmp42	%read{120,120} %write{119,119}
const	string	$const28	"uv"		%read{121,121} %write{2147483647,-1}
temp	int	$tmp43	%read{122,122} %write{121,121}
temp	int	$tmp44	%read{127,127} %write{126,126}
temp	int	$tmp45	%read{130,130} %write{129,129}
temp	int	$tmp46	%read{133,133} %write{132,132}
temp	int	$tmp47	%read{134,138} %write{133,137}
temp	int	$tmp48	%read{136,136} %write{135,135}
temp	int	$tmp49	%read{137,137} %write{136,136}
temp	float	$tmp50	%read{144,144} %write{142,142}
temp	float	$tmp51	%read{144,144} %write{143,143}
temp	float	$tmp52	%read{147,147} %write{145,145}
temp	float	$tmp53	%read{147,147} %write{146,146}
const	string	$const29	"int"		%read{149,149} %write{2147483647,-1}
temp	int	$tmp54	%read{150,150} %write{149,149}
temp	int	$tmp55	%read{154,154} %write{153,153}
temp	int	$tmp56	%read{157,157} %write{156,156}
temp	float	$tmp57	%read{161,161} %write{160,160}
temp	float	$tmp58	%read{163,163} %write{162,162}
const	string	$const30	"U"		%read{166,199} %write{2147483647,-1}
temp	int	$tmp59	%read{167,167} %write{166,166}
const	string	$const31	"V"		%read{169,207} %write{2147483647,-1}
temp	int	$tmp60	%read{170,170} %write{169,169}
const	string	$const32	"w"		%read{172,172} %write{2147483647,-1}
temp	int	$tmp61	%read{173,173} %write{172,172}
temp	int	$tmp62	%read{174,178} %write{173,177}
const	string	$const33	"W"		%read{175,175} %write{2147483647,-1}
temp	int	$tmp63	%read{176,176} %write{175,175}
temp	int	$tmp64	%read{177,177} %write{176,176}
const	string	$const34	"VLen"		%read{180,180} %write{2147483647,-1}
temp	int	$tmp65	%read{181,181} %write{180,180}
const	string	$const35	"time"		%read{183,183} %write{2147483647,-1}
temp	int	$tmp66	%read{184,184} %write{183,183}
temp	int	$tmp67	%read{188,188} %write{187,187}
temp	int	$tmp68	%read{191,191} %write{190,190}
const	string	$const36	"u"		%read{196,196} %write{2147483647,-1}
temp	int	$tmp69	%read{197,197} %write{196,196}
temp	int	$tmp70	%read{198,202} %write{197,201}
temp	int	$tmp71	%read{200,200} %write{199,199}
temp	int	$tmp72	%read{201,201} %write{200,200}
temp	int	$tmp73	%read{2147483647,-1} %write{203,203}
const	string	$const37	"v"		%read{204,204} %write{2147483647,-1}
temp	int	$tmp74	%read{205,205} %write{204,204}
temp	int	$tmp75	%read{206,210} %write{205,209}
temp	int	$tmp76	%read{208,208} %write{207,207}
temp	int	$tmp77	%read{209,209} %write{208,208}
temp	int	$tmp78	%read{2147483647,-1} %write{211,211}
temp	int	$tmp79	%read{214,214} %write{213,213}
temp	int	$tmp80	%read{215,219} %write{214,218}
temp	int	$tmp81	%read{217,217} %write{216,216}
temp	int	$tmp82	%read{218,218} %write{217,217}
const	string	$const38	"[PxrPrimvar] Could not find: '%s' primvar"		%read{220,220} %write{2147483647,-1}
const	int	$const39	2		%read{223,223} %write{2147483647,-1}
code resultP
# PxrPrimvar.osl:244
#     output point resultP = vector(0.0, 0.0, 0.0)
	assign		resultP $const1 	%filename{"PxrPrimvar.osl"} %line{244} %argrw{"wr"}
code ___main___
# PxrPrimvar.osl:255
#     int found = 1;
	assign		found $const2 	%filename{"PxrPrimvar.osl"} %line{255} %argrw{"wr"}
# PxrPrimvar.osl:259
#     if (variable == "")
	eq		$tmp1 variable $const3 	%line{259} %argrw{"wrr"}
	if		$tmp1 5 6 	%argrw{"r"}
# PxrPrimvar.osl:261
#         var = varname;
	assign		var varname 	%line{261} %argrw{"wr"}
# PxrPrimvar.osl:265
#         var = variable;
	assign		var variable 	%line{265} %argrw{"wr"}
# PxrPrimvar.osl:269
#     if ((type == "point") || (type == "normal") || (type == "vector") || (type == "color"))
	eq		$tmp2 type $const4 	%line{269} %argrw{"wrr"}
	neq		$tmp3 $tmp2 $const5 	%argrw{"wrr"}
	if		$tmp3 9 12 	%argrw{"r"}
	eq		$tmp4 type $const6 	%argrw{"wrr"}
	neq		$tmp5 $tmp4 $const5 	%argrw{"wrr"}
	assign		$tmp3 $tmp5 	%argrw{"wr"}
	neq		$tmp6 $tmp3 $const5 	%argrw{"wrr"}
	if		$tmp6 14 17 	%argrw{"r"}
	eq		$tmp7 type $const7 	%argrw{"wrr"}
	neq		$tmp8 $tmp7 $const5 	%argrw{"wrr"}
	assign		$tmp6 $tmp8 	%argrw{"wr"}
	neq		$tmp9 $tmp6 $const5 	%argrw{"wrr"}
	if		$tmp9 19 22 	%argrw{"r"}
	eq		$tmp10 type $const8 	%argrw{"wrr"}
	neq		$tmp11 $tmp10 $const5 	%argrw{"wrr"}
	assign		$tmp9 $tmp11 	%argrw{"wr"}
	if		$tmp9 105 213 	%argrw{"r"}
# PxrPrimvar.osl:271
#         int transformVal = 0;
	assign		___327_transformVal $const5 	%line{271} %argrw{"wr"}
# PxrPrimvar.osl:272
#         vector value = defaultFloat3;
	assign		___327_value defaultFloat3 	%line{272} %argrw{"wr"}
# PxrPrimvar.osl:273
#         if (transformDefaultValues)
	if		transformDefaultValues 38 38 	%line{273} %argrw{"r"}
# PxrPrimvar.osl:275
#             if (type == "point")
	eq		$tmp12 type $const4 	%line{275} %argrw{"wrr"}
	if		$tmp12 30 38 	%argrw{"r"}
# PxrPrimvar.osl:277
#                 point val = value;
	assign		___329_val ___327_value 	%line{277} %argrw{"wr"}
# PxrPrimvar.osl:278
#                 value = transform(k_object, coordsys, val);
	transform	___327_value $const9 coordsys ___329_val 	%line{278} %argrw{"wrrr"}
# PxrPrimvar.osl:280
#             else if (type == "normal")
	eq		$tmp13 type $const6 	%line{280} %argrw{"wrr"}
	if		$tmp13 34 38 	%argrw{"r"}
# PxrPrimvar.osl:282
#                 normal val = value;
	assign		___330_val ___327_value 	%line{282} %argrw{"wr"}
# PxrPrimvar.osl:283
#                 value = transform(k_object, coordsys, val);
	transformn	___327_value $const9 coordsys ___330_val 	%line{283} %argrw{"wrrr"}
# PxrPrimvar.osl:285
#             else if (type == "vector")
	eq		$tmp14 type $const7 	%line{285} %argrw{"wrr"}
	if		$tmp14 38 38 	%argrw{"r"}
# PxrPrimvar.osl:287
#                 vector val = value;
	assign		___331_val ___327_value 	%line{287} %argrw{"wr"}
# PxrPrimvar.osl:288
#                 value = transform(k_object, coordsys, val);
	transformv	___327_value $const9 coordsys ___331_val 	%line{288} %argrw{"wrrr"}
# PxrPrimvar.osl:292
#         if (type == "color")
	eq		$tmp15 type $const8 	%line{292} %argrw{"wrr"}
	if		$tmp15 41 41 	%argrw{"r"}
# PxrPrimvar.osl:294
#             value = defaultColor;
	assign		___327_value defaultColor 	%line{294} %argrw{"wr"}
# PxrPrimvar.osl:297
#         if (var == "uvw")
	eq		$tmp16 var $const10 	%line{297} %argrw{"wrr"}
	if		$tmp16 44 84 	%argrw{"r"}
# PxrPrimvar.osl:299
#             value = vector(u, v, 0.0);
	vector		___327_value u v $const11 	%line{299} %argrw{"wrrr"}
# PxrPrimvar.osl:301
#         else if (var == "N" || var == "Nn")
	eq		$tmp17 var $const12 	%line{301} %argrw{"wrr"}
	neq		$tmp18 $tmp17 $const5 	%argrw{"wrr"}
	if		$tmp18 47 50 	%argrw{"r"}
	eq		$tmp19 var $const13 	%argrw{"wrr"}
	neq		$tmp20 $tmp19 $const5 	%argrw{"wrr"}
	assign		$tmp18 $tmp20 	%argrw{"wr"}
	if		$tmp18 53 84 	%argrw{"r"}
# PxrPrimvar.osl:303
#             value = N;
	assign		___327_value N 	%line{303} %argrw{"wr"}
# PxrPrimvar.osl:304
#             transformVal = 1;
	assign		___327_transformVal $const2 	%line{304} %argrw{"wr"}
# PxrPrimvar.osl:306
#         else if (var == "Ngn")
	eq		$tmp21 var $const14 	%line{306} %argrw{"wrr"}
	if		$tmp21 57 84 	%argrw{"r"}
# PxrPrimvar.osl:308
#             value = Ng;
	assign		___327_value Ng 	%line{308} %argrw{"wr"}
# PxrPrimvar.osl:309
#             transformVal = 1;
	assign		___327_transformVal $const2 	%line{309} %argrw{"wr"}
# PxrPrimvar.osl:311
#         else if (var == "Vn")
	eq		$tmp22 var $const15 	%line{311} %argrw{"wrr"}
	if		$tmp22 62 84 	%argrw{"r"}
# PxrPrimvar.osl:313
#             value = normalize(-I);
	neg		$tmp23 I 	%line{313} %argrw{"wr"}
	normalize	___327_value $tmp23 	%argrw{"wr"}
# PxrPrimvar.osl:314
#             transformVal = 1;
	assign		___327_transformVal $const2 	%line{314} %argrw{"wr"}
# PxrPrimvar.osl:316
#         else if (var == "duv")
	eq		$tmp24 var $const16 	%line{316} %argrw{"wrr"}
	if		$tmp24 67 84 	%argrw{"r"}
# PxrPrimvar.osl:319
#             found = getattribute("builtin", "du", du);
	getattribute	found $const17 $const18 ___337_du 	%line{319} %argrw{"wrrw"}
# PxrPrimvar.osl:320
#             found = getattribute("builtin", "dv", dv);
	getattribute	found $const17 $const19 ___337_dv 	%line{320} %argrw{"wrrw"}
# PxrPrimvar.osl:321
#             value = vector(du, dv, 0);
	vector		___327_value ___337_du ___337_dv $const11 	%line{321} %argrw{"wrrr"}
# PxrPrimvar.osl:323
#         else if (var == "duvw")
	eq		$tmp25 var $const20 	%line{323} %argrw{"wrr"}
	if		$tmp25 73 84 	%argrw{"r"}
# PxrPrimvar.osl:326
#             found = getattribute("builtin", "du", du);
	getattribute	found $const17 $const18 ___338_du 	%line{326} %argrw{"wrrw"}
# PxrPrimvar.osl:327
#             found = getattribute("builtin", "dv", dv);
	getattribute	found $const17 $const19 ___338_dv 	%line{327} %argrw{"wrrw"}
# PxrPrimvar.osl:328
#             found = getattribute("builtin", "dw", dw);
	getattribute	found $const17 $const21 ___338_dw 	%line{328} %argrw{"wrrw"}
# PxrPrimvar.osl:329
#             value = vector(du, dv, dw);
	vector		___327_value ___338_du ___338_dv ___338_dw 	%line{329} %argrw{"wrrr"}
# PxrPrimvar.osl:331
#         else if (var == "dPdtime")
	eq		$tmp26 var $const22 	%line{331} %argrw{"wrr"}
	if		$tmp26 76 84 	%argrw{"r"}
# PxrPrimvar.osl:333
#             value = dPdtime;
	assign		___327_value dPdtime 	%line{333} %argrw{"wr"}
# PxrPrimvar.osl:338
#             transformVal = 1;
	assign		___327_transformVal $const2 	%line{338} %argrw{"wr"}
# PxrPrimvar.osl:339
#             found = getattribute("primvar", var, value);
	getattribute	found $const23 var ___327_value 	%line{339} %argrw{"wrrw"}
# PxrPrimvar.osl:340
#             if (!found)
	eq		$tmp27 found $const5 	%line{340} %argrw{"wrr"}
	if		$tmp27 84 84 	%argrw{"r"}
# PxrPrimvar.osl:342
#                 found = getattribute("builtin", var, value);
	getattribute	found $const17 var ___327_value 	%line{342} %argrw{"wrrw"}
# PxrPrimvar.osl:343
#                 if (!found)
	eq		$tmp28 found $const5 	%line{343} %argrw{"wrr"}
	if		$tmp28 84 84 	%argrw{"r"}
# PxrPrimvar.osl:345
#                     found = getattribute(var, value);
	getattribute	found var ___327_value 	%line{345} %argrw{"wrw"}
# PxrPrimvar.osl:351
#         if (found && transformVal)
	neq		$tmp29 found $const5 	%line{351} %argrw{"wrr"}
	if		$tmp29 88 88 	%argrw{"r"}
	neq		$tmp30 ___327_transformVal $const5 	%argrw{"wrr"}
	assign		$tmp29 $tmp30 	%argrw{"wr"}
	if		$tmp29 101 101 	%argrw{"r"}
# PxrPrimvar.osl:353
#             if (type == "point")
	eq		$tmp31 type $const4 	%line{353} %argrw{"wrr"}
	if		$tmp31 93 101 	%argrw{"r"}
# PxrPrimvar.osl:355
#                 point val = value;
	assign		___344_val ___327_value 	%line{355} %argrw{"wr"}
# PxrPrimvar.osl:356
#                 value = transform(k_current, coordsys, val);
	transform	___327_value $const24 coordsys ___344_val 	%line{356} %argrw{"wrrr"}
# PxrPrimvar.osl:358
#             else if (type == "normal")
	eq		$tmp32 type $const6 	%line{358} %argrw{"wrr"}
	if		$tmp32 97 101 	%argrw{"r"}
# PxrPrimvar.osl:360
#                 normal val = value;
	assign		___345_val ___327_value 	%line{360} %argrw{"wr"}
# PxrPrimvar.osl:361
#                 value = transform(k_current, coordsys, val);
	transformn	___327_value $const24 coordsys ___345_val 	%line{361} %argrw{"wrrr"}
# PxrPrimvar.osl:363
#             else if (type == "vector")
	eq		$tmp33 type $const7 	%line{363} %argrw{"wrr"}
	if		$tmp33 101 101 	%argrw{"r"}
# PxrPrimvar.osl:365
#                 vector val = value;
	assign		___346_val ___327_value 	%line{365} %argrw{"wr"}
# PxrPrimvar.osl:366
#                 value = transform(k_current, coordsys, val);
	transformv	___327_value $const24 coordsys ___346_val 	%line{366} %argrw{"wrrr"}
# PxrPrimvar.osl:369
#         resultRGB = value;
	assign		resultRGB ___327_value 	%line{369} %argrw{"wr"}
# PxrPrimvar.osl:370
#         resultF = value[0];
	compref		resultF ___327_value $const5 	%line{370} %argrw{"wrr"}
# PxrPrimvar.osl:371
#         resultP = value;
	assign		resultP ___327_value 	%line{371} %argrw{"wr"}
# PxrPrimvar.osl:372
#         width = 0;
	assign		width $const5 	%line{372} %argrw{"wr"}
# PxrPrimvar.osl:374
#     else if (type == "float[2]" || type == "float2" || var == "st")  // "float2" is for backwards compatib.
	eq		$tmp34 type $const25 	%line{374} %argrw{"wrr"}
	neq		$tmp35 $tmp34 $const5 	%argrw{"wrr"}
	if		$tmp35 108 111 	%argrw{"r"}
	eq		$tmp36 type $const26 	%argrw{"wrr"}
	neq		$tmp37 $tmp36 $const5 	%argrw{"wrr"}
	assign		$tmp35 $tmp37 	%argrw{"wr"}
	neq		$tmp38 $tmp35 $const5 	%argrw{"wrr"}
	if		$tmp38 113 116 	%argrw{"r"}
	eq		$tmp39 var $const27 	%argrw{"wrr"}
	neq		$tmp40 $tmp39 $const5 	%argrw{"wrr"}
	assign		$tmp38 $tmp40 	%argrw{"wr"}
	if		$tmp38 149 213 	%argrw{"r"}
# PxrPrimvar.osl:376
#         float value[2] = {defaultFloat3[0], defaultFloat3[1]};
	compref		$tmp41 defaultFloat3 $const5 	%line{376} %argrw{"wrr"}
	aassign		___347_value $const5 $tmp41 	%argrw{"wrr"}
	compref		$tmp42 defaultFloat3 $const2 	%argrw{"wrr"}
	aassign		___347_value $const2 $tmp42 	%argrw{"wrr"}
# PxrPrimvar.osl:378
#         if (var == "uv")
	eq		$tmp43 var $const28 	%line{378} %argrw{"wrr"}
	if		$tmp43 125 141 	%argrw{"r"}
# PxrPrimvar.osl:380
#             value[0] = u;
	aassign		___347_value $const5 u 	%line{380} %argrw{"wrr"}
# PxrPrimvar.osl:381
#             value[1] = v;
	aassign		___347_value $const2 v 	%line{381} %argrw{"wrr"}
# PxrPrimvar.osl:385
#             found = getattribute("primvar", var, value);
	getattribute	found $const23 var ___347_value 	%line{385} %argrw{"wrrw"}
# PxrPrimvar.osl:386
#             if (!found)
	eq		$tmp44 found $const5 	%line{386} %argrw{"wrr"}
	if		$tmp44 132 132 	%argrw{"r"}
# PxrPrimvar.osl:388
#                 found = getattribute("builtin", var, value);
	getattribute	found $const17 var ___347_value 	%line{388} %argrw{"wrrw"}
# PxrPrimvar.osl:389
#                 if (!found)
	eq		$tmp45 found $const5 	%line{389} %argrw{"wrr"}
	if		$tmp45 132 132 	%argrw{"r"}
# PxrPrimvar.osl:391
#                     found = getattribute(var, value);
	getattribute	found var ___347_value 	%line{391} %argrw{"wrw"}
# PxrPrimvar.osl:394
#             if (!found && var == "st")
	eq		$tmp46 found $const5 	%line{394} %argrw{"wrr"}
	neq		$tmp47 $tmp46 $const5 	%argrw{"wrr"}
	if		$tmp47 138 138 	%argrw{"r"}
	eq		$tmp48 var $const27 	%argrw{"wrr"}
	neq		$tmp49 $tmp48 $const5 	%argrw{"wrr"}
	assign		$tmp47 $tmp49 	%argrw{"wr"}
	if		$tmp47 141 141 	%argrw{"r"}
# PxrPrimvar.osl:396
#                 value[0] = u;
	aassign		___347_value $const5 u 	%line{396} %argrw{"wrr"}
# PxrPrimvar.osl:397
#                 value[1] = v;
	aassign		___347_value $const2 v 	%line{397} %argrw{"wrr"}
# PxrPrimvar.osl:400
#         resultF = value[0];
	aref		resultF ___347_value $const5 	%line{400} %argrw{"wrr"}
# PxrPrimvar.osl:401
#         resultRGB = color(value[0], value[1], 0.0);
	aref		$tmp50 ___347_value $const5 	%line{401} %argrw{"wrr"}
	aref		$tmp51 ___347_value $const2 	%argrw{"wrr"}
	color		resultRGB $tmp50 $tmp51 $const11 	%argrw{"wrrr"}
# PxrPrimvar.osl:402
#         resultP = point(value[0], value[1], 0.0);
	aref		$tmp52 ___347_value $const5 	%line{402} %argrw{"wrr"}
	aref		$tmp53 ___347_value $const2 	%argrw{"wrr"}
	point		resultP $tmp52 $tmp53 $const11 	%argrw{"wrrr"}
# PxrPrimvar.osl:403
#         width = 0;
	assign		width $const5 	%line{403} %argrw{"wr"}
# PxrPrimvar.osl:405
#     else if (type == "int")
	eq		$tmp54 type $const29 	%line{405} %argrw{"wrr"}
	if		$tmp54 165 213 	%argrw{"r"}
# PxrPrimvar.osl:408
#         value = defaultInt;
	assign		___353_value defaultInt 	%line{408} %argrw{"wr"}
# PxrPrimvar.osl:409
#         found = getattribute("primvar", var, value);
	getattribute	found $const23 var ___353_value 	%line{409} %argrw{"wrrw"}
# PxrPrimvar.osl:410
#         if (!found)
	eq		$tmp55 found $const5 	%line{410} %argrw{"wrr"}
	if		$tmp55 159 159 	%argrw{"r"}
# PxrPrimvar.osl:412
#             found = getattribute("builtin", var, value);
	getattribute	found $const17 var ___353_value 	%line{412} %argrw{"wrrw"}
# PxrPrimvar.osl:413
#             if (!found)
	eq		$tmp56 found $const5 	%line{413} %argrw{"wrr"}
	if		$tmp56 159 159 	%argrw{"r"}
# PxrPrimvar.osl:415
#                 found = getattribute(var, value);
	getattribute	found var ___353_value 	%line{415} %argrw{"wrw"}
# PxrPrimvar.osl:418
#         resultF = value;
	assign		resultF ___353_value 	%line{418} %argrw{"wr"}
# PxrPrimvar.osl:419
#         resultRGB = color(value);
	assign		$tmp57 ___353_value 	%line{419} %argrw{"wr"}
	assign		resultRGB $tmp57 	%argrw{"wr"}
# PxrPrimvar.osl:420
#         resultP = vector(value);
	assign		$tmp58 ___353_value 	%line{420} %argrw{"wr"}
	assign		resultP $tmp58 	%argrw{"wr"}
# PxrPrimvar.osl:421
#         width = 0;
	assign		width $const5 	%line{421} %argrw{"wr"}
# PxrPrimvar.osl:425
#         float value = defaultFloat;
	assign		___356_value defaultFloat 	%line{425} %argrw{"wr"}
# PxrPrimvar.osl:427
#         if (var == "U")
	eq		$tmp59 var $const30 	%line{427} %argrw{"wrr"}
	if		$tmp59 169 193 	%argrw{"r"}
# PxrPrimvar.osl:429
#             value = u;
	assign		___356_value u 	%line{429} %argrw{"wr"}
# PxrPrimvar.osl:431
#         else if (var == "V")
	eq		$tmp60 var $const31 	%line{431} %argrw{"wrr"}
	if		$tmp60 172 193 	%argrw{"r"}
# PxrPrimvar.osl:433
#             value = v;
	assign		___356_value v 	%line{433} %argrw{"wr"}
# PxrPrimvar.osl:435
#         else if (var == "w" || var == "W")
	eq		$tmp61 var $const32 	%line{435} %argrw{"wrr"}
	neq		$tmp62 $tmp61 $const5 	%argrw{"wrr"}
	if		$tmp62 175 178 	%argrw{"r"}
	eq		$tmp63 var $const33 	%argrw{"wrr"}
	neq		$tmp64 $tmp63 $const5 	%argrw{"wrr"}
	assign		$tmp62 $tmp64 	%argrw{"wr"}
	if		$tmp62 180 193 	%argrw{"r"}
# PxrPrimvar.osl:437
#             found = getattribute("primvar", var, value);
	getattribute	found $const23 var ___356_value 	%line{437} %argrw{"wrrw"}
# PxrPrimvar.osl:439
#         else if (var == "VLen")
	eq		$tmp65 var $const34 	%line{439} %argrw{"wrr"}
	if		$tmp65 183 193 	%argrw{"r"}
# PxrPrimvar.osl:441
#             value = length(I);
	length		___356_value I 	%line{441} %argrw{"wr"}
# PxrPrimvar.osl:443
#         else if (var == "time")
	eq		$tmp66 var $const35 	%line{443} %argrw{"wrr"}
	if		$tmp66 186 193 	%argrw{"r"}
# PxrPrimvar.osl:445
#             value = time;
	assign		___356_value time 	%line{445} %argrw{"wr"}
# PxrPrimvar.osl:449
#             found = getattribute("primvar", var, value);
	getattribute	found $const23 var ___356_value 	%line{449} %argrw{"wrrw"}
# PxrPrimvar.osl:450
#             if (!found)
	eq		$tmp67 found $const5 	%line{450} %argrw{"wrr"}
	if		$tmp67 193 193 	%argrw{"r"}
# PxrPrimvar.osl:452
#                 found = getattribute("builtin", var, value);
	getattribute	found $const17 var ___356_value 	%line{452} %argrw{"wrrw"}
# PxrPrimvar.osl:453
#                 if (!found)
	eq		$tmp68 found $const5 	%line{453} %argrw{"wrr"}
	if		$tmp68 193 193 	%argrw{"r"}
# PxrPrimvar.osl:455
#                     found = getattribute(var, value);
	getattribute	found var ___356_value 	%line{455} %argrw{"wrw"}
# PxrPrimvar.osl:460
#         resultF = value;
	assign		resultF ___356_value 	%line{460} %argrw{"wr"}
# PxrPrimvar.osl:461
#         resultRGB = color(value);
	assign		resultRGB ___356_value 	%line{461} %argrw{"wr"}
# PxrPrimvar.osl:462
#         resultP = vector(value);
	assign		resultP ___356_value 	%line{462} %argrw{"wr"}
# PxrPrimvar.osl:463
#         if (var == "u" || var == "U")
	eq		$tmp69 var $const36 	%line{463} %argrw{"wrr"}
	neq		$tmp70 $tmp69 $const5 	%argrw{"wrr"}
	if		$tmp70 199 202 	%argrw{"r"}
	eq		$tmp71 var $const30 	%argrw{"wrr"}
	neq		$tmp72 $tmp71 $const5 	%argrw{"wrr"}
	assign		$tmp70 $tmp72 	%argrw{"wr"}
	if		$tmp70 204 213 	%argrw{"r"}
# PxrPrimvar.osl:465
#             getattribute("builtin", "du", width);
	getattribute	$tmp73 $const17 $const18 width 	%line{465} %argrw{"wrrw"}
# PxrPrimvar.osl:467
#         else if (var == "v" || var == "V")
	eq		$tmp74 var $const37 	%line{467} %argrw{"wrr"}
	neq		$tmp75 $tmp74 $const5 	%argrw{"wrr"}
	if		$tmp75 207 210 	%argrw{"r"}
	eq		$tmp76 var $const31 	%argrw{"wrr"}
	neq		$tmp77 $tmp76 $const5 	%argrw{"wrr"}
	assign		$tmp75 $tmp77 	%argrw{"wr"}
	if		$tmp75 212 213 	%argrw{"r"}
# PxrPrimvar.osl:469
#             getattribute("builtin", "dv", width);
	getattribute	$tmp78 $const17 $const19 width 	%line{469} %argrw{"wrrw"}
# PxrPrimvar.osl:473
#             width = 0;
	assign		width $const5 	%line{473} %argrw{"wr"}
# PxrPrimvar.osl:477
#     if (found == 0 && verbosity > k_silent)
	eq		$tmp79 found $const5 	%line{477} %argrw{"wrr"}
	neq		$tmp80 $tmp79 $const5 	%argrw{"wrr"}
	if		$tmp80 219 219 	%argrw{"r"}
	gt		$tmp81 verbosity $const5 	%argrw{"wrr"}
	neq		$tmp82 $tmp81 $const5 	%argrw{"wrr"}
	assign		$tmp80 $tmp82 	%argrw{"wr"}
	if		$tmp80 221 221 	%argrw{"r"}
# PxrPrimvar.osl:479
#         warning("[PxrPrimvar] Could not find: '%s' primvar", var);
	warning		$const38 var 	%line{479} %argrw{"rr"}
# PxrPrimvar.osl:482
#     resultR = resultRGB[0];
	compref		resultR resultRGB $const5 	%line{482} %argrw{"wrr"}
# PxrPrimvar.osl:483
#     resultG = resultRGB[1];
	compref		resultG resultRGB $const2 	%line{483} %argrw{"wrr"}
# PxrPrimvar.osl:484
#     resultB = resultRGB[2];
	compref		resultB resultRGB $const39 	%line{484} %argrw{"wrr"}
	end
