OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.@PROJECT_VERSION_TWEAK@"dev"
# options: -DOSX -I/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/common -I/Users/Shared/build/ratbuild/rmanshare/RIS/pattern/osl -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl -o /Users/Shared/build/ratbuild/rmanshare/_built/osxSonoma_x86-64_clang15_external_release/osl/PxrManifold3D.osl/obj/PxrManifold3D.oso
shader PxrManifold3D	%meta{int,rfm_nodeid,1053423} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/manifold"} %meta{string,rfh_classification,"Pattern/Manifold"} %meta{string,help,"Encapsulates 3D parameterization for<br>pattern generators. Allows selection of Pref and<br>specification of a coordinate system to transform to.<br>Uses a simple struct to represent bundled dataflow of<br>outputs."} 
param	float	scale	1		%meta{string,widget,"default"} %meta{string,help,"Scale the frequency of the feature uniformly in 3D<br><br>scale (float)"} %meta{string,label,"Scale"} %meta{float,slidermax,10} %meta{float,slidermin,-10}  %read{340,354} %write{2147483647,-1}
param	int	use	0		%meta{string,widget,"mapper"} %meta{string,help,"Select the type of position you want to use. You can only use<br>__Pref and __WPref if these primitive variables have been attached to<br>your geometry.<br><br>use (int)"} %meta{string,options,"Current position (P):0|Undisplaced position (Po):1|Deform (__Pref):2|Deform & transform (__WPref):3"} %meta{int,connectable,0} %meta{string,label,"Use"}  %read{1,10} %write{2147483647,-1}
param	string	pref	""		%meta{string,widget,"string"} %meta{string,help,"Name of geometry Pref.<br>If empty, we will use P.<br><br>pref (string)"} %meta{int,connectable,0} %meta{string,label,"Pref"}  %read{6,15} %write{2147483647,-1}
param	string	coordsys	"object"		%meta{string,widget,"string"} %meta{string,houdiniui,"oplist"} %meta{string,help,"Name of coordinate system transform.<br>Standard coordinate systems : \"object\", \"world\", \"screen\", \"NDC\".<br><br>coordsys (string)"} %meta{int,connectable,0} %meta{string,label,"Coordinate System"}  %read{188,198} %write{2147483647,-1}
param	float	warp	0		%meta{string,widget,"default"} %meta{string,label,"Warp"} %meta{string,help,"Connect a noise or texture to warp the domain."}  %read{181,183} %write{2147483647,-1}
param	float	warpAmount	1		%meta{string,widget,"default"} %meta{int,slider,1} %meta{float,slidermin,0} %meta{float,slidermax,1} %meta{string,label,"Warp Amount"} %meta{string,help,"Connect a noise or texture to warp the domain."}  %read{185,185} %write{2147483647,-1}
param	int	randomize	0		%meta{string,widget,"checkBox"} %meta{string,label,"Randomize"} %meta{string,help,"Enable manifold randomization."} %meta{int,connectable,0} %meta{string,page,"Randomize"} %meta{int,page_open,0}  %read{40,40} %write{2147483647,-1}
param	int	source	0		%meta{string,widget,"mapper"} %meta{string,options,"Identifier ID:0|Identifier Name:1|Primvar:2|Attribute:3"} %meta{string,help,"The source of the variation. For user attributes,<br>type user:myattribute.<br><br>varySource (int) "} %meta{int,connectable,0} %meta{string,label,"Vary Source"} %meta{string,page,"Randomize"}  %read{43,78} %write{2147483647,-1}
param	string	varName	""		%meta{string,widget,"default"} %meta{string,help,"If varySource is 1 or 2, the name of the primvar or user<br>attribute.<br><br>varName (string) "} %meta{int,connectable,0} %meta{string,label,"Variable Name"} %meta{string,page,"Randomize"}  %read{66,88} %write{2147483647,-1}
param	float	seed	0		%meta{string,widget,"default"} %meta{string,page,"Randomize"} %meta{string,help,"The seed will be added to the original attr/primvar value.<br><br>seed (float) "} %meta{string,label,"Seed"}  %read{99,99} %write{2147483647,-1}
param	float	probability	1		%meta{string,widget,"default"} %meta{string,label,"Probability"} %meta{float,min,0} %meta{float,max,1} %meta{string,page,"Randomize"} %meta{int,page_open,1}  %read{105,110} %write{2147483647,-1}
param	int	scaleNormalizedPrimvar	0		%meta{string,widget,"checkBox"} %meta{string,page,"Randomize"} %meta{string,help,"Re-scale a primvar with a 0->1 range to a suitable range.<br><br>scaleNormalizedPrimvar (int) "} %meta{int,connectable,0} %meta{string,label,"Scale normalized primvar"}  %read{75,75} %write{2147483647,-1}
param	float	rOffsetXMin	-100		%meta{string,widget,"default"} %meta{string,label,"Offset X Min"} %meta{float,slidermin,-100} %meta{float,slidermax,100} %meta{string,page,"Randomize.Offset"} %meta{int,page_open,1}  %read{116,123} %write{2147483647,-1}
param	float	rOffsetXMax	100		%meta{string,widget,"default"} %meta{string,label,"Offset X Max"} %meta{float,slidermin,-100} %meta{float,slidermax,100} %meta{string,page,"Randomize.Offset"} %meta{int,page_open,1}  %read{116,121} %write{2147483647,-1}
param	float	rOffsetYMin	-100		%meta{string,widget,"default"} %meta{string,label,"Offset Y Min"} %meta{float,slidermin,-100} %meta{float,slidermax,100} %meta{string,page,"Randomize.Offset"} %meta{int,page_open,1}  %read{124,131} %write{2147483647,-1}
param	float	rOffsetYMax	100		%meta{string,widget,"default"} %meta{string,label,"Offset Y Max"} %meta{float,slidermin,-100} %meta{float,slidermax,100} %meta{string,page,"Randomize.Offset"} %meta{int,page_open,1}  %read{124,129} %write{2147483647,-1}
param	float	rOffsetZMin	-100		%meta{string,widget,"default"} %meta{string,label,"Offset Z Min"} %meta{float,slidermin,-100} %meta{float,slidermax,100} %meta{string,page,"Randomize.Offset"} %meta{int,page_open,1}  %read{132,140} %write{2147483647,-1}
param	float	rOffsetZMax	100		%meta{string,widget,"default"} %meta{string,label,"Offset Z Max"} %meta{float,slidermin,-100} %meta{float,slidermax,100} %meta{string,page,"Randomize.Offset"} %meta{int,page_open,1}  %read{133,138} %write{2147483647,-1}
param	float	rScaleXMin	1		%meta{string,widget,"default"} %meta{string,label,"Scale X Min"} %meta{float,slidermin,-100} %meta{float,slidermax,100} %meta{string,page,"Randomize.Scale"} %meta{int,page_open,1}  %read{144,154} %write{2147483647,-1}
param	float	rScaleXMax	1		%meta{string,widget,"default"} %meta{string,label,"Scale X Max"} %meta{float,slidermin,-100} %meta{float,slidermax,100} %meta{string,page,"Randomize.Scale"} %meta{int,page_open,1}  %read{144,152} %write{2147483647,-1}
param	int	enableNonUniformScale	0		%meta{string,widget,"checkBox"} %meta{string,label,"Non-Uniform Scale"} %meta{string,page,"Randomize.Scale"} %meta{int,page_open,1}  %read{155,168} %write{2147483647,-1}
param	float	rScaleYMin	1		%meta{string,widget,"default"} %meta{string,label,"Scale Y Min"} %meta{float,slidermin,-100} %meta{float,slidermax,100} %meta{string,page,"Randomize.Scale"} %meta{int,page_open,1} %meta{string,conditionalVisPath,"../enableNonUniformScale"} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisValue,"1"}  %read{156,166} %write{2147483647,-1}
param	float	rScaleYMax	1		%meta{string,widget,"default"} %meta{string,label,"Scale Y Max"} %meta{float,slidermin,-100} %meta{float,slidermax,100} %meta{string,page,"Randomize.Scale"} %meta{int,page_open,1} %meta{string,conditionalVisPath,"../enableNonUniformScale"} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisValue,"1"}  %read{156,164} %write{2147483647,-1}
param	float	rScaleZMin	1		%meta{string,widget,"default"} %meta{string,label,"Scale Z Min"} %meta{float,slidermin,-100} %meta{float,slidermax,100} %meta{string,page,"Randomize.Scale"} %meta{int,page_open,1} %meta{string,conditionalVisPath,"../enableNonUniformScale"} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisValue,"1"}  %read{169,179} %write{2147483647,-1}
param	float	rScaleZMax	1		%meta{string,widget,"default"} %meta{string,label,"Scale Z Max"} %meta{float,slidermin,-100} %meta{float,slidermax,100} %meta{string,page,"Randomize.Scale"} %meta{int,page_open,1} %meta{string,conditionalVisPath,"../enableNonUniformScale"} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisValue,"1"}  %read{169,177} %write{2147483647,-1}
param	int	verbosity	0		%meta{string,widget,"mapper"} %meta{string,options,"Silent:0|Warnings:1|Info:2"} %meta{string,page,"Advanced"} %meta{string,help,"Diagnostic output levels for scene debugging.<br><br>verbosity (int)"} %meta{int,connectable,0} %meta{string,label,"Verbosity"}  %read{46,84} %write{2147483647,-1}
oparam	struct Manifold	result			%meta{string,help,"result (struct)"}  %read{2147483647,-1} %write{2147483647,-1} %struct{"Manifold"} %structfields{Q,QN,Qradius} %structfieldtypes{"pnf"} %structnfields{3}
oparam	point	result.Q	0 0 0		%meta{string,help,"result (struct)"}  %read{142,376} %write{3,363} %mystruct{result} %mystructfield{0}
oparam	normal	result.QN	0 0 1		%meta{string,help,"result (struct)"}  %read{194,334} %write{19,334} %mystruct{result} %mystructfield{1}
oparam	float	result.Qradius	0		%meta{string,help,"result (struct)"}  %read{33,373} %write{20,373} %mystruct{result} %mystructfield{2}
oparam	float	resultX	0		%meta{string,help,"resultX (float)"}  %read{2147483647,-1} %write{374,374}
oparam	float	resultY	0		%meta{string,help,"resultY (float)"}  %read{2147483647,-1} %write{375,375}
oparam	float	resultZ	0		%meta{string,help,"resultZ (float)"}  %read{2147483647,-1} %write{376,376}
global	point	P	%read{18,29} %write{2147483647,-1} %derivs
global	normal	N	%read{19,19} %write{2147483647,-1}
local	vector	___412_vec1	%read{198,213} %write{197,212}
local	float	___412_scale	%read{202,216} %write{201,215}
local	float	___420_cosAng	%read{234,255} %write{230,230}
local	float	___420_sinAng	%read{236,253} %write{230,230}
local	float	___421_cosAng	%read{272,290} %write{267,267}
local	float	___421_sinAng	%read{270,292} %write{267,267}
local	float	___422_cosAng	%read{307,328} %write{304,304}
local	float	___422_sinAng	%read{309,326} %write{304,304}
local	vector	___419_scaleFactor	%read{357,368} %write{356,356}
local	float	___675_fseed	%read{48,98} %write{42,97}
local	string	___679_idname	%read{61,61} %write{59,60}
local	float	___675_instanceId	%read{92,92} %write{89,90}
local	int	success	%read{16,22} %write{0,21}
local	float	___700_width	%read{31,32} %write{28,31}
local	float	rOX	%read{141,141} %write{34,123}
local	float	rOY	%read{141,141} %write{35,131}
local	float	rOZ	%read{141,141} %write{36,132}
local	float	rSX	%read{167,218} %write{37,154}
local	float	rSY	%read{218,218} %write{38,167}
local	float	rSZ	%read{218,218} %write{39,180}
local	float	___701_fseed	%read{101,114} %write{99,104}
local	float	___701_prob	%read{110,110} %write{108,109}
local	color	___702_rnd	%read{119,173} %write{115,115}
const	int	$const1	0		%read{0,374} %write{2147483647,-1}
const	int	$const2	1		%read{1,375} %write{2147483647,-1}
temp	int	$tmp1	%read{2,2} %write{1,1}
const	string	$const3	"primvar"		%read{3,66} %write{2147483647,-1}
const	string	$const4	"P"		%read{3,3} %write{2147483647,-1}
const	int	$const5	2		%read{4,376} %write{2147483647,-1}
temp	int	$tmp2	%read{5,5} %write{4,4}
const	string	$const6	""		%read{6,188} %write{2147483647,-1}
temp	int	$tmp3	%read{7,7} %write{6,6}
const	string	$const7	"__Pref"		%read{8,8} %write{2147483647,-1}
const	int	$const8	3		%read{10,78} %write{2147483647,-1}
temp	int	$tmp4	%read{11,11} %write{10,10}
temp	int	$tmp5	%read{13,13} %write{12,12}
const	string	$const9	"__WPref"		%read{14,14} %write{2147483647,-1}
temp	int	$tmp6	%read{17,17} %write{16,16}
const	float	$const10	0		%read{20,361} %write{2147483647,-1}
const	string	$const11	"builtin"		%read{21,45} %write{2147483647,-1}
const	string	$const12	"PRadius"		%read{21,21} %write{2147483647,-1}
temp	int	$tmp7	%read{23,23} %write{22,22}
temp	float	$tmp8	%read{28,28} %write{25,25}
temp	float	$tmp9	%read{25,25} %write{24,24} %derivs
temp	float	$tmp10	%read{28,28} %write{27,27}
temp	float	$tmp11	%read{27,27} %write{26,26} %derivs
temp	float	$tmp12	%read{31,31} %write{30,30}
temp	float	$tmp13	%read{30,30} %write{29,29} %derivs
const	float	$const13	0.5		%read{32,175} %write{2147483647,-1}
const	float	$const14	1		%read{37,184} %write{2147483647,-1}
temp	float	$tmp14	%read{99,99} %write{98,98}
const	string	$const15	"getRandomFloat"		%read{41,41} %write{2147483647,-1}
temp	int	$tmp15	%read{44,44} %write{43,43}
temp	int	$tmp16	%read{2147483647,-1} %write{45,45}
const	string	$const16	"id"		%read{45,45} %write{2147483647,-1}
temp	int	$tmp17	%read{47,47} %write{46,46}
const	string	$const17	"[getRandomFloat] id: %f"		%read{48,48} %write{2147483647,-1}
temp	int	$tmp18	%read{50,50} %write{49,49}
temp	int	$tmp19	%read{52,52} %write{51,51}
temp	int	$tmp20	%read{53,58} %write{52,57}
temp	int	$tmp21	%read{55,55} %write{54,54}
const	string	$const18	"user:rixhash"		%read{54,54} %write{2147483647,-1}
temp	int	$tmp22	%read{56,56} %write{55,55}
temp	int	$tmp23	%read{57,57} %write{56,56}
temp	int	$tmp24	%read{2147483647,-1} %write{60,60}
const	string	$const19	"identifier:name"		%read{60,60} %write{2147483647,-1}
temp	int	$tmp25	%read{62,62} %write{61,61}
const	int	$const20	65536		%read{62,62} %write{2147483647,-1}
temp	int	$tmp26	%read{63,63} %write{62,62}
temp	int	$tmp27	%read{65,65} %write{64,64}
temp	int	$tmp28	%read{67,67} %write{66,66}
temp	int	$tmp29	%read{68,68} %write{67,67}
temp	int	$tmp30	%read{69,73} %write{68,72}
temp	int	$tmp31	%read{71,71} %write{70,70}
temp	int	$tmp32	%read{72,72} %write{71,71}
const	string	$const21	"[getRandomFloat] Could not find primvar or could not convert to float '%s'"		%read{74,74} %write{2147483647,-1}
temp	float	$tmp33	%read{77,77} %write{76,76}
const	float	$const22	65535		%read{77,103} %write{2147483647,-1}
temp	int	$tmp34	%read{79,79} %write{78,78}
temp	int	$tmp35	%read{81,81} %write{80,80}
temp	int	$tmp36	%read{82,82} %write{81,81}
temp	int	$tmp37	%read{83,87} %write{82,86}
temp	int	$tmp38	%read{85,85} %write{84,84}
temp	int	$tmp39	%read{86,86} %write{85,85}
const	string	$const23	"[getRandomFloat] Could not find attribute or could not convert to float '%s'"		%read{88,88} %write{2147483647,-1}
temp	int	$tmp40	%read{91,91} %write{90,90}
const	string	$const24	"user:procprimid"		%read{90,90} %write{2147483647,-1}
temp	float	$tmp41	%read{94,97} %write{92,92}
const	string	$const26	"mod"		%read{93,100} %write{2147483647,-1}
temp	float	$tmp42	%read{96,96} %write{95,95}
temp	float	$tmp43	%read{95,95} %write{94,94}
temp	float	$tmp44	%read{97,97} %write{96,96}
temp	float	$tmp45	%read{103,103} %write{102,102}
temp	float	$tmp46	%read{102,102} %write{101,101}
temp	float	$tmp47	%read{104,104} %write{103,103}
temp	int	$tmp48	%read{106,106} %write{105,105}
const	string	$const27	"cell"		%read{108,115} %write{2147483647,-1}
const	float	$const28	173		%read{107,107} %write{2147483647,-1}
temp	float	$tmp49	%read{108,108} %write{107,107}
temp	int	$tmp50	%read{111,111} %write{110,110}
temp	color	$tmp51	%read{115,115} %write{114,114}
const	float	$const29	7		%read{112,112} %write{2147483647,-1}
temp	float	$tmp52	%read{114,114} %write{112,112}
const	float	$const30	13		%read{113,113} %write{2147483647,-1}
temp	float	$tmp53	%read{114,114} %write{113,113}
temp	int	$tmp54	%read{117,117} %write{116,116}
temp	float	$tmp55	%read{122,122} %write{119,119}
const	string	$const31	"compress"		%read{120,176} %write{2147483647,-1}
temp	float	$tmp56	%read{122,122} %write{121,121}
temp	float	$tmp57	%read{123,123} %write{122,122}
temp	int	$tmp58	%read{125,125} %write{124,124}
temp	float	$tmp59	%read{130,130} %write{127,127}
temp	float	$tmp60	%read{130,130} %write{129,129}
temp	float	$tmp61	%read{131,131} %write{130,130}
temp	float	$tmp62	%read{2147483647,-1} %write{135,140}
temp	int	$tmp63	%read{134,134} %write{133,133}
temp	float	$tmp64	%read{139,139} %write{136,136}
temp	float	$tmp65	%read{139,139} %write{138,138}
temp	float	$tmp66	%read{140,140} %write{139,139}
temp	point	$tmp67	%read{142,142} %write{141,141}
temp	int	$tmp68	%read{145,145} %write{144,144}
temp	float	$tmp69	%read{149,149} %write{147,147}
temp	float	$tmp70	%read{149,149} %write{148,148}
temp	float	$tmp71	%read{150,150} %write{149,149}
temp	float	$tmp72	%read{153,153} %write{150,150}
temp	float	$tmp73	%read{153,153} %write{152,152}
temp	float	$tmp74	%read{154,154} %write{153,153}
temp	int	$tmp75	%read{157,157} %write{156,156}
temp	float	$tmp76	%read{161,161} %write{159,159}
temp	float	$tmp77	%read{161,161} %write{160,160}
temp	float	$tmp78	%read{162,162} %write{161,161}
temp	float	$tmp79	%read{165,165} %write{162,162}
temp	float	$tmp80	%read{165,165} %write{164,164}
temp	float	$tmp81	%read{166,166} %write{165,165}
temp	int	$tmp82	%read{170,170} %write{169,169}
temp	float	$tmp83	%read{174,174} %write{172,172}
temp	float	$tmp84	%read{174,174} %write{173,173}
temp	float	$tmp85	%read{175,175} %write{174,174}
temp	float	$tmp86	%read{178,178} %write{175,175}
temp	float	$tmp87	%read{178,178} %write{177,177}
temp	float	$tmp88	%read{179,179} %write{178,178}
temp	int	$tmp89	%read{182,182} %write{181,181}
const	float	$const32	2		%read{183,183} %write{2147483647,-1}
temp	float	$tmp90	%read{184,184} %write{183,183}
temp	float	$tmp91	%read{185,185} %write{184,184}
temp	float	$tmp92	%read{186,186} %write{185,185}
temp	int	$tmp93	%read{189,189} %write{188,188}
const	string	$const33	"Manifold_Transform"		%read{190,205} %write{2147483647,-1}
const	string	$const34	"common"		%read{192,212} %write{2147483647,-1}
temp	normal	$tmp94	%read{195,195} %write{194,194}
const	vector	$const35	1 1 1		%read{197,211} %write{2147483647,-1}
temp	float	$tmp95	%read{201,201} %write{199,199}
temp	float	$tmp96	%read{201,201} %write{200,200}
const	float	$const36	3		%read{200,214} %write{2147483647,-1}
const	string	$const37	"object"		%read{206,212} %write{2147483647,-1}
temp	normal	$tmp97	%read{209,209} %write{208,208}
temp	float	$tmp98	%read{215,215} %write{213,213}
temp	float	$tmp99	%read{215,215} %write{214,214}
const	point	$const38	0 0 0		%read{220,359} %write{2147483647,-1}
temp	vector	$tmp101	%read{335,349} %write{218,218}
const	vector	$const39	0 0 0		%read{361,361} %write{2147483647,-1}
const	string	$const40	"Manifold_Std_Xform"		%read{219,219} %write{2147483647,-1}
temp	float	$tmp104	%read{224,224} %write{223,223}
temp	float	$tmp105	%read{223,223} %write{222,222}
temp	int	$tmp106	%read{225,225} %write{224,224}
temp	float	$tmp107	%read{229,229} %write{228,228}
temp	float	$tmp108	%read{228,228} %write{226,226}
const	string	$const41	"radians"		%read{227,301} %write{2147483647,-1}
const	float	$const42	0.0174532924		%read{228,302} %write{2147483647,-1}
temp	float	$tmp109	%read{230,230} %write{229,229}
const	string	$const43	"Math_RotateX"		%read{231,245} %write{2147483647,-1}
temp	float	$tmp110	%read{243,243} %write{232,232}
temp	float	$tmp111	%read{234,234} %write{233,233}
temp	float	$tmp112	%read{237,237} %write{234,234}
temp	float	$tmp113	%read{236,236} %write{235,235}
temp	float	$tmp114	%read{237,237} %write{236,236}
temp	float	$tmp115	%read{243,243} %write{237,237}
temp	float	$tmp116	%read{239,239} %write{238,238}
temp	float	$tmp117	%read{242,242} %write{239,239}
temp	float	$tmp118	%read{241,241} %write{240,240}
temp	float	$tmp119	%read{242,242} %write{241,241}
temp	float	$tmp120	%read{243,243} %write{242,242}
temp	float	$tmp121	%read{257,257} %write{246,246}
temp	float	$tmp122	%read{248,248} %write{247,247}
temp	float	$tmp123	%read{251,251} %write{248,248}
temp	float	$tmp124	%read{250,250} %write{249,249}
temp	float	$tmp125	%read{251,251} %write{250,250}
temp	float	$tmp126	%read{257,257} %write{251,251}
temp	float	$tmp127	%read{253,253} %write{252,252}
temp	float	$tmp128	%read{256,256} %write{253,253}
temp	float	$tmp129	%read{255,255} %write{254,254}
temp	float	$tmp130	%read{256,256} %write{255,255}
temp	float	$tmp131	%read{257,257} %write{256,256}
temp	float	$tmp132	%read{261,261} %write{260,260}
temp	float	$tmp133	%read{260,260} %write{259,259}
temp	int	$tmp134	%read{262,262} %write{261,261}
temp	float	$tmp135	%read{266,266} %write{265,265}
temp	float	$tmp136	%read{265,265} %write{263,263}
temp	float	$tmp137	%read{267,267} %write{266,266}
const	string	$const44	"Math_RotateY"		%read{268,282} %write{2147483647,-1}
temp	float	$tmp138	%read{270,270} %write{269,269}
temp	float	$tmp139	%read{273,273} %write{270,270}
temp	float	$tmp140	%read{272,272} %write{271,271}
temp	float	$tmp141	%read{273,273} %write{272,272}
temp	float	$tmp142	%read{280,280} %write{273,273}
temp	float	$tmp143	%read{280,280} %write{274,274}
temp	float	$tmp144	%read{276,276} %write{275,275}
temp	float	$tmp145	%read{279,279} %write{276,276}
temp	float	$tmp146	%read{278,278} %write{277,277}
temp	float	$tmp147	%read{279,279} %write{278,278}
temp	float	$tmp148	%read{280,280} %write{279,279}
temp	float	$tmp149	%read{284,284} %write{283,283}
temp	float	$tmp150	%read{287,287} %write{284,284}
temp	float	$tmp151	%read{286,286} %write{285,285}
temp	float	$tmp152	%read{287,287} %write{286,286}
temp	float	$tmp153	%read{294,294} %write{287,287}
temp	float	$tmp154	%read{294,294} %write{288,288}
temp	float	$tmp155	%read{290,290} %write{289,289}
temp	float	$tmp156	%read{293,293} %write{290,290}
temp	float	$tmp157	%read{292,292} %write{291,291}
temp	float	$tmp158	%read{293,293} %write{292,292}
temp	float	$tmp159	%read{294,294} %write{293,293}
temp	float	$tmp160	%read{298,298} %write{297,297}
temp	float	$tmp161	%read{297,297} %write{296,296}
temp	int	$tmp162	%read{299,299} %write{298,298}
temp	float	$tmp163	%read{303,303} %write{302,302}
temp	float	$tmp164	%read{302,302} %write{300,300}
temp	float	$tmp165	%read{304,304} %write{303,303}
const	string	$const45	"Math_RotateZ"		%read{305,319} %write{2147483647,-1}
temp	float	$tmp166	%read{307,307} %write{306,306}
temp	float	$tmp167	%read{310,310} %write{307,307}
temp	float	$tmp168	%read{309,309} %write{308,308}
temp	float	$tmp169	%read{310,310} %write{309,309}
temp	float	$tmp170	%read{317,317} %write{310,310}
temp	float	$tmp171	%read{312,312} %write{311,311}
temp	float	$tmp172	%read{315,315} %write{312,312}
temp	float	$tmp173	%read{314,314} %write{313,313}
temp	float	$tmp174	%read{315,315} %write{314,314}
temp	float	$tmp175	%read{317,317} %write{315,315}
temp	float	$tmp176	%read{317,317} %write{316,316}
temp	float	$tmp177	%read{321,321} %write{320,320}
temp	float	$tmp178	%read{324,324} %write{321,321}
temp	float	$tmp179	%read{323,323} %write{322,322}
temp	float	$tmp180	%read{324,324} %write{323,323}
temp	float	$tmp181	%read{331,331} %write{324,324}
temp	float	$tmp182	%read{326,326} %write{325,325}
temp	float	$tmp183	%read{329,329} %write{326,326}
temp	float	$tmp184	%read{328,328} %write{327,327}
temp	float	$tmp185	%read{329,329} %write{328,328}
temp	float	$tmp186	%read{331,331} %write{329,329}
temp	float	$tmp187	%read{331,331} %write{330,330}
temp	float	$tmp188	%read{356,356} %write{339,340}
temp	float	$tmp189	%read{337,340} %write{335,335}
const	string	$const46	"Math_SafeDivide"		%read{336,350} %write{2147483647,-1}
temp	int	$tmp190	%read{338,338} %write{337,337}
temp	float	$tmp191	%read{356,356} %write{346,347}
temp	float	$tmp192	%read{344,347} %write{342,342}
temp	int	$tmp193	%read{345,345} %write{344,344}
temp	float	$tmp194	%read{356,356} %write{353,354}
temp	float	$tmp195	%read{351,354} %write{349,349}
temp	int	$tmp196	%read{352,352} %write{351,351}
temp	vector	$tmp197	%read{362,362} %write{361,361}
temp	float	$tmp198	%read{372,372} %write{371,371}
temp	float	$tmp199	%read{371,371} %write{365,365}
temp	float	$tmp200	%read{365,365} %write{364,364}
temp	float	$tmp201	%read{371,371} %write{370,370}
temp	float	$tmp202	%read{370,370} %write{367,367}
temp	float	$tmp203	%read{367,367} %write{366,366}
temp	float	$tmp204	%read{370,370} %write{369,369}
temp	float	$tmp205	%read{369,369} %write{368,368}
code ___main___
# PxrManifold3D.osl:311
#     int success = 0;
	assign		success $const1 	%filename{"PxrManifold3D.osl"} %line{311} %argrw{"wr"}
# PxrManifold3D.osl:312
#     if (use == 1)
	eq		$tmp1 use $const2 	%line{312} %argrw{"wrr"}
	if		$tmp1 4 16 	%argrw{"r"}
# PxrManifold3D.osl:315
#         success = getattribute("primvar", "P", result.Q);
	getattribute	success $const3 $const4 result.Q 	%line{315} %argrw{"wrrw"}
# PxrManifold3D.osl:317
#     else if (use == 2)
	eq		$tmp2 use $const5 	%line{317} %argrw{"wrr"}
	if		$tmp2 10 16 	%argrw{"r"}
# PxrManifold3D.osl:320
#         if (pref == "")
	eq		$tmp3 pref $const6 	%line{320} %argrw{"wrr"}
	if		$tmp3 9 10 	%argrw{"r"}
# PxrManifold3D.osl:321
#             success = getattribute("primvar", "__Pref", result.Q);
	getattribute	success $const3 $const7 result.Q 	%line{321} %argrw{"wrrw"}
# PxrManifold3D.osl:323
#             success = getattribute("primvar", pref, result.Q);
	getattribute	success $const3 pref result.Q 	%line{323} %argrw{"wrrw"}
# PxrManifold3D.osl:325
#     else if (use == 3)
	eq		$tmp4 use $const8 	%line{325} %argrw{"wrr"}
	if		$tmp4 16 16 	%argrw{"r"}
# PxrManifold3D.osl:328
#         if (pref == "")
	eq		$tmp5 pref $const6 	%line{328} %argrw{"wrr"}
	if		$tmp5 15 16 	%argrw{"r"}
# PxrManifold3D.osl:329
#             success = getattribute("primvar", "__WPref", result.Q);
	getattribute	success $const3 $const9 result.Q 	%line{329} %argrw{"wrrw"}
# PxrManifold3D.osl:331
#             success = getattribute("primvar", pref, result.Q);
	getattribute	success $const3 pref result.Q 	%line{331} %argrw{"wrrw"}
# PxrManifold3D.osl:333
#     if (success == 0)
	eq		$tmp6 success $const1 	%line{333} %argrw{"wrr"}
	if		$tmp6 20 20 	%argrw{"r"}
# PxrManifold3D.osl:336
#         result.Q = P;
	assign		result.Q P 	%line{336} %argrw{"wr"}
# PxrManifold3D.osl:337
#         result.QN = N;
	assign		result.QN N 	%line{337} %argrw{"wr"}
# PxrManifold3D.osl:341
#     result.Qradius = 0.0;
	assign		result.Qradius $const10 	%line{341} %argrw{"wr"}
# PxrManifold3D.osl:342
#     success = getattribute("builtin", "PRadius", result.Qradius);
	getattribute	success $const11 $const12 result.Qradius 	%line{342} %argrw{"wrrw"}
# PxrManifold3D.osl:343
#     if (success == 0)  // always 0 in XPU: "PRadius" is not supported
	eq		$tmp7 success $const1 	%line{343} %argrw{"wrr"}
	if		$tmp7 34 34 	%argrw{"r"}
# PxrManifold3D.osl:346
#         float width = max(filterwidth(P.x), filterwidth(P.y));
	compref		$tmp9 P $const1 	%line{346} %argrw{"wrr"}
	filterwidth	$tmp8 $tmp9 	%argrw{"wr"} %argderivs{1}
	compref		$tmp11 P $const2 	%argrw{"wrr"}
	filterwidth	$tmp10 $tmp11 	%argrw{"wr"} %argderivs{1}
	max		___700_width $tmp8 $tmp10 	%argrw{"wrr"}
# PxrManifold3D.osl:347
#         width = max(width, filterwidth(P.z));
	compref		$tmp13 P $const5 	%line{347} %argrw{"wrr"}
	filterwidth	$tmp12 $tmp13 	%argrw{"wr"} %argderivs{1}
	max		___700_width ___700_width $tmp12 	%argrw{"wrr"}
# PxrManifold3D.osl:348
#         result.Qradius = 0.5 * width;
	mul		result.Qradius $const13 ___700_width 	%line{348} %argrw{"wrr"}
	assign		result.Qradius result.Qradius 	%argrw{"wr"}
# PxrManifold3D.osl:351
#         float rOX = 0.0, rOY = 0.0, rOZ = 0.0,
	assign		rOX $const10 	%line{351} %argrw{"wr"}
	assign		rOY $const10 	%argrw{"wr"}
	assign		rOZ $const10 	%argrw{"wr"}
# PxrManifold3D.osl:352
#           rSX = 1.0, rSY = 1.0, rSZ = 1.0;
	assign		rSX $const14 	%line{352} %argrw{"wr"}
	assign		rSY $const14 	%argrw{"wr"}
	assign		rSZ $const14 	%argrw{"wr"}
# PxrManifold3D.osl:353
#     if (randomize)
	if		randomize 181 181 	%line{353} %argrw{"r"}
# PxrManifold3D.osl:356
#         float fseed = getRandomFloat(source, varName, 0.0, scaleNormalizedPrimvar,
	functioncall	$const15 99 	%line{356} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:175
#     float fseed = defaultVal;
	assign		___675_fseed $const10 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h"} %line{175} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:177
#     if (source == k_IdentifierId)
	eq		$tmp15 source $const1 	%line{177} %argrw{"wrr"}
	if		$tmp15 49 89 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:182
#         getattribute("builtin", "id", fseed);
	getattribute	$tmp16 $const11 $const16 ___675_fseed 	%line{182} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:183
#         if (verbosity > k_Warnings)
	gt		$tmp17 verbosity $const2 	%line{183} %argrw{"wrr"}
	if		$tmp17 49 49 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:185
#             printf("[getRandomFloat] id: %f", fseed);
	printf		$const17 ___675_fseed 	%line{185} %argrw{"rr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:188
#     else if (source == k_IdentifierName)
	eq		$tmp18 source $const2 	%line{188} %argrw{"wrr"}
	if		$tmp18 64 89 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:191
#         COMPAT_NAME_HASH(fseed);
	eq		$tmp19 $const1 $const1 	%line{191} %argrw{"wrr"}
	neq		$tmp20 $tmp19 $const1 	%argrw{"wrr"}
	if		$tmp20 54 58 	%argrw{"r"}
	getattribute	$tmp21 $const18 ___675_fseed 	%argrw{"wrw"}
	eq		$tmp22 $tmp21 $const1 	%argrw{"wrr"}
	neq		$tmp23 $tmp22 $const1 	%argrw{"wrr"}
	assign		$tmp20 $tmp23 	%argrw{"wr"}
	if		$tmp20 64 64 	%argrw{"r"}
	assign		___679_idname $const6 	%argrw{"wr"}
	getattribute	$tmp24 $const19 ___679_idname 	%argrw{"wrw"}
	hash		$tmp25 ___679_idname 	%argrw{"wr"}
	mod		$tmp26 $tmp25 $const20 	%argrw{"wrr"}
	assign		___675_fseed $tmp26 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:193
#     else if (source == k_Primvar)
	eq		$tmp27 source $const5 	%line{193} %argrw{"wrr"}
	if		$tmp27 78 89 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:195
#         if (!getattribute("primvar", varName, fseed) && verbosity > k_Silent)
	getattribute	$tmp28 $const3 varName ___675_fseed 	%line{195} %argrw{"wrrw"}
	eq		$tmp29 $tmp28 $const1 	%argrw{"wrr"}
	neq		$tmp30 $tmp29 $const1 	%argrw{"wrr"}
	if		$tmp30 73 73 	%argrw{"r"}
	gt		$tmp31 verbosity $const1 	%argrw{"wrr"}
	neq		$tmp32 $tmp31 $const1 	%argrw{"wrr"}
	assign		$tmp30 $tmp32 	%argrw{"wr"}
	if		$tmp30 75 75 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:197
#             warning("[getRandomFloat] Could not find primvar or could not convert to "
	warning		$const21 varName 	%line{197} %argrw{"rr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:200
#         if (scaleNormalizedPrimvar)
	if		scaleNormalizedPrimvar 78 78 	%line{200} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:201
#             fseed = (fseed - 0.5) * 65535.0;
	sub		$tmp33 ___675_fseed $const13 	%line{201} %argrw{"wrr"}
	mul		___675_fseed $tmp33 $const22 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:203
#     else if (source == k_Attribute)
	eq		$tmp34 source $const8 	%line{203} %argrw{"wrr"}
	if		$tmp34 89 89 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:205
#         if (!getattribute(varName, fseed) && verbosity > k_Silent)
	getattribute	$tmp35 varName ___675_fseed 	%line{205} %argrw{"wrw"}
	eq		$tmp36 $tmp35 $const1 	%argrw{"wrr"}
	neq		$tmp37 $tmp36 $const1 	%argrw{"wrr"}
	if		$tmp37 87 87 	%argrw{"r"}
	gt		$tmp38 verbosity $const1 	%argrw{"wrr"}
	neq		$tmp39 $tmp38 $const1 	%argrw{"wrr"}
	assign		$tmp37 $tmp39 	%argrw{"wr"}
	if		$tmp37 89 89 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:207
#             warning("[getRandomFloat] Could not find attribute or could not convert "
	warning		$const23 varName 	%line{207} %argrw{"rr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:213
#     float instanceId = 0;
	assign		___675_instanceId $const1 	%line{213} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:214
#     if (getattribute("user:procprimid", instanceId))
	getattribute	$tmp40 $const24 ___675_instanceId 	%line{214} %argrw{"wrw"}
	if		$tmp40 98 98 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:216
#         fseed = mod(fseed + instanceId, 65535);
	add		$tmp41 ___675_fseed ___675_instanceId 	%line{216} %argrw{"wrr"}
	functioncall	$const26 98 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:132
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp43 $tmp41 $const22 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{132} %argrw{"wrr"}
	floor		$tmp42 $tmp43 	%argrw{"wr"}
	mul		$tmp44 $const22 $tmp42 	%argrw{"wrr"}
	sub		___675_fseed $tmp41 $tmp44 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h:218
#     return fseed;
	assign		$tmp14 ___675_fseed 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLRandomize.h"} %line{218} %argrw{"wr"}
# PxrManifold3D.osl:357
#                                      NEVER_MATCH_CPP, verbosity) + seed;
	add		___701_fseed $tmp14 seed 	%filename{"PxrManifold3D.osl"} %line{357} %argrw{"wrr"}
# PxrManifold3D.osl:358
#         fseed = mod(fseed, 65535);
	functioncall	$const26 105 	%line{358} %argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:132
# float  mod (float  a, float  b) { return a - b*floor(a/b); }
	div		$tmp46 ___701_fseed $const22 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{132} %argrw{"wrr"}
	floor		$tmp45 $tmp46 	%argrw{"wr"}
	mul		$tmp47 $const22 $tmp45 	%argrw{"wrr"}
	sub		___701_fseed ___701_fseed $tmp47 	%argrw{"wrr"}
# PxrManifold3D.osl:359
#         float prob = probability ? noise("cell", fseed + 173.0) : 1.0;
	neq		$tmp48 probability $const10 	%filename{"PxrManifold3D.osl"} %line{359} %argrw{"wrr"}
	if		$tmp48 109 110 	%argrw{"r"}
	add		$tmp49 ___701_fseed $const28 	%argrw{"wrr"}
	noise		___701_prob $const27 $tmp49 	%argrw{"wrr"}
	assign		___701_prob $const14 	%argrw{"wr"}
# PxrManifold3D.osl:360
#         if (prob <= probability)
	le		$tmp50 ___701_prob probability 	%line{360} %argrw{"wrr"}
	if		$tmp50 181 181 	%argrw{"r"}
# PxrManifold3D.osl:362
#             color rnd = noise("cell", color(fseed, fseed + 7.0, fseed + 13.0));
	add		$tmp52 ___701_fseed $const29 	%line{362} %argrw{"wrr"}
	add		$tmp53 ___701_fseed $const30 	%argrw{"wrr"}
	color		$tmp51 ___701_fseed $tmp52 $tmp53 	%argrw{"wrrr"}
	noise		___702_rnd $const27 $tmp51 	%argrw{"wrr"}
# PxrManifold3D.osl:363
#             rOX = rOffsetXMin == rOffsetXMax
	eq		$tmp54 rOffsetXMin rOffsetXMax 	%line{363} %argrw{"wrr"}
# PxrManifold3D.osl:364
#                     ? rOffsetXMin
	if		$tmp54 119 124 	%line{364} %argrw{"r"}
	assign		rOX rOffsetXMin 	%argrw{"wr"}
# PxrManifold3D.osl:365
#                     : compress(rnd[0], rOffsetXMin, rOffsetXMax);
	compref		$tmp55 ___702_rnd $const1 	%line{365} %argrw{"wrr"}
	functioncall	$const31 124 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLUtils.h:158
#     return (hi - lo) * x + lo;
	sub		$tmp56 rOffsetXMax rOffsetXMin 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLUtils.h"} %line{158} %argrw{"wrr"}
	mul		$tmp57 $tmp56 $tmp55 	%argrw{"wrr"}
	add		rOX $tmp57 rOffsetXMin 	%argrw{"wrr"}
# PxrManifold3D.osl:366
#             rOY = rOffsetYMin == rOffsetYMax
	eq		$tmp58 rOffsetYMin rOffsetYMax 	%filename{"PxrManifold3D.osl"} %line{366} %argrw{"wrr"}
# PxrManifold3D.osl:367
#                     ? rOffsetYMin
	if		$tmp58 127 132 	%line{367} %argrw{"r"}
	assign		rOY rOffsetYMin 	%argrw{"wr"}
# PxrManifold3D.osl:368
#                     : compress(rnd[1], rOffsetYMin, rOffsetYMax);
	compref		$tmp59 ___702_rnd $const2 	%line{368} %argrw{"wrr"}
	functioncall	$const31 132 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLUtils.h:158
#     return (hi - lo) * x + lo;
	sub		$tmp60 rOffsetYMax rOffsetYMin 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLUtils.h"} %line{158} %argrw{"wrr"}
	mul		$tmp61 $tmp60 $tmp59 	%argrw{"wrr"}
	add		rOY $tmp61 rOffsetYMin 	%argrw{"wrr"}
# PxrManifold3D.osl:369
#             rOZ = rOffsetZMin, rOffsetZMax
	assign		rOZ rOffsetZMin 	%filename{"PxrManifold3D.osl"} %line{369} %argrw{"wr"}
# PxrManifold3D.osl:370
#                     ? rOffsetZMin
	neq		$tmp63 rOffsetZMax $const10 	%line{370} %argrw{"wrr"}
	if		$tmp63 136 141 	%argrw{"r"}
	assign		$tmp62 rOffsetZMin 	%argrw{"wr"}
# PxrManifold3D.osl:371
#                     : compress(rnd[2], rOffsetZMin, rOffsetZMax);
	compref		$tmp64 ___702_rnd $const5 	%line{371} %argrw{"wrr"}
	functioncall	$const31 141 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLUtils.h:158
#     return (hi - lo) * x + lo;
	sub		$tmp65 rOffsetZMax rOffsetZMin 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLUtils.h"} %line{158} %argrw{"wrr"}
	mul		$tmp66 $tmp65 $tmp64 	%argrw{"wrr"}
	add		$tmp62 $tmp66 rOffsetZMin 	%argrw{"wrr"}
# PxrManifold3D.osl:372
#             result.Q += point(rOX, rOY, rOZ);
	point		$tmp67 rOX rOY rOZ 	%filename{"PxrManifold3D.osl"} %line{372} %argrw{"wrrr"}
	add		result.Q result.Q $tmp67 	%argrw{"wrr"}
	assign		result.Q result.Q 	%argrw{"wr"}
# PxrManifold3D.osl:373
#             rSX = rScaleXMin == rScaleXMax
	eq		$tmp68 rScaleXMin rScaleXMax 	%line{373} %argrw{"wrr"}
# PxrManifold3D.osl:374
#                     ? rScaleXMin
	if		$tmp68 147 155 	%line{374} %argrw{"r"}
	assign		rSX rScaleXMin 	%argrw{"wr"}
# PxrManifold3D.osl:375
#                     : compress((rnd[0] + rnd[1]) * 0.5, rScaleXMin, rScaleXMax);
	compref		$tmp69 ___702_rnd $const1 	%line{375} %argrw{"wrr"}
	compref		$tmp70 ___702_rnd $const2 	%argrw{"wrr"}
	add		$tmp71 $tmp69 $tmp70 	%argrw{"wrr"}
	mul		$tmp72 $tmp71 $const13 	%argrw{"wrr"}
	functioncall	$const31 155 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLUtils.h:158
#     return (hi - lo) * x + lo;
	sub		$tmp73 rScaleXMax rScaleXMin 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLUtils.h"} %line{158} %argrw{"wrr"}
	mul		$tmp74 $tmp73 $tmp72 	%argrw{"wrr"}
	add		rSX $tmp74 rScaleXMin 	%argrw{"wrr"}
# PxrManifold3D.osl:377
#                 ? rScaleYMin == rScaleYMax
	if		enableNonUniformScale 167 168 	%filename{"PxrManifold3D.osl"} %line{377} %argrw{"r"}
	eq		$tmp75 rScaleYMin rScaleYMax 	%argrw{"wrr"}
# PxrManifold3D.osl:378
#                     ? rScaleYMin
	if		$tmp75 159 167 	%line{378} %argrw{"r"}
	assign		rSY rScaleYMin 	%argrw{"wr"}
# PxrManifold3D.osl:379
#                     : compress((rnd[1] + rnd[2]) * 0.5, rScaleYMin, rScaleYMax)
	compref		$tmp76 ___702_rnd $const2 	%line{379} %argrw{"wrr"}
	compref		$tmp77 ___702_rnd $const5 	%argrw{"wrr"}
	add		$tmp78 $tmp76 $tmp77 	%argrw{"wrr"}
	mul		$tmp79 $tmp78 $const13 	%argrw{"wrr"}
	functioncall	$const31 167 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLUtils.h:158
#     return (hi - lo) * x + lo;
	sub		$tmp80 rScaleYMax rScaleYMin 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLUtils.h"} %line{158} %argrw{"wrr"}
	mul		$tmp81 $tmp80 $tmp79 	%argrw{"wrr"}
	add		rSY $tmp81 rScaleYMin 	%argrw{"wrr"}
# PxrManifold3D.osl:380
#                 : rSY = rSX;
	assign		rSY rSX 	%filename{"PxrManifold3D.osl"} %line{380} %argrw{"wr"}
# PxrManifold3D.osl:382
#                 ? rScaleZMin == rScaleZMax
	if		enableNonUniformScale 180 181 	%line{382} %argrw{"r"}
	eq		$tmp82 rScaleZMin rScaleZMax 	%argrw{"wrr"}
# PxrManifold3D.osl:383
#                     ? rScaleZMin
	if		$tmp82 172 180 	%line{383} %argrw{"r"}
	assign		rSZ rScaleZMin 	%argrw{"wr"}
# PxrManifold3D.osl:384
#                     : compress((rnd[0] + rnd[2]) * 0.5, rScaleZMin, rScaleZMax)
	compref		$tmp83 ___702_rnd $const1 	%line{384} %argrw{"wrr"}
	compref		$tmp84 ___702_rnd $const5 	%argrw{"wrr"}
	add		$tmp85 $tmp83 $tmp84 	%argrw{"wrr"}
	mul		$tmp86 $tmp85 $const13 	%argrw{"wrr"}
	functioncall	$const31 180 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLUtils.h:158
#     return (hi - lo) * x + lo;
	sub		$tmp87 rScaleZMax rScaleZMin 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLUtils.h"} %line{158} %argrw{"wrr"}
	mul		$tmp88 $tmp87 $tmp86 	%argrw{"wrr"}
	add		rSZ $tmp88 rScaleZMin 	%argrw{"wrr"}
# PxrManifold3D.osl:385
#                 : rSZ = rSX;
	assign		rSZ rSX 	%filename{"PxrManifold3D.osl"} %line{385} %argrw{"wr"}
# PxrManifold3D.osl:390
#     if (isconnected(warp))
	isconnected	$tmp89 warp 	%line{390} %argrw{"wr"}
	if		$tmp89 188 188 	%argrw{"r"}
# PxrManifold3D.osl:393
#         result.Q += (2.0 * warp - 1.0) * warpAmount;
	mul		$tmp90 $const32 warp 	%line{393} %argrw{"wrr"}
	sub		$tmp91 $tmp90 $const14 	%argrw{"wrr"}
	mul		$tmp92 $tmp91 warpAmount 	%argrw{"wrr"}
	add		result.Q result.Q $tmp92 	%argrw{"wrr"}
	assign		result.Q result.Q 	%argrw{"wr"}
# PxrManifold3D.osl:397
#     if (coordsys != "")
	neq		$tmp93 coordsys $const6 	%line{397} %argrw{"wrr"}
	if		$tmp93 204 218 	%argrw{"r"}
# PxrManifold3D.osl:398
#         Manifold_Transform(result, coordsys);
	functioncall	$const33 204 	%line{398} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:91
#     Manifold_Transform(ioManifold, "common", toSpace);
	functioncall	$const33 204 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{91} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:78
#     ioManifold.Q = transform(fromSpace, toSpace, ioManifold.Q);
	transform	result.Q $const34 coordsys result.Q 	%line{78} %argrw{"wrrr"}
	assign		result.Q result.Q 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:79
#     ioManifold.QN = normalize(transform(fromSpace, toSpace, ioManifold.QN));
	transformn	$tmp94 $const34 coordsys result.QN 	%line{79} %argrw{"wrrr"}
	normalize	result.QN $tmp94 	%argrw{"wr"}
	assign		result.QN result.QN 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:81
#     vector vec1 = vector(1.0);
	assign		___412_vec1 $const35 	%line{81} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:82
#     vec1 = transform(fromSpace, toSpace, vec1);
	transformv	___412_vec1 $const34 coordsys ___412_vec1 	%line{82} %argrw{"wrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:83
#     float scale = length(vec1) / sqrt(3.0);
	length		$tmp95 ___412_vec1 	%line{83} %argrw{"wr"}
	sqrt		$tmp96 $const36 	%argrw{"wr"}
	div		___412_scale $tmp95 $tmp96 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:84
#     ioManifold.Qradius *= scale;
	mul		result.Qradius result.Qradius ___412_scale 	%line{84} %argrw{"wrr"}
	assign		result.Qradius result.Qradius 	%argrw{"wr"}
# PxrManifold3D.osl:400
#         Manifold_Transform(result, "object");
	functioncall	$const33 218 	%filename{"PxrManifold3D.osl"} %line{400} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:91
#     Manifold_Transform(ioManifold, "common", toSpace);
	functioncall	$const33 218 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{91} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:78
#     ioManifold.Q = transform(fromSpace, toSpace, ioManifold.Q);
	transform	result.Q $const34 $const37 result.Q 	%line{78} %argrw{"wrrr"}
	assign		result.Q result.Q 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:79
#     ioManifold.QN = normalize(transform(fromSpace, toSpace, ioManifold.QN));
	transformn	$tmp97 $const34 $const37 result.QN 	%line{79} %argrw{"wrrr"}
	normalize	result.QN $tmp97 	%argrw{"wr"}
	assign		result.QN result.QN 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:81
#     vector vec1 = vector(1.0);
	assign		___412_vec1 $const35 	%line{81} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:82
#     vec1 = transform(fromSpace, toSpace, vec1);
	transformv	___412_vec1 $const34 $const37 ___412_vec1 	%line{82} %argrw{"wrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:83
#     float scale = length(vec1) / sqrt(3.0);
	length		$tmp98 ___412_vec1 	%line{83} %argrw{"wr"}
	sqrt		$tmp99 $const36 	%argrw{"wr"}
	div		___412_scale $tmp98 $tmp99 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:84
#     ioManifold.Qradius *= scale;
	mul		result.Qradius result.Qradius ___412_scale 	%line{84} %argrw{"wrr"}
	assign		result.Qradius result.Qradius 	%argrw{"wr"}
# PxrManifold3D.osl:406
#                        vector(rSX, rSY, rSZ),   // scale
	vector		$tmp101 rSX rSY rSZ 	%filename{"PxrManifold3D.osl"} %line{406} %argrw{"wrrr"}
# PxrManifold3D.osl:403
#     Manifold_Std_Xform(result,
	functioncall	$const40 374 	%line{403} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:221
#     manifold.Q -= origin;
	sub		result.Q result.Q $const38 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{221} %argrw{"wrr"}
	assign		result.Q result.Q 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:223
#     if (abs(rotation[0]) > 0.0) {
	compref		$tmp105 $const38 $const1 	%line{223} %argrw{"wrr"}
	abs		$tmp104 $tmp105 	%argrw{"wr"}
	gt		$tmp106 $tmp104 $const10 	%argrw{"wrr"}
	if		$tmp106 259 259 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:225
#         sincos(-radians(rotation[0]), sinAng, cosAng);
	compref		$tmp108 $const38 $const1 	%line{225} %argrw{"wrr"}
	functioncall	$const41 229 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	mul		$tmp107 $tmp108 $const42 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:225
#         sincos(-radians(rotation[0]), sinAng, cosAng);
	neg		$tmp109 $tmp107 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{225} %argrw{"wr"}
	sincos		$tmp109 ___420_sinAng ___420_cosAng 	%argrw{"rww"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:226
#         manifold.Q = Math_RotateX(sinAng, cosAng, manifold.Q);
	functioncall	$const43 244 	%line{226} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:263
#     return point(Q[0],
	compref		$tmp110 result.Q $const1 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{263} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:264
#                  cosAng * Q[1] - sinAng * Q[2],
	compref		$tmp111 result.Q $const2 	%line{264} %argrw{"wrr"}
	mul		$tmp112 ___420_cosAng $tmp111 	%argrw{"wrr"}
	compref		$tmp113 result.Q $const5 	%argrw{"wrr"}
	mul		$tmp114 ___420_sinAng $tmp113 	%argrw{"wrr"}
	sub		$tmp115 $tmp112 $tmp114 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:265
#                  sinAng * Q[1] + cosAng * Q[2]);
	compref		$tmp116 result.Q $const2 	%line{265} %argrw{"wrr"}
	mul		$tmp117 ___420_sinAng $tmp116 	%argrw{"wrr"}
	compref		$tmp118 result.Q $const5 	%argrw{"wrr"}
	mul		$tmp119 ___420_cosAng $tmp118 	%argrw{"wrr"}
	add		$tmp120 $tmp117 $tmp119 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:263
#     return point(Q[0],
	point		result.Q $tmp110 $tmp115 $tmp120 	%line{263} %argrw{"wrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:226
#         manifold.Q = Math_RotateX(sinAng, cosAng, manifold.Q);
	assign		result.Q result.Q 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{226} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:227
#         manifold.QN = Math_RotateX(sinAng, cosAng, manifold.QN);
	functioncall	$const43 258 	%line{227} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:263
#     return point(Q[0],
	compref		$tmp121 result.QN $const1 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{263} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:264
#                  cosAng * Q[1] - sinAng * Q[2],
	compref		$tmp122 result.QN $const2 	%line{264} %argrw{"wrr"}
	mul		$tmp123 ___420_cosAng $tmp122 	%argrw{"wrr"}
	compref		$tmp124 result.QN $const5 	%argrw{"wrr"}
	mul		$tmp125 ___420_sinAng $tmp124 	%argrw{"wrr"}
	sub		$tmp126 $tmp123 $tmp125 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:265
#                  sinAng * Q[1] + cosAng * Q[2]);
	compref		$tmp127 result.QN $const2 	%line{265} %argrw{"wrr"}
	mul		$tmp128 ___420_sinAng $tmp127 	%argrw{"wrr"}
	compref		$tmp129 result.QN $const5 	%argrw{"wrr"}
	mul		$tmp130 ___420_cosAng $tmp129 	%argrw{"wrr"}
	add		$tmp131 $tmp128 $tmp130 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:263
#     return point(Q[0],
	point		result.QN $tmp121 $tmp126 $tmp131 	%line{263} %argrw{"wrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:227
#         manifold.QN = Math_RotateX(sinAng, cosAng, manifold.QN);
	assign		result.QN result.QN 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{227} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:229
#     if (abs(rotation[1]) > 0) {
	compref		$tmp133 $const38 $const2 	%line{229} %argrw{"wrr"}
	abs		$tmp132 $tmp133 	%argrw{"wr"}
	gt		$tmp134 $tmp132 $const1 	%argrw{"wrr"}
	if		$tmp134 296 296 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:231
#         sincos(-radians(rotation[1]), sinAng, cosAng);
	compref		$tmp136 $const38 $const2 	%line{231} %argrw{"wrr"}
	functioncall	$const41 266 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	mul		$tmp135 $tmp136 $const42 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:231
#         sincos(-radians(rotation[1]), sinAng, cosAng);
	neg		$tmp137 $tmp135 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{231} %argrw{"wr"}
	sincos		$tmp137 ___421_sinAng ___421_cosAng 	%argrw{"rww"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:232
#         manifold.Q = Math_RotateY(sinAng, cosAng, manifold.Q);
	functioncall	$const44 281 	%line{232} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:282
#     return point(sinAng * Q[2] + cosAng * Q[0],
	compref		$tmp138 result.Q $const5 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{282} %argrw{"wrr"}
	mul		$tmp139 ___421_sinAng $tmp138 	%argrw{"wrr"}
	compref		$tmp140 result.Q $const1 	%argrw{"wrr"}
	mul		$tmp141 ___421_cosAng $tmp140 	%argrw{"wrr"}
	add		$tmp142 $tmp139 $tmp141 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:283
#                  Q[1],
	compref		$tmp143 result.Q $const2 	%line{283} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:284
#                  cosAng * Q[2] - sinAng * Q[0]);
	compref		$tmp144 result.Q $const5 	%line{284} %argrw{"wrr"}
	mul		$tmp145 ___421_cosAng $tmp144 	%argrw{"wrr"}
	compref		$tmp146 result.Q $const1 	%argrw{"wrr"}
	mul		$tmp147 ___421_sinAng $tmp146 	%argrw{"wrr"}
	sub		$tmp148 $tmp145 $tmp147 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:282
#     return point(sinAng * Q[2] + cosAng * Q[0],
	point		result.Q $tmp142 $tmp143 $tmp148 	%line{282} %argrw{"wrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:232
#         manifold.Q = Math_RotateY(sinAng, cosAng, manifold.Q);
	assign		result.Q result.Q 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{232} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:233
#         manifold.QN = Math_RotateY(sinAng, cosAng, manifold.QN);
	functioncall	$const44 295 	%line{233} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:282
#     return point(sinAng * Q[2] + cosAng * Q[0],
	compref		$tmp149 result.QN $const5 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{282} %argrw{"wrr"}
	mul		$tmp150 ___421_sinAng $tmp149 	%argrw{"wrr"}
	compref		$tmp151 result.QN $const1 	%argrw{"wrr"}
	mul		$tmp152 ___421_cosAng $tmp151 	%argrw{"wrr"}
	add		$tmp153 $tmp150 $tmp152 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:283
#                  Q[1],
	compref		$tmp154 result.QN $const2 	%line{283} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:284
#                  cosAng * Q[2] - sinAng * Q[0]);
	compref		$tmp155 result.QN $const5 	%line{284} %argrw{"wrr"}
	mul		$tmp156 ___421_cosAng $tmp155 	%argrw{"wrr"}
	compref		$tmp157 result.QN $const1 	%argrw{"wrr"}
	mul		$tmp158 ___421_sinAng $tmp157 	%argrw{"wrr"}
	sub		$tmp159 $tmp156 $tmp158 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:282
#     return point(sinAng * Q[2] + cosAng * Q[0],
	point		result.QN $tmp153 $tmp154 $tmp159 	%line{282} %argrw{"wrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:233
#         manifold.QN = Math_RotateY(sinAng, cosAng, manifold.QN);
	assign		result.QN result.QN 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{233} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:235
#     if (abs(rotation[2]) > 0) {
	compref		$tmp161 $const38 $const5 	%line{235} %argrw{"wrr"}
	abs		$tmp160 $tmp161 	%argrw{"wr"}
	gt		$tmp162 $tmp160 $const1 	%argrw{"wrr"}
	if		$tmp162 333 333 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:237
#         sincos(-radians(rotation[2]), sinAng, cosAng);
	compref		$tmp164 $const38 $const5 	%line{237} %argrw{"wrr"}
	functioncall	$const41 303 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	mul		$tmp163 $tmp164 $const42 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:237
#         sincos(-radians(rotation[2]), sinAng, cosAng);
	neg		$tmp165 $tmp163 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{237} %argrw{"wr"}
	sincos		$tmp165 ___422_sinAng ___422_cosAng 	%argrw{"rww"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:238
#         manifold.Q = Math_RotateZ(sinAng, cosAng, manifold.Q);
	functioncall	$const45 318 	%line{238} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:301
#     return point(cosAng * Q[0] - sinAng * Q[1],
	compref		$tmp166 result.Q $const1 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{301} %argrw{"wrr"}
	mul		$tmp167 ___422_cosAng $tmp166 	%argrw{"wrr"}
	compref		$tmp168 result.Q $const2 	%argrw{"wrr"}
	mul		$tmp169 ___422_sinAng $tmp168 	%argrw{"wrr"}
	sub		$tmp170 $tmp167 $tmp169 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:302
#                  sinAng * Q[0] + cosAng * Q[1],
	compref		$tmp171 result.Q $const1 	%line{302} %argrw{"wrr"}
	mul		$tmp172 ___422_sinAng $tmp171 	%argrw{"wrr"}
	compref		$tmp173 result.Q $const2 	%argrw{"wrr"}
	mul		$tmp174 ___422_cosAng $tmp173 	%argrw{"wrr"}
	add		$tmp175 $tmp172 $tmp174 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:303
#                  Q[2]);
	compref		$tmp176 result.Q $const5 	%line{303} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:301
#     return point(cosAng * Q[0] - sinAng * Q[1],
	point		result.Q $tmp170 $tmp175 $tmp176 	%line{301} %argrw{"wrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:238
#         manifold.Q = Math_RotateZ(sinAng, cosAng, manifold.Q);
	assign		result.Q result.Q 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{238} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:239
#         manifold.QN = Math_RotateZ(sinAng, cosAng, manifold.QN);
	functioncall	$const45 332 	%line{239} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:301
#     return point(cosAng * Q[0] - sinAng * Q[1],
	compref		$tmp177 result.QN $const1 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{301} %argrw{"wrr"}
	mul		$tmp178 ___422_cosAng $tmp177 	%argrw{"wrr"}
	compref		$tmp179 result.QN $const2 	%argrw{"wrr"}
	mul		$tmp180 ___422_sinAng $tmp179 	%argrw{"wrr"}
	sub		$tmp181 $tmp178 $tmp180 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:302
#                  sinAng * Q[0] + cosAng * Q[1],
	compref		$tmp182 result.QN $const1 	%line{302} %argrw{"wrr"}
	mul		$tmp183 ___422_sinAng $tmp182 	%argrw{"wrr"}
	compref		$tmp184 result.QN $const2 	%argrw{"wrr"}
	mul		$tmp185 ___422_cosAng $tmp184 	%argrw{"wrr"}
	add		$tmp186 $tmp183 $tmp185 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:303
#                  Q[2]);
	compref		$tmp187 result.QN $const5 	%line{303} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:301
#     return point(cosAng * Q[0] - sinAng * Q[1],
	point		result.QN $tmp181 $tmp186 $tmp187 	%line{301} %argrw{"wrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:239
#         manifold.QN = Math_RotateZ(sinAng, cosAng, manifold.QN);
	assign		result.QN result.QN 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{239} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:242
#     manifold.QN = normalize(manifold.QN);
	normalize	result.QN result.QN 	%line{242} %argrw{"wr"}
	assign		result.QN result.QN 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:245
#     vector scaleFactor = vector(Math_SafeDivide(frequency, scale[0]),
	compref		$tmp189 $tmp101 $const1 	%line{245} %argrw{"wrr"}
	functioncall	$const46 342 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:176
#     return (dem == 0) ? 0. : num/dem;
	eq		$tmp190 $tmp189 $const1 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{176} %argrw{"wrr"}
	if		$tmp190 340 341 	%argrw{"r"}
	assign		$tmp188 $const10 	%argrw{"wr"}
	div		$tmp188 scale $tmp189 	%argrw{"wrr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:246
#                                 Math_SafeDivide(frequency, scale[1]),
	compref		$tmp192 $tmp101 $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{246} %argrw{"wrr"}
	functioncall	$const46 349 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:176
#     return (dem == 0) ? 0. : num/dem;
	eq		$tmp193 $tmp192 $const1 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{176} %argrw{"wrr"}
	if		$tmp193 347 348 	%argrw{"r"}
	assign		$tmp191 $const10 	%argrw{"wr"}
	div		$tmp191 scale $tmp192 	%argrw{"wrr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:247
#                                 Math_SafeDivide(frequency, scale[2]));
	compref		$tmp195 $tmp101 $const5 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{247} %argrw{"wrr"}
	functioncall	$const46 356 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h:176
#     return (dem == 0) ? 0. : num/dem;
	eq		$tmp196 $tmp195 $const1 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Math.h"} %line{176} %argrw{"wrr"}
	if		$tmp196 354 355 	%argrw{"r"}
	assign		$tmp194 $const10 	%argrw{"wr"}
	div		$tmp194 scale $tmp195 	%argrw{"wrr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:245
#     vector scaleFactor = vector(Math_SafeDivide(frequency, scale[0]),
	vector		___419_scaleFactor $tmp188 $tmp191 $tmp194 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{245} %argrw{"wrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:248
#     manifold.Q *= scaleFactor;
	mul		result.Q result.Q ___419_scaleFactor 	%line{248} %argrw{"wrr"}
	assign		result.Q result.Q 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:250
#     manifold.Q += origin;
	add		result.Q result.Q $const38 	%line{250} %argrw{"wrr"}
	assign		result.Q result.Q 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:251
#     manifold.Q += offsetVector*offset;
	mul		$tmp197 $const39 $const10 	%line{251} %argrw{"wrr"}
	add		result.Q result.Q $tmp197 	%argrw{"wrr"}
	assign		result.Q result.Q 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:256
#     manifold.Qradius *= max(abs(scaleFactor[0]),
	compref		$tmp200 ___419_scaleFactor $const1 	%line{256} %argrw{"wrr"}
	abs		$tmp199 $tmp200 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:257
#                              max(abs(scaleFactor[1]),
	compref		$tmp203 ___419_scaleFactor $const2 	%line{257} %argrw{"wrr"}
	abs		$tmp202 $tmp203 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:258
#                                  abs(scaleFactor[2])));
	compref		$tmp205 ___419_scaleFactor $const5 	%line{258} %argrw{"wrr"}
	abs		$tmp204 $tmp205 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:257
#                              max(abs(scaleFactor[1]),
	max		$tmp201 $tmp202 $tmp204 	%line{257} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:256
#     manifold.Qradius *= max(abs(scaleFactor[0]),
	max		$tmp198 $tmp199 $tmp201 	%line{256} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:258
#                                  abs(scaleFactor[2])));
	mul		result.Qradius result.Qradius $tmp198 	%line{258} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:256
#     manifold.Qradius *= max(abs(scaleFactor[0]),
	assign		result.Qradius result.Qradius 	%line{256} %argrw{"wr"}
# PxrManifold3D.osl:410
#     resultX = result.Q[0];
	compref		resultX result.Q $const1 	%filename{"PxrManifold3D.osl"} %line{410} %argrw{"wrr"}
# PxrManifold3D.osl:411
#     resultY = result.Q[1];
	compref		resultY result.Q $const2 	%line{411} %argrw{"wrr"}
# PxrManifold3D.osl:412
#     resultZ = result.Q[2];
	compref		resultZ result.Q $const5 	%line{412} %argrw{"wrr"}
	end
