OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.@PROJECT_VERSION_TWEAK@"dev"
# options: -DOSX -I/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/common -I/Users/Shared/build/ratbuild/rmanshare/RIS/pattern/osl -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl -o /Users/Shared/build/ratbuild/rmanshare/_built/osxSonoma_x86-64_clang15_external_release/osl/PxrCurvature.osl/obj/PxrCurvature.oso
shader PxrCurvature	%meta{int,rfm_nodeid,1200439} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/geometry"} %meta{string,rfh_classification,"Pattern/Geometry"} 
param	int	numSamples	4		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{int,page_open,1} %meta{string,help,"Controls the number of curvature samples per camera hit point. The default is 4.<br><br>numSamples (int)"} %meta{int,connectable,0} %meta{string,label,"Num Samples"} %meta{int,min,1} %meta{int,slider,1} %meta{int,slidermax,64} %meta{int,slidermin,4}  %read{2,65} %write{2147483647,-1} %derivs
param	float	maxDistance	0.100000001		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{string,help,"The max distance at which surfaces are detected for curvature comparison. 0 is infinite.<br><br>maxDistance (float)"} %meta{int,connectable,0} %meta{string,label,"Max Distance"} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,100}  %read{37,162} %write{2147483647,-1}
param	float	minDistance	0		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{string,help,"The min distance at which objects are detected for curvature calculation. The default of 0.0 means a value will be automatically computed.<br><br>minDistance (float)"} %meta{int,connectable,0} %meta{string,label,"Min Distance"} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,1}  %read{115,117} %write{2147483647,-1}
param	string	traceSet	""		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{string,help,"Restrict ray tracing to a subset of objects defined by one or<br>more trace groups.<br><br>traceSet (string)"} %meta{int,connectable,0} %meta{string,label,"Trace Set"}  %read{146,146} %write{2147483647,-1}
param	int	distribution	0		%meta{string,widget,"mapper"} %meta{string,page,"Sampling"} %meta{string,help,"Sample distribution can be uniform or cosine. The default is uniform.<br><br>distribution (int)"} %meta{string,options,"Uniform:0|Cosine:1"} %meta{int,connectable,0} %meta{string,label,"Sample Distribution"}  %read{69,69} %write{2147483647,-1}
param	float	cosineSpread	1		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{string,help,"Sample spread of rays for cosine distribution. The default of 1<br>gives lambertian distribution.<br><br>cosineSpread (float)"} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"../distribution"} %meta{string,conditionalVisValue,"1"} %meta{int,connectable,0} %meta{string,label,"Cosine Spread"} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,1.5} %meta{float,slidermin,0.5}  %read{80,80} %write{2147483647,-1} %derivs
param	float	bias	0.5		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{string,help,"Bias the linear contribution of closer curvature samples.<br>The default is 0.5.<br><br>bias (float)"} %meta{int,connectable,0} %meta{string,label,"Bias"} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,1}  %read{155,164} %write{2147483647,-1}
param	float	jitter	0		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{string,help,"Jitter the ray origins around the shading point P by this (small) amount. For baking of curvature values on objects with sharp edges.<br>The default is 0.0.<br><br>jitter (float)"} %meta{int,connectable,0} %meta{string,label,"Jitter"} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,1}  %read{128,144} %write{2147483647,-1} %derivs
param	float	convexThreshold	0		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{string,help,"Only consider curvature over that threshold.<br>This is useful to clean up flatter areas.<br><br>convexThreshold (float)"} %meta{int,connectable,0} %meta{string,label,"Convex Threshold"} %meta{float,max,1} %meta{float,min,0} %meta{int,slider,1}  %read{178,178} %write{2147483647,-1}
param	float	concaveThreshold	0		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{string,help,"Only consider curvature over that threshold.<br>This is useful to clean up flatter areas.<br><br>concaveThreshold (float)"} %meta{int,connectable,0} %meta{string,label,"Concave Threshold"} %meta{float,max,1} %meta{float,min,0} %meta{int,slider,1}  %read{173,173} %write{2147483647,-1}
param	float	outputGain	1		%meta{string,widget,"default"} %meta{string,page,"Output"} %meta{int,page_open,1} %meta{string,help,"Scale the output values.<br><br>outputGain (float)"} %meta{int,connectable,0} %meta{string,label,"Output Gain"} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,2}  %read{190,192} %write{2147483647,-1}
param	int	outputType	2		%meta{string,widget,"mapper"} %meta{string,page,"Output"} %meta{string,help,"The type of curvature to output.<br><br>outputType (int)"} %meta{string,options,"Concave:0|Convex:1|Both:2"} %meta{int,connectable,0} %meta{string,label,"Output Type"}  %read{0,208} %write{2147483647,-1}
param	int	monochrome	1		%meta{string,widget,"checkBox"} %meta{string,page,"Output"} %meta{string,help,"Output the result as a monochromatic color.<br><br>monochrome (int)"} %meta{int,connectable,0} %meta{string,label,"Monochrome Output"}  %read{205,213} %write{2147483647,-1}
param	int	clampOutput	1		%meta{string,widget,"checkBox"} %meta{string,page,"Output"} %meta{string,help,"Keep the output values between 0 and 1.<br><br>clampOutput (int)"} %meta{int,connectable,0} %meta{string,label,"Clamp Output"}  %read{193,193} %write{2147483647,-1}
oparam	color	resultRGB	0 0 0		%meta{string,help,"resultRGB (color)"}  %read{216,218} %write{206,215}
oparam	float	resultR	0		%meta{string,help,"resultR (float)"}  %read{2147483647,-1} %write{216,216}
oparam	float	resultG	0		%meta{string,help,"resultG (float)"}  %read{2147483647,-1} %write{217,217}
oparam	float	resultB	0		%meta{string,help,"resultB (float)"}  %read{2147483647,-1} %write{218,218}
oparam	float	resultF	0		%meta{string,help,"resultF (float)"}  %read{2147483647,-1} %write{219,219}
oparam	float	resultConvex	0		%meta{string,help,"resultConvex (float)"}  %read{2147483647,-1} %write{220,220}
oparam	float	resultConcave	0		%meta{string,help,"resultConcave (float)"}  %read{2147483647,-1} %write{221,221}
global	point	P	%read{127,132} %write{2147483647,-1} %derivs
global	normal	N	%read{5,169} %write{2147483647,-1} %derivs
global	normal	Ng	%read{121,121} %write{2147483647,-1}
global	vector	dPdu	%read{130,138} %write{2147483647,-1} %derivs
global	vector	dPdv	%read{131,141} %write{2147483647,-1} %derivs
local	int	___293_combined	%read{49,184} %write{49,184} %derivs
local	point	___293_xi	%read{49,184} %write{49,184} %derivs
local	int	___293_ok	%read{2147483647,-1} %write{49,184}
local	float	___345_fsign	%read{11,34} %write{8,9} %derivs
local	float	___345_a	%read{16,29} %write{12,12} %derivs
local	float	___346_e1	%read{49,184} %write{49,184} %derivs
local	float	___346_z	%read{49,184} %write{49,184} %derivs
local	float	___346_r	%read{49,184} %write{49,184} %derivs
local	vector	___346_outDir	%read{49,184} %write{49,184} %derivs
local	float	___347_e1	%read{49,184} %write{49,184} %derivs
local	float	___347_z	%read{49,184} %write{49,184} %derivs
local	float	___347_r	%read{49,184} %write{49,184} %derivs
local	float	___347_x	%read{49,184} %write{49,184} %derivs
local	float	___347_y	%read{49,184} %write{49,184} %derivs
local	vector	___347_outDir	%read{49,184} %write{49,184} %derivs
local	float	___351_biasR	%read{49,184} %write{49,184}
local	float	___351_biasT	%read{49,184} %write{49,184}
local	int	totalSamples	%read{49,187} %write{2,3} %derivs
local	vector	t0	%read{49,184} %write{36,36} %derivs
local	vector	t1	%read{31,184} %write{24,24} %derivs
local	float	maxdist	%read{49,184} %write{39,40}
local	vector	dir	%read{49,184} %write{49,184} %derivs
local	float	concave	%read{49,221} %write{41,199}
local	float	convex	%read{49,220} %write{42,196}
local	float	dotAccum	%read{2147483647,-1} %write{43,43}
local	float	perPointBias	%read{49,184} %write{44,184}
local	float	n0	%read{2147483647,-1} %write{45,45}
local	float	n1	%read{2147483647,-1} %write{46,46}
local	int	___352_i	%read{49,184} %write{48,184} %derivs
local	int	___353_seed	%read{49,184} %write{49,184} %derivs
local	point	___353_xi	%read{49,184} %write{49,184} %derivs
local	normal	___353_Nn	%read{49,184} %write{49,184} %derivs
local	float	___353_mindist	%read{49,184} %write{49,184}
local	point	___353_org	%read{49,184} %write{49,184} %derivs
local	float	___354_dPduLen	%read{49,184} %write{49,184} %derivs
local	float	___354_dPdvLen	%read{49,184} %write{49,184} %derivs
local	point	___354_rnd	%read{49,184} %write{49,184} %derivs
local	int	___353_hit	%read{49,184} %write{49,184}
local	float	___355_hitdist	%read{49,184} %write{49,184}
local	normal	___355_hitNg	%read{49,184} %write{49,184}
local	float	___355_rayDotN	%read{49,184} %write{49,184}
local	float	___355_NgDotNn	%read{49,184} %write{49,184}
local	float	both	%read{192,219} %write{189,202}
const	int	$const1	2		%read{0,218} %write{2147483647,-1}
temp	int	$tmp1	%read{1,1} %write{0,0}
const	string	$const2	"CreateOrthonormalBasis"		%read{4,4} %write{2147483647,-1}
temp	float	$tmp2	%read{6,6} %write{5,5}
const	float	$const3	0		%read{6,215} %write{2147483647,-1}
temp	int	$tmp3	%read{7,7} %write{6,6}
const	float	$const4	1		%read{8,201} %write{2147483647,-1}
const	float	$const5	-1		%read{9,12} %write{2147483647,-1}
temp	float	$tmp4	%read{11,11} %write{10,10} %derivs
temp	float	$tmp5	%read{12,12} %write{11,11} %derivs
const	int	$const6	0		%read{13,216} %write{2147483647,-1}
temp	float	$tmp6	%read{15,15} %write{13,13} %derivs
const	int	$const7	1		%read{14,217} %write{2147483647,-1}
temp	float	$tmp7	%read{15,15} %write{14,14} %derivs
temp	float	$tmp8	%read{16,16} %write{15,15} %derivs
temp	float	$tmp9	%read{24,24} %write{16,16} %derivs
temp	float	$tmp10	%read{19,19} %write{17,17} %derivs
temp	float	$tmp11	%read{19,19} %write{18,18} %derivs
temp	float	$tmp12	%read{20,20} %write{19,19} %derivs
temp	float	$tmp13	%read{21,21} %write{20,20} %derivs
temp	float	$tmp14	%read{24,24} %write{21,21} %derivs
temp	float	$tmp15	%read{23,23} %write{22,22} %derivs
temp	float	$tmp16	%read{24,24} %write{23,23} %derivs
temp	float	$tmp17	%read{26,26} %write{25,25} %derivs
temp	float	$tmp18	%read{28,28} %write{26,26} %derivs
temp	float	$tmp19	%read{28,28} %write{27,27} %derivs
temp	float	$tmp20	%read{29,29} %write{28,28} %derivs
temp	float	$tmp21	%read{30,30} %write{29,29} %derivs
temp	float	$tmp22	%read{36,36} %write{30,30} %derivs
temp	float	$tmp23	%read{32,32} %write{31,31} %derivs
temp	float	$tmp24	%read{36,36} %write{32,32} %derivs
temp	float	$tmp25	%read{34,34} %write{33,33} %derivs
temp	float	$tmp26	%read{35,35} %write{34,34} %derivs
temp	float	$tmp27	%read{36,36} %write{35,35} %derivs
temp	int	$tmp28	%read{38,38} %write{37,37}
const	float	$const8	9.99999968e+37		%read{40,40} %write{2147483647,-1}
temp	int	$tmp29	%read{49,184} %write{49,184}
temp	int	$tmp30	%read{47,184} %write{48,184}
const	string	$const9	"stratified"		%read{57,57} %write{2147483647,-1}
const	string	$const10	"random"		%read{52,52} %write{2147483647,-1}
const	int	$const11	16777216		%read{53,53} %write{2147483647,-1}
temp	int	$tmp31	%read{49,184} %write{49,184} %derivs
const	int	$const12	4096		%read{54,54} %write{2147483647,-1}
temp	int	$tmp32	%read{49,184} %write{49,184} %derivs
temp	int	$tmp33	%read{49,184} %write{49,184} %derivs
const	string	$const13	"RNG"		%read{57,57} %write{2147483647,-1}
temp	int	$tmp34	%read{49,184} %write{49,184}
temp	int	$tmp35	%read{49,184} %write{49,184}
temp	int	$tmp36	%read{49,184} %write{49,184}
temp	int	$tmp37	%read{49,184} %write{49,184}
const	string	$const14	"distributionCosine"		%read{71,71} %write{2147483647,-1}
temp	float	$tmp38	%read{49,184} %write{49,184} %derivs
const	float	$const15	6.28318548		%read{73,96} %write{2147483647,-1}
temp	float	$tmp39	%read{49,184} %write{49,184} %derivs
temp	float	$tmp40	%read{49,184} %write{49,184} %derivs
temp	float	$tmp41	%read{49,184} %write{49,184} %derivs
temp	float	$tmp42	%read{49,184} %write{49,184} %derivs
temp	float	$tmp43	%read{49,184} %write{49,184} %derivs
const	float	$const16	9.99999996e-13		%read{81,108} %write{2147483647,-1}
temp	int	$tmp44	%read{49,184} %write{49,184}
temp	float	$tmp45	%read{49,184} %write{49,184} %derivs
temp	float	$tmp46	%read{49,184} %write{49,184} %derivs
temp	vector	$tmp47	%read{49,184} %write{49,184} %derivs
temp	float	$tmp48	%read{49,184} %write{49,184} %derivs
temp	float	$tmp49	%read{49,184} %write{49,184} %derivs
temp	vector	$tmp50	%read{49,184} %write{49,184} %derivs
temp	vector	$tmp51	%read{49,184} %write{49,184} %derivs
temp	vector	$tmp52	%read{49,184} %write{49,184} %derivs
const	string	$const17	"distributionUniform"		%read{94,94} %write{2147483647,-1}
temp	float	$tmp53	%read{49,184} %write{49,184} %derivs
temp	float	$tmp54	%read{49,184} %write{49,184} %derivs
temp	float	$tmp55	%read{49,184} %write{49,184} %derivs
temp	float	$tmp56	%read{49,184} %write{49,184} %derivs
temp	float	$tmp57	%read{49,184} %write{49,184} %derivs
temp	float	$tmp58	%read{49,184} %write{49,184} %derivs
temp	int	$tmp59	%read{49,184} %write{49,184}
temp	vector	$tmp60	%read{49,184} %write{49,184} %derivs
temp	vector	$tmp61	%read{49,184} %write{49,184} %derivs
temp	vector	$tmp62	%read{49,184} %write{49,184} %derivs
temp	vector	$tmp63	%read{49,184} %write{49,184} %derivs
temp	int	$tmp64	%read{49,184} %write{49,184}
const	string	$const18	"autoBias"		%read{118,118} %write{2147483647,-1}
temp	int	$tmp65	%read{2147483647,-1} %write{49,184}
const	string	$const19	"builtin"		%read{119,120} %write{2147483647,-1}
const	string	$const20	"biasR"		%read{119,119} %write{2147483647,-1}
temp	int	$tmp66	%read{2147483647,-1} %write{49,184}
const	string	$const21	"biasT"		%read{120,120} %write{2147483647,-1}
temp	float	$tmp67	%read{49,184} %write{49,184}
temp	int	$tmp68	%read{49,184} %write{49,184}
temp	int	$tmp69	%read{49,184} %write{49,184}
temp	point	$tmp70	%read{49,184} %write{49,184} %derivs
const	float	$const22	3000000		%read{133,133} %write{2147483647,-1}
temp	point	$tmp71	%read{49,184} %write{49,184} %derivs
temp	point	$tmp72	%read{49,184} %write{49,184} %derivs
const	float	$const23	2		%read{135,163} %write{2147483647,-1}
temp	float	$tmp73	%read{49,184} %write{49,184} %derivs
temp	vector	$tmp74	%read{49,184} %write{49,184} %derivs
temp	vector	$tmp75	%read{49,184} %write{49,184} %derivs
temp	float	$tmp76	%read{49,184} %write{49,184} %derivs
temp	vector	$tmp77	%read{49,184} %write{49,184} %derivs
temp	vector	$tmp78	%read{49,184} %write{49,184} %derivs
temp	vector	$tmp79	%read{49,184} %write{49,184} %derivs
temp	vector	$tmp80	%read{49,184} %write{49,184} %derivs
const	string	$const24	"mindist"		%read{146,146} %write{2147483647,-1}
const	string	$const25	"maxdist"		%read{146,146} %write{2147483647,-1}
const	string	$const26	"traceset"		%read{146,146} %write{2147483647,-1}
temp	int	$tmp81	%read{49,184} %write{49,184}
const	string	$const27	"trace"		%read{149,154} %write{2147483647,-1}
const	string	$const28	"hitdist"		%read{149,149} %write{2147483647,-1}
temp	int	$tmp82	%read{49,184} %write{49,184}
const	string	$const29	"Could not get hitdist !"		%read{152,152} %write{2147483647,-1}
temp	int	$tmp83	%read{2147483647,-1} %write{49,184}
const	string	$const30	"Ngn"		%read{154,154} %write{2147483647,-1}
const	float	$const31	0.5		%read{155,155} %write{2147483647,-1}
temp	int	$tmp84	%read{49,184} %write{49,184}
temp	float	$tmp85	%read{49,184} %write{49,184}
temp	float	$tmp86	%read{49,184} %write{49,184}
temp	float	$tmp87	%read{49,184} %write{49,184}
temp	float	$tmp88	%read{49,184} %write{49,184}
temp	float	$tmp89	%read{49,184} %write{49,184}
temp	float	$tmp90	%read{49,184} %write{49,184}
temp	float	$tmp91	%read{49,184} %write{49,184}
temp	float	$tmp92	%read{49,184} %write{49,184}
temp	float	$tmp93	%read{49,184} %write{49,184}
temp	int	$tmp94	%read{49,184} %write{49,184}
temp	int	$tmp95	%read{49,184} %write{49,184}
temp	float	$tmp96	%read{49,184} %write{49,184}
temp	float	$tmp97	%read{49,184} %write{49,184}
temp	int	$tmp98	%read{49,184} %write{49,184}
temp	float	$tmp99	%read{49,184} %write{49,184}
temp	float	$tmp100	%read{49,184} %write{49,184}
temp	int	$tmp101	%read{2147483647,-1} %write{49,184}
temp	float	$tmp102	%read{186,186} %write{185,185}
temp	float	$tmp103	%read{188,188} %write{187,187}
const	string	$const32	"clamp"		%read{194,200} %write{2147483647,-1}
temp	float	$tmp104	%read{196,196} %write{195,195}
temp	float	$tmp105	%read{199,199} %write{198,198}
temp	float	$tmp106	%read{202,202} %write{201,201}
temp	int	$tmp107	%read{204,204} %write{203,203}
temp	int	$tmp108	%read{209,209} %write{208,208}
code ___main___
# PxrCurvature.osl:235
#     int totalSamples = outputType == k_output_both ? 2 * numSamples : numSamples;
	eq		$tmp1 outputType $const1 	%filename{"PxrCurvature.osl"} %line{235} %argrw{"wrr"}
	if		$tmp1 3 4 	%argrw{"r"}
	mul		totalSamples $const1 numSamples 	%argrw{"wrr"}
	assign		totalSamples numSamples 	%argrw{"wr"}
# PxrCurvature.osl:239
#     CreateOrthonormalBasis(N, t0, t1);
	functioncall	$const2 37 	%line{239} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:42
#     float fsign = (n[2] >= 0.0) ? 1.0 : -1.0;
	compref		$tmp2 N $const1 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h"} %line{42} %argrw{"wrr"}
	ge		$tmp3 $tmp2 $const3 	%argrw{"wrr"}
	if		$tmp3 9 10 	%argrw{"r"}
	assign		___345_fsign $const4 	%argrw{"wr"}
	assign		___345_fsign $const5 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:43
#     float a = -1.0 / (fsign + n[2]);
	compref		$tmp4 N $const1 	%line{43} %argrw{"wrr"}
	add		$tmp5 ___345_fsign $tmp4 	%argrw{"wrr"}
	div		___345_a $const5 $tmp5 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:44
#     v2 = vector(n[0]*n[1]*a, fsign + n[1]*n[1]*a, -n[1]);
	compref		$tmp6 N $const6 	%line{44} %argrw{"wrr"}
	compref		$tmp7 N $const7 	%argrw{"wrr"}
	mul		$tmp8 $tmp6 $tmp7 	%argrw{"wrr"}
	mul		$tmp9 $tmp8 ___345_a 	%argrw{"wrr"}
	compref		$tmp10 N $const7 	%argrw{"wrr"}
	compref		$tmp11 N $const7 	%argrw{"wrr"}
	mul		$tmp12 $tmp10 $tmp11 	%argrw{"wrr"}
	mul		$tmp13 $tmp12 ___345_a 	%argrw{"wrr"}
	add		$tmp14 ___345_fsign $tmp13 	%argrw{"wrr"}
	compref		$tmp15 N $const7 	%argrw{"wrr"}
	neg		$tmp16 $tmp15 	%argrw{"wr"}
	vector		t1 $tmp9 $tmp14 $tmp16 	%argrw{"wrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:45
#     v1 = vector(1.0 + fsign*n[0]*n[0]*a, fsign*v2[0], -(fsign*n[0]));
	compref		$tmp17 N $const6 	%line{45} %argrw{"wrr"}
	mul		$tmp18 ___345_fsign $tmp17 	%argrw{"wrr"}
	compref		$tmp19 N $const6 	%argrw{"wrr"}
	mul		$tmp20 $tmp18 $tmp19 	%argrw{"wrr"}
	mul		$tmp21 $tmp20 ___345_a 	%argrw{"wrr"}
	add		$tmp22 $const4 $tmp21 	%argrw{"wrr"}
	compref		$tmp23 t1 $const6 	%argrw{"wrr"}
	mul		$tmp24 ___345_fsign $tmp23 	%argrw{"wrr"}
	compref		$tmp25 N $const6 	%argrw{"wrr"}
	mul		$tmp26 ___345_fsign $tmp25 	%argrw{"wrr"}
	neg		$tmp27 $tmp26 	%argrw{"wr"}
	vector		t0 $tmp22 $tmp24 $tmp27 	%argrw{"wrrr"}
# PxrCurvature.osl:240
#     float maxdist = maxDistance > 0 ? maxDistance : MAXDIST;
	gt		$tmp28 maxDistance $const6 	%filename{"PxrCurvature.osl"} %line{240} %argrw{"wrr"}
	if		$tmp28 40 41 	%argrw{"r"}
	assign		maxdist maxDistance 	%argrw{"wr"}
	assign		maxdist $const8 	%argrw{"wr"}
# PxrCurvature.osl:244
#     float concave = 0, convex = 0, dotAccum = 0, perPointBias = 0;
	assign		concave $const6 	%line{244} %argrw{"wr"}
	assign		convex $const6 	%argrw{"wr"}
	assign		dotAccum $const6 	%argrw{"wr"}
	assign		perPointBias $const6 	%argrw{"wr"}
# PxrCurvature.osl:245
#     float n0 = 0, n1 = 0;
	assign		n0 $const6 	%line{245} %argrw{"wr"}
	assign		n1 $const6 	%argrw{"wr"}
# PxrCurvature.osl:246
#     for (int i = 0; i < totalSamples; i++)
	for		$tmp30 49 51 183 185 	%line{246} %argrw{"r"}
	assign		___352_i $const6 	%argrw{"wr"}
	lt		$tmp29 ___352_i totalSamples 	%argrw{"wrr"}
	neq		$tmp30 $tmp29 $const6 	%argrw{"wrr"}
# PxrCurvature.osl:249
#         int seed = 0;  // temporary limitation: seed = 0--127
	assign		___353_seed $const6 	%line{249} %argrw{"wr"}
# PxrCurvature.osl:250
#         point xi = random("stratified", seed, i, totalSamples);  // xi.z is ignored below
	functioncall	$const10 59 	%line{250} %argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:431
#   int combined = 4096*4096*seed + 4096*N + index;
	mul		$tmp31 $const11 ___353_seed 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{431} %argrw{"wrr"}
	mul		$tmp32 $const12 totalSamples 	%argrw{"wrr"}
	add		$tmp33 $tmp31 $tmp32 	%argrw{"wrr"}
	add		___293_combined $tmp33 ___352_i 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:435
#   int ok = getattribute("RNG", type, combined, xi);
	getattribute	___293_ok $const13 $const9 ___293_combined ___293_xi 	%line{435} %argrw{"wrrrw"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:436
#   return xi;
	assign		___353_xi ___293_xi 	%line{436} %argrw{"wr"}
# PxrCurvature.osl:253
#         normal Nn = outputType == k_output_convex ? -N :
	eq		$tmp34 outputType $const7 	%filename{"PxrCurvature.osl"} %line{253} %argrw{"wrr"}
	if		$tmp34 62 69 	%argrw{"r"}
	neg		___353_Nn N 	%argrw{"wr"}
# PxrCurvature.osl:254
#                     outputType == k_output_concave ? N :
	eq		$tmp35 outputType $const6 	%line{254} %argrw{"wrr"}
	if		$tmp35 65 69 	%argrw{"r"}
	assign		___353_Nn N 	%argrw{"wr"}
# PxrCurvature.osl:255
#                     i >= numSamples ? -N : N;
	ge		$tmp36 ___352_i numSamples 	%line{255} %argrw{"wrr"}
	if		$tmp36 68 69 	%argrw{"r"}
	neg		___353_Nn N 	%argrw{"wr"}
	assign		___353_Nn N 	%argrw{"wr"}
# PxrCurvature.osl:258
#         if (distribution == k_dist_cosine)
	eq		$tmp37 distribution $const7 	%line{258} %argrw{"wrr"}
	if		$tmp37 94 115 	%argrw{"r"}
# PxrCurvature.osl:259
#             dir = distributionCosine(xi, Nn, t0, t1, cosineSpread);
	functioncall	$const14 94 	%line{259} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:51
#     float e1 = xi[0] * M_2PI;
	compref		$tmp38 ___353_xi $const6 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h"} %line{51} %argrw{"wrr"}
	mul		___346_e1 $tmp38 $const15 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:52
#     float z = sqrt(xi[1]);
	compref		$tmp39 ___353_xi $const7 	%line{52} %argrw{"wrr"}
	sqrt		___346_z $tmp39 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:53
#     float r = spread * sqrt(max(0.0, 1.0 - xi[1]));
	compref		$tmp42 ___353_xi $const7 	%line{53} %argrw{"wrr"}
	sub		$tmp43 $const4 $tmp42 	%argrw{"wrr"}
	max		$tmp41 $const3 $tmp43 	%argrw{"wrr"}
	sqrt		$tmp40 $tmp41 	%argrw{"wr"}
	mul		___346_r cosineSpread $tmp40 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:54
#     if (z < 1.e-12) z = 1.e-12;
	lt		$tmp44 ___346_z $const16 	%line{54} %argrw{"wrr"}
	if		$tmp44 84 84 	%argrw{"r"}
	assign		___346_z $const16 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:55
#     vector outDir = r * cos(e1) * t0 + r * sin(e1) * t1 + z * n;
	cos		$tmp45 ___346_e1 	%line{55} %argrw{"wr"}
	mul		$tmp46 ___346_r $tmp45 	%argrw{"wrr"}
	mul		$tmp47 $tmp46 t0 	%argrw{"wrr"}
	sin		$tmp48 ___346_e1 	%argrw{"wr"}
	mul		$tmp49 ___346_r $tmp48 	%argrw{"wrr"}
	mul		$tmp50 $tmp49 t1 	%argrw{"wrr"}
	add		$tmp51 $tmp47 $tmp50 	%argrw{"wrr"}
	mul		$tmp52 ___346_z ___353_Nn 	%argrw{"wrr"}
	add		___346_outDir $tmp51 $tmp52 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:56
#     return normalize(outDir);
	normalize	dir ___346_outDir 	%line{56} %argrw{"wr"}
# PxrCurvature.osl:261
#             dir = distributionUniform(xi, Nn, t0, t1);
	functioncall	$const17 115 	%filename{"PxrCurvature.osl"} %line{261} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:62
#     float e1 = xi[0] * M_2PI;
	compref		$tmp53 ___353_xi $const6 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h"} %line{62} %argrw{"wrr"}
	mul		___347_e1 $tmp53 $const15 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:63
#     float z = xi[1];
	compref		___347_z ___353_xi $const7 	%line{63} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:64
#     float r = sqrt(max(0.0, 1.0 - z * z));
	mul		$tmp55 ___347_z ___347_z 	%line{64} %argrw{"wrr"}
	sub		$tmp56 $const4 $tmp55 	%argrw{"wrr"}
	max		$tmp54 $const3 $tmp56 	%argrw{"wrr"}
	sqrt		___347_r $tmp54 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:65
#     float x = r * cos(e1);
	cos		$tmp57 ___347_e1 	%line{65} %argrw{"wr"}
	mul		___347_x ___347_r $tmp57 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:66
#     float y = r * sin(e1);
	sin		$tmp58 ___347_e1 	%line{66} %argrw{"wr"}
	mul		___347_y ___347_r $tmp58 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:67
#     if (z < 1.e-12) z = 1.e-12;
	lt		$tmp59 ___347_z $const16 	%line{67} %argrw{"wrr"}
	if		$tmp59 109 109 	%argrw{"r"}
	assign		___347_z $const16 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:68
#     vector outDir = x * t0 + y * t1 + z * n;
	mul		$tmp60 ___347_x t0 	%line{68} %argrw{"wrr"}
	mul		$tmp61 ___347_y t1 	%argrw{"wrr"}
	add		$tmp62 $tmp60 $tmp61 	%argrw{"wrr"}
	mul		$tmp63 ___347_z ___353_Nn 	%argrw{"wrr"}
	add		___347_outDir $tmp62 $tmp63 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:69
#     return outDir;
	assign		dir ___347_outDir 	%line{69} %argrw{"wr"}
# PxrCurvature.osl:263
#         float mindist = minDistance > 0.0 ? minDistance : autoBias(Ng, dir);
	gt		$tmp64 minDistance $const3 	%filename{"PxrCurvature.osl"} %line{263} %argrw{"wrr"}
	if		$tmp64 118 127 	%argrw{"r"}
	assign		___353_mindist minDistance 	%argrw{"wr"}
	functioncall	$const18 127 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:98
#     getattribute("builtin", "biasR", biasR);
	getattribute	$tmp65 $const19 $const20 ___351_biasR 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h"} %line{98} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:99
#     getattribute("builtin", "biasT", biasT);
	getattribute	$tmp66 $const19 $const21 ___351_biasT 	%line{99} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:100
#     return dot(n, dir) < 0.0 ? biasT : biasR;
	dot		$tmp67 Ng dir 	%line{100} %argrw{"wrr"}
	lt		$tmp68 $tmp67 $const3 	%argrw{"wrr"}
	if		$tmp68 125 126 	%argrw{"r"}
	assign		___353_mindist ___351_biasT 	%argrw{"wr"}
	assign		___353_mindist ___351_biasR 	%argrw{"wr"}
	return
# PxrCurvature.osl:265
#         point org = P;
	assign		___353_org P 	%filename{"PxrCurvature.osl"} %line{265} %argrw{"wr"}
# PxrCurvature.osl:268
#         if (jitter > 0.0)
	gt		$tmp69 jitter $const3 	%line{268} %argrw{"wrr"}
	if		$tmp69 146 146 	%argrw{"r"}
# PxrCurvature.osl:270
#             float dPduLen = length(dPdu);
	length		___354_dPduLen dPdu 	%line{270} %argrw{"wr"}
# PxrCurvature.osl:271
#             float dPdvLen = length(dPdv);
	length		___354_dPdvLen dPdv 	%line{271} %argrw{"wr"}
# PxrCurvature.osl:272
#             point rnd = cellnoise((P + dir) * 3.0e6);  // used as a repeatable pos-dependent 2D "random" number
	add		$tmp70 P dir 	%line{272} %argrw{"wrr"}
	mul		$tmp71 $tmp70 $const22 	%argrw{"wrr"}
	cellnoise	___354_rnd $tmp71 	%argrw{"wr"}
# PxrCurvature.osl:273
#             rnd = 2 * rnd - 1;
	mul		$tmp72 $const23 ___354_rnd 	%line{273} %argrw{"wrr"}
	sub		___354_rnd $tmp72 $const4 	%argrw{"wrr"}
# PxrCurvature.osl:274
#             org += jitter * (rnd.x * dPdu / dPduLen + rnd.y * dPdv / dPdvLen);
	compref		$tmp73 ___354_rnd $const6 	%line{274} %argrw{"wrr"}
	mul		$tmp74 $tmp73 dPdu 	%argrw{"wrr"}
	div		$tmp75 $tmp74 ___354_dPduLen 	%argrw{"wrr"}
	compref		$tmp76 ___354_rnd $const7 	%argrw{"wrr"}
	mul		$tmp77 $tmp76 dPdv 	%argrw{"wrr"}
	div		$tmp78 $tmp77 ___354_dPdvLen 	%argrw{"wrr"}
	add		$tmp79 $tmp75 $tmp78 	%argrw{"wrr"}
	mul		$tmp80 jitter $tmp79 	%argrw{"wrr"}
	add		___353_org ___353_org $tmp80 	%argrw{"wrr"}
# PxrCurvature.osl:278
#         int hit = trace(org, dir,
	trace		___353_hit ___353_org dir $const24 ___353_mindist $const25 maxdist $const26 traceSet 	%line{278} %argrw{"wrrrrrrrr"} %argderivs{1,2}
# PxrCurvature.osl:284
#         if (hit)
	if		___353_hit 183 183 	%line{284} %argrw{"r"}
# PxrCurvature.osl:286
#             float hitdist = 0.0;
	assign		___355_hitdist $const3 	%line{286} %argrw{"wr"}
# PxrCurvature.osl:287
#             if (!getmessage("trace", "hitdist", hitdist))
	getmessage	$tmp81 $const27 $const28 ___355_hitdist 	%line{287} %argrw{"wrrw"}
	eq		$tmp82 $tmp81 $const6 	%argrw{"wrr"}
	if		$tmp82 153 153 	%argrw{"r"}
# PxrCurvature.osl:288
#                 warning("Could not get hitdist !");
	warning		$const29 	%line{288} %argrw{"r"}
# PxrCurvature.osl:292
#             normal hitNg = 0;
	assign		___355_hitNg $const6 	%line{292} %argrw{"wr"}
# PxrCurvature.osl:293
#             getmessage("trace", "Ngn", hitNg);
	getmessage	$tmp83 $const27 $const30 ___355_hitNg 	%line{293} %argrw{"wrrw"}
# PxrCurvature.osl:295
#             if (bias < 0.5)
	lt		$tmp84 bias $const31 	%line{295} %argrw{"wrr"}
	if		$tmp84 162 167 	%argrw{"r"}
# PxrCurvature.osl:297
#                 perPointBias = 1.0 - ((hitdist / maxDistance) *
	div		$tmp85 ___355_hitdist maxDistance 	%line{297} %argrw{"wrr"}
# PxrCurvature.osl:298
#                                         (1.0 / (2.0 * bias)));
	mul		$tmp86 $const23 bias 	%line{298} %argrw{"wrr"}
	div		$tmp87 $const4 $tmp86 	%argrw{"wrr"}
# PxrCurvature.osl:297
#                 perPointBias = 1.0 - ((hitdist / maxDistance) *
	mul		$tmp88 $tmp85 $tmp87 	%line{297} %argrw{"wrr"}
	sub		perPointBias $const4 $tmp88 	%argrw{"wrr"}
# PxrCurvature.osl:302
#                 perPointBias = (2.0 * (hitdist / maxDistance) *
	div		$tmp89 ___355_hitdist maxDistance 	%line{302} %argrw{"wrr"}
	mul		$tmp90 $const23 $tmp89 	%argrw{"wrr"}
# PxrCurvature.osl:303
#                                 (bias - 1.0)) +
	sub		$tmp91 bias $const4 	%line{303} %argrw{"wrr"}
# PxrCurvature.osl:302
#                 perPointBias = (2.0 * (hitdist / maxDistance) *
	mul		$tmp92 $tmp90 $tmp91 	%line{302} %argrw{"wrr"}
# PxrCurvature.osl:303
#                                 (bias - 1.0)) +
	add		perPointBias $tmp92 $const4 	%line{303} %argrw{"wrr"}
# PxrCurvature.osl:306
#             perPointBias = max(perPointBias, 0.0);
	max		perPointBias perPointBias $const3 	%line{306} %argrw{"wrr"}
# PxrCurvature.osl:308
#             float rayDotN = dot(dir, N);
	dot		___355_rayDotN dir N 	%line{308} %argrw{"wrr"}
# PxrCurvature.osl:309
#             float NgDotNn = abs(dot(hitNg, N));
	dot		$tmp93 ___355_hitNg N 	%line{309} %argrw{"wrr"}
	abs		___355_NgDotNn $tmp93 	%argrw{"wr"}
# PxrCurvature.osl:312
#             if (rayDotN >= 0)
	ge		$tmp94 ___355_rayDotN $const6 	%line{312} %argrw{"wrr"}
	if		$tmp94 178 183 	%argrw{"r"}
# PxrCurvature.osl:314
#                 if (NgDotNn >= concaveThreshold)
	ge		$tmp95 ___355_NgDotNn concaveThreshold 	%line{314} %argrw{"wrr"}
	if		$tmp95 178 178 	%argrw{"r"}
# PxrCurvature.osl:315
#                     concave += (1.0 - NgDotNn) * perPointBias;
	sub		$tmp96 $const4 ___355_NgDotNn 	%line{315} %argrw{"wrr"}
	mul		$tmp97 $tmp96 perPointBias 	%argrw{"wrr"}
	add		concave concave $tmp97 	%argrw{"wrr"}
# PxrCurvature.osl:319
#                 if (NgDotNn >= convexThreshold)
	ge		$tmp98 ___355_NgDotNn convexThreshold 	%line{319} %argrw{"wrr"}
	if		$tmp98 183 183 	%argrw{"r"}
# PxrCurvature.osl:320
#                     convex += (1.0 - NgDotNn) * perPointBias;
	sub		$tmp99 $const4 ___355_NgDotNn 	%line{320} %argrw{"wrr"}
	mul		$tmp100 $tmp99 perPointBias 	%argrw{"wrr"}
	add		convex convex $tmp100 	%argrw{"wrr"}
# PxrCurvature.osl:246
#     for (int i = 0; i < totalSamples; i++)
	assign		$tmp101 ___352_i 	%line{246} %argrw{"wr"}
	add		___352_i ___352_i $const7 	%argrw{"wrr"}
# PxrCurvature.osl:326
#     concave /= totalSamples;
	assign		$tmp102 totalSamples 	%line{326} %argrw{"wr"}
	div		concave concave $tmp102 	%argrw{"wrr"}
# PxrCurvature.osl:327
#     convex /= totalSamples;
	assign		$tmp103 totalSamples 	%line{327} %argrw{"wr"}
	div		convex convex $tmp103 	%argrw{"wrr"}
# PxrCurvature.osl:328
#     float both = convex + concave;
	add		both convex concave 	%line{328} %argrw{"wrr"}
# PxrCurvature.osl:331
#     convex *= outputGain;
	mul		convex convex outputGain 	%line{331} %argrw{"wrr"}
# PxrCurvature.osl:332
#     concave *= outputGain;
	mul		concave concave outputGain 	%line{332} %argrw{"wrr"}
# PxrCurvature.osl:333
#     both *= outputGain;
	mul		both both outputGain 	%line{333} %argrw{"wrr"}
# PxrCurvature.osl:336
#     if (clampOutput)
	if		clampOutput 203 203 	%line{336} %argrw{"r"}
# PxrCurvature.osl:338
#         convex = clamp(convex, 0.0, 1.0);
	functioncall	$const32 197 	%line{338} %argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp104 convex $const4 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		convex $tmp104 $const3 	%argrw{"wrr"}
# PxrCurvature.osl:339
#         concave = clamp(concave, 0.0, 1.0);
	functioncall	$const32 200 	%filename{"PxrCurvature.osl"} %line{339} %argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp105 concave $const4 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		concave $tmp105 $const3 	%argrw{"wrr"}
# PxrCurvature.osl:340
#         both = clamp(both, 0.0, 1.0);
	functioncall	$const32 203 	%filename{"PxrCurvature.osl"} %line{340} %argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp106 both $const4 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		both $tmp106 $const3 	%argrw{"wrr"}
# PxrCurvature.osl:343
#     if (outputType == k_output_convex)
	eq		$tmp107 outputType $const7 	%filename{"PxrCurvature.osl"} %line{343} %argrw{"wrr"}
	if		$tmp107 208 216 	%argrw{"r"}
# PxrCurvature.osl:345
#         if (monochrome) resultRGB = color(both);
	if		monochrome 207 208 	%line{345} %argrw{"r"}
	assign		resultRGB both 	%argrw{"wr"}
# PxrCurvature.osl:346
#         else resultRGB = color(both, 0, 0);
	color		resultRGB both $const3 $const3 	%line{346} %argrw{"wrrr"}
# PxrCurvature.osl:348
#     else if (outputType == k_output_concave)
	eq		$tmp108 outputType $const6 	%line{348} %argrw{"wrr"}
	if		$tmp108 213 216 	%argrw{"r"}
# PxrCurvature.osl:350
#         if (monochrome) resultRGB = color(both);
	if		monochrome 212 213 	%line{350} %argrw{"r"}
	assign		resultRGB both 	%argrw{"wr"}
# PxrCurvature.osl:351
#         else resultRGB = color(0, both, 0);
	color		resultRGB $const3 both $const3 	%line{351} %argrw{"wrrr"}
# PxrCurvature.osl:355
#         if (monochrome) resultRGB = color(both);
	if		monochrome 215 216 	%line{355} %argrw{"r"}
	assign		resultRGB both 	%argrw{"wr"}
# PxrCurvature.osl:356
#         else resultRGB = color(convex, concave, 0);
	color		resultRGB convex concave $const3 	%line{356} %argrw{"wrrr"}
# PxrCurvature.osl:360
#     resultR = resultRGB[0];
	compref		resultR resultRGB $const6 	%line{360} %argrw{"wrr"}
# PxrCurvature.osl:361
#     resultG = resultRGB[1];
	compref		resultG resultRGB $const7 	%line{361} %argrw{"wrr"}
# PxrCurvature.osl:362
#     resultB = resultRGB[2];
	compref		resultB resultRGB $const1 	%line{362} %argrw{"wrr"}
# PxrCurvature.osl:363
#     resultF = both;
	assign		resultF both 	%line{363} %argrw{"wr"}
# PxrCurvature.osl:364
#     resultConvex = convex;
	assign		resultConvex convex 	%line{364} %argrw{"wr"}
# PxrCurvature.osl:365
#     resultConcave = concave;
	assign		resultConcave concave 	%line{365} %argrw{"wr"}
	end
