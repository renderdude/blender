OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.@PROJECT_VERSION_TWEAK@"dev"
# options: -DOSX -I/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/common -I/Users/Shared/build/ratbuild/rmanshare/RIS/pattern/osl -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl -o /Users/Shared/build/ratbuild/rmanshare/_built/osxSonoma_x86-64_clang15_external_release/osl/PxrDirt.osl/obj/PxrDirt.oso
shader PxrDirt	%meta{int,rfm_nodeid,1053280} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/geometry"} %meta{string,rfh_classification,"Pattern/Geometry"} 
param	color	occluded	1 1 1		%meta{string,widget,"color"} %meta{string,page,"Dirt Color"} %meta{int,page_open,1} %meta{string,help,"Occluded shading color. The default is white.<br><br>occluded (color)"} %meta{string,label,"Occluded"}  %read{203,203} %write{2147483647,-1}
param	color	unoccluded	0 0 0		%meta{string,widget,"color"} %meta{string,page,"Dirt Color"} %meta{string,help,"Unoccluded shading color. The default is black.<br><br>unoccluded (color)"} %meta{string,label,"Unoccluded"}  %read{203,203} %write{2147483647,-1}
param	int	numSamples	4		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{int,page_open,1} %meta{string,help,"Controls the number of occlusion samples per camera hit point. The default is 4.<br><br>numSamples (int)"} %meta{int,connectable,0} %meta{string,label,"Num Samples"} %meta{int,min,1} %meta{int,slider,1} %meta{int,slidermax,64} %meta{int,slidermin,4}  %read{2,99} %write{2147483647,-1} %derivs
param	int	distribution	1		%meta{string,widget,"mapper"} %meta{string,page,"Sampling"} %meta{string,help,"Sample distribution can be uniform or cosine. The defaul is cosine.<br><br>distribution (int)"} %meta{string,options,"Uniform:0|Cosine:1"} %meta{int,connectable,0} %meta{string,label,"Sample Distribution"}  %read{103,103} %write{2147483647,-1}
param	float	cosineSpread	1		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{string,help,"Sample spread of rays for cosine distribution. The defaul of 1 gives lambertian distribution.<br><br>cosineSpread (float)"} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"../distribution"} %meta{string,conditionalVisValue,"1"} %meta{int,connectable,0} %meta{string,label,"Cosine Spread"} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,1.5} %meta{float,slidermin,0.5}  %read{114,114} %write{2147483647,-1} %derivs
param	float	falloff	0		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{string,help,"Falloff values greater than zero create a softer look. The default is 0.<br><br>falloff (float)"} %meta{int,connectable,0} %meta{string,label,"Falloff"} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,1}  %read{51,185} %write{2147483647,-1}
param	float	maxDistance	0		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{string,help,"The max distance at which objects may occlude. The default of 0 is infinite.<br><br>maxDistance (float)"} %meta{int,connectable,0} %meta{string,label,"Max Distance"} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,100}  %read{45,49} %write{2147483647,-1}
param	float	minDistance	0		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{string,help,"The min distance at which objects may occlude. The default of 0.0 means a value will be automatically computed.<br><br>minDistance (float)"} %meta{int,connectable,0} %meta{string,label,"Min Distance"} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,1}  %read{151,153} %write{2147483647,-1}
param	int	direction	0		%meta{string,widget,"mapper"} %meta{string,page,"Sampling"} %meta{string,help,"Trace rays in the direction of the surface normal (outside), inverse to the normal (inside), or in both directions. The default is outside.<br><br>direction (int)"} %meta{string,options,"Outside:0|Inside:1|Both:2"} %meta{int,connectable,0} %meta{string,label,"Direction"}  %read{0,96} %write{2147483647,-1}
param	vector	biasDirection	0 0 0		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{string,help,"Add a directional bias to occlusion rays. The default is no bias.<br><br>biasDirection (vector)"} %meta{string,label,"Bias Direction"}  %read{4,4} %write{2147483647,-1} %derivs
param	string	biasDirectionCoordsys	"object"		%meta{string,widget,"string"} %meta{string,houdiniui,"oplist"} %meta{string,page,"Sampling"} %meta{string,help,"Name of bias direction coordinate system transform such as object, world, or camera.<br><br>biasDirectionCoordsys (string)"} %meta{int,connectable,0} %meta{string,label,"Bias Coordinate System"}  %read{7,10} %write{2147483647,-1} %derivs
param	string	traceSet	""		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{string,help,"Restrict ray tracing to a subset of objects defined by one or<br>more trace groups.<br><br>traceSet (string)"} %meta{string,label,"Trace Set"} %meta{int,connectable,0}  %read{182,182} %write{2147483647,-1}
param	float	jitter	0		%meta{string,widget,"default"} %meta{string,page,"Sampling"} %meta{string,help,"Jitter the ray origins around the shading point P by this (small) amount. For baking of dirt values on objects with sharp edges.<br>The default is 0.0.<br><br>jitter (float)"} %meta{int,connectable,0} %meta{string,label,"Jitter"} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,1}  %read{164,180} %write{2147483647,-1} %derivs
oparam	color	resultRGB	0 0 0		%meta{string,help,"resultRGB (color)"}  %read{204,206} %write{203,203}
oparam	float	resultR	0		%meta{string,help,"resultR (float)"}  %read{2147483647,-1} %write{204,204}
oparam	float	resultG	0		%meta{string,help,"resultG (float)"}  %read{2147483647,-1} %write{205,205}
oparam	float	resultB	0		%meta{string,help,"resultB (float)"}  %read{2147483647,-1} %write{206,206}
global	point	P	%read{163,168} %write{2147483647,-1} %derivs
global	normal	N	%read{13,157} %write{2147483647,-1} %derivs
global	vector	dPdu	%read{166,174} %write{2147483647,-1} %derivs
global	vector	dPdv	%read{167,177} %write{2147483647,-1} %derivs
local	int	___293_combined	%read{57,200} %write{57,200} %derivs
local	point	___293_xi	%read{57,200} %write{57,200} %derivs
local	int	___293_ok	%read{2147483647,-1} %write{57,200}
local	float	___345_fsign	%read{19,42} %write{16,17} %derivs
local	float	___345_a	%read{24,37} %write{20,20} %derivs
local	float	___346_e1	%read{57,200} %write{57,200} %derivs
local	float	___346_z	%read{57,200} %write{57,200} %derivs
local	float	___346_r	%read{57,200} %write{57,200} %derivs
local	vector	___346_outDir	%read{57,200} %write{57,200} %derivs
local	float	___347_e1	%read{57,200} %write{57,200} %derivs
local	float	___347_z	%read{57,200} %write{57,200} %derivs
local	float	___347_r	%read{57,200} %write{57,200} %derivs
local	float	___347_x	%read{57,200} %write{57,200} %derivs
local	float	___347_y	%read{57,200} %write{57,200} %derivs
local	vector	___347_outDir	%read{57,200} %write{57,200} %derivs
local	vector	___348_outDir	%read{57,200} %write{57,200} %derivs
local	float	___348_sinTheta	%read{57,200} %write{57,200} %derivs
local	float	___349_phi	%read{57,200} %write{57,200} %derivs
local	float	___351_biasR	%read{57,200} %write{57,200}
local	float	___351_biasT	%read{57,200} %write{57,200}
local	int	totalSamples	%read{57,201} %write{2,3} %derivs
local	vector	biasDir	%read{5,200} %write{4,11} %derivs
local	string	___352_space	%read{11,11} %write{9,10} %derivs
local	vector	t0	%read{57,200} %write{44,44} %derivs
local	vector	t1	%read{39,200} %write{32,32} %derivs
local	float	maxdist	%read{57,200} %write{47,48}
local	float	sfalloff	%read{57,200} %write{51,53}
local	vector	dir	%read{57,200} %write{57,200} %derivs
local	float	occlusion	%read{57,203} %write{54,202}
local	int	___353_i	%read{57,200} %write{56,200} %derivs
local	int	___354_seed	%read{57,200} %write{57,200} %derivs
local	point	___354_xi	%read{57,200} %write{57,200} %derivs
local	normal	___356_Nn	%read{57,200} %write{57,200} %derivs
local	float	___354_mindist	%read{57,200} %write{57,200}
local	point	___354_org	%read{57,200} %write{57,200} %derivs
local	float	___357_dPduLen	%read{57,200} %write{57,200} %derivs
local	float	___357_dPdvLen	%read{57,200} %write{57,200} %derivs
local	point	___357_rnd	%read{57,200} %write{57,200} %derivs
local	int	___354_hit	%read{57,200} %write{57,200}
local	float	___358_hitdist	%read{57,200} %write{57,200}
const	int	$const1	2		%read{0,206} %write{2147483647,-1}
temp	int	$tmp1	%read{1,1} %write{0,0}
temp	int	$tmp2	%read{6,6} %write{5,5}
const	float	$const2	0		%read{5,184} %write{2147483647,-1}
const	string	$const3	""		%read{7,7} %write{2147483647,-1}
temp	int	$tmp3	%read{8,8} %write{7,7}
const	string	$const4	"object"		%read{9,9} %write{2147483647,-1}
const	string	$const5	"common"		%read{11,11} %write{2147483647,-1}
const	string	$const6	"CreateOrthonormalBasis"		%read{12,12} %write{2147483647,-1}
temp	float	$tmp4	%read{14,14} %write{13,13}
temp	int	$tmp5	%read{15,15} %write{14,14}
const	float	$const7	1		%read{16,196} %write{2147483647,-1}
const	float	$const8	-1		%read{17,20} %write{2147483647,-1}
temp	float	$tmp6	%read{19,19} %write{18,18} %derivs
temp	float	$tmp7	%read{20,20} %write{19,19} %derivs
const	int	$const9	0		%read{21,204} %write{2147483647,-1}
temp	float	$tmp8	%read{23,23} %write{21,21} %derivs
const	int	$const10	1		%read{22,205} %write{2147483647,-1}
temp	float	$tmp9	%read{23,23} %write{22,22} %derivs
temp	float	$tmp10	%read{24,24} %write{23,23} %derivs
temp	float	$tmp11	%read{32,32} %write{24,24} %derivs
temp	float	$tmp12	%read{27,27} %write{25,25} %derivs
temp	float	$tmp13	%read{27,27} %write{26,26} %derivs
temp	float	$tmp14	%read{28,28} %write{27,27} %derivs
temp	float	$tmp15	%read{29,29} %write{28,28} %derivs
temp	float	$tmp16	%read{32,32} %write{29,29} %derivs
temp	float	$tmp17	%read{31,31} %write{30,30} %derivs
temp	float	$tmp18	%read{32,32} %write{31,31} %derivs
temp	float	$tmp19	%read{34,34} %write{33,33} %derivs
temp	float	$tmp20	%read{36,36} %write{34,34} %derivs
temp	float	$tmp21	%read{36,36} %write{35,35} %derivs
temp	float	$tmp22	%read{37,37} %write{36,36} %derivs
temp	float	$tmp23	%read{38,38} %write{37,37} %derivs
temp	float	$tmp24	%read{44,44} %write{38,38} %derivs
temp	float	$tmp25	%read{40,40} %write{39,39} %derivs
temp	float	$tmp26	%read{44,44} %write{40,40} %derivs
temp	float	$tmp27	%read{42,42} %write{41,41} %derivs
temp	float	$tmp28	%read{43,43} %write{42,42} %derivs
temp	float	$tmp29	%read{44,44} %write{43,43} %derivs
temp	int	$tmp30	%read{46,46} %write{45,45}
const	float	$const11	9.99999968e+37		%read{48,190} %write{2147483647,-1}
temp	int	$tmp31	%read{50,50} %write{49,49}
temp	float	$tmp32	%read{53,53} %write{52,52}
temp	int	$tmp33	%read{57,200} %write{57,200}
temp	int	$tmp34	%read{55,200} %write{56,200}
const	string	$const12	"stratified"		%read{65,65} %write{2147483647,-1}
const	string	$const13	"random"		%read{60,60} %write{2147483647,-1}
const	int	$const14	16777216		%read{61,61} %write{2147483647,-1}
temp	int	$tmp35	%read{57,200} %write{57,200} %derivs
const	int	$const15	4096		%read{62,62} %write{2147483647,-1}
temp	int	$tmp36	%read{57,200} %write{57,200} %derivs
temp	int	$tmp37	%read{57,200} %write{57,200} %derivs
const	string	$const16	"RNG"		%read{65,65} %write{2147483647,-1}
temp	float	$tmp38	%read{57,200} %write{57,200}
temp	int	$tmp39	%read{57,200} %write{57,200}
const	string	$const17	"distributionSpherical"		%read{70,70} %write{2147483647,-1}
const	float	$const18	2		%read{72,171} %write{2147483647,-1}
temp	float	$tmp40	%read{57,200} %write{57,200} %derivs
temp	float	$tmp41	%read{57,200} %write{57,200} %derivs
temp	float	$tmp42	%read{57,200} %write{57,200} %derivs
temp	float	$tmp43	%read{57,200} %write{57,200} %derivs
temp	float	$tmp44	%read{57,200} %write{57,200} %derivs
temp	float	$tmp45	%read{57,200} %write{57,200} %derivs
temp	int	$tmp46	%read{57,200} %write{57,200}
temp	float	$tmp47	%read{57,200} %write{57,200} %derivs
const	float	$const19	6.28318548		%read{83,130} %write{2147483647,-1}
temp	float	$tmp48	%read{57,200} %write{57,200} %derivs
temp	float	$tmp49	%read{57,200} %write{57,200} %derivs
temp	float	$tmp50	%read{57,200} %write{57,200} %derivs
temp	float	$tmp51	%read{57,200} %write{57,200} %derivs
temp	int	$tmp52	%read{57,200} %write{57,200}
temp	int	$tmp53	%read{57,200} %write{57,200}
temp	int	$tmp54	%read{57,200} %write{57,200}
temp	int	$tmp55	%read{57,200} %write{57,200}
const	string	$const20	"distributionCosine"		%read{105,105} %write{2147483647,-1}
temp	float	$tmp56	%read{57,200} %write{57,200} %derivs
temp	float	$tmp57	%read{57,200} %write{57,200} %derivs
temp	float	$tmp58	%read{57,200} %write{57,200} %derivs
temp	float	$tmp59	%read{57,200} %write{57,200} %derivs
temp	float	$tmp60	%read{57,200} %write{57,200} %derivs
temp	float	$tmp61	%read{57,200} %write{57,200} %derivs
const	float	$const21	9.99999996e-13		%read{115,142} %write{2147483647,-1}
temp	int	$tmp62	%read{57,200} %write{57,200}
temp	float	$tmp63	%read{57,200} %write{57,200} %derivs
temp	float	$tmp64	%read{57,200} %write{57,200} %derivs
temp	vector	$tmp65	%read{57,200} %write{57,200} %derivs
temp	float	$tmp66	%read{57,200} %write{57,200} %derivs
temp	float	$tmp67	%read{57,200} %write{57,200} %derivs
temp	vector	$tmp68	%read{57,200} %write{57,200} %derivs
temp	vector	$tmp69	%read{57,200} %write{57,200} %derivs
temp	vector	$tmp70	%read{57,200} %write{57,200} %derivs
const	string	$const22	"distributionUniform"		%read{128,128} %write{2147483647,-1}
temp	float	$tmp71	%read{57,200} %write{57,200} %derivs
temp	float	$tmp72	%read{57,200} %write{57,200} %derivs
temp	float	$tmp73	%read{57,200} %write{57,200} %derivs
temp	float	$tmp74	%read{57,200} %write{57,200} %derivs
temp	float	$tmp75	%read{57,200} %write{57,200} %derivs
temp	float	$tmp76	%read{57,200} %write{57,200} %derivs
temp	int	$tmp77	%read{57,200} %write{57,200}
temp	vector	$tmp78	%read{57,200} %write{57,200} %derivs
temp	vector	$tmp79	%read{57,200} %write{57,200} %derivs
temp	vector	$tmp80	%read{57,200} %write{57,200} %derivs
temp	vector	$tmp81	%read{57,200} %write{57,200} %derivs
temp	vector	$tmp82	%read{57,200} %write{57,200} %derivs
temp	int	$tmp83	%read{57,200} %write{57,200}
const	string	$const23	"autoBias"		%read{154,154} %write{2147483647,-1}
temp	int	$tmp84	%read{2147483647,-1} %write{57,200}
const	string	$const24	"builtin"		%read{155,156} %write{2147483647,-1}
const	string	$const25	"biasR"		%read{155,155} %write{2147483647,-1}
temp	int	$tmp85	%read{2147483647,-1} %write{57,200}
const	string	$const26	"biasT"		%read{156,156} %write{2147483647,-1}
temp	float	$tmp86	%read{57,200} %write{57,200}
temp	int	$tmp87	%read{57,200} %write{57,200}
temp	int	$tmp88	%read{57,200} %write{57,200}
temp	point	$tmp89	%read{57,200} %write{57,200} %derivs
const	float	$const27	3000000		%read{169,169} %write{2147483647,-1}
temp	point	$tmp90	%read{57,200} %write{57,200} %derivs
temp	point	$tmp91	%read{57,200} %write{57,200} %derivs
temp	float	$tmp92	%read{57,200} %write{57,200} %derivs
temp	vector	$tmp93	%read{57,200} %write{57,200} %derivs
temp	vector	$tmp94	%read{57,200} %write{57,200} %derivs
temp	float	$tmp95	%read{57,200} %write{57,200} %derivs
temp	vector	$tmp96	%read{57,200} %write{57,200} %derivs
temp	vector	$tmp97	%read{57,200} %write{57,200} %derivs
temp	vector	$tmp98	%read{57,200} %write{57,200} %derivs
temp	vector	$tmp99	%read{57,200} %write{57,200} %derivs
const	string	$const28	"mindist"		%read{182,182} %write{2147483647,-1}
const	string	$const29	"maxdist"		%read{182,182} %write{2147483647,-1}
const	string	$const30	"traceset"		%read{182,182} %write{2147483647,-1}
temp	int	$tmp100	%read{57,200} %write{57,200}
temp	int	$tmp101	%read{57,200} %write{57,200}
const	string	$const31	"trace"		%read{188,188} %write{2147483647,-1}
const	string	$const32	"hitdist"		%read{188,188} %write{2147483647,-1}
temp	int	$tmp102	%read{57,200} %write{57,200}
temp	float	$tmp103	%read{57,200} %write{57,200}
temp	float	$tmp104	%read{57,200} %write{57,200}
temp	float	$tmp105	%read{57,200} %write{57,200}
temp	float	$tmp106	%read{57,200} %write{57,200}
temp	float	$tmp107	%read{57,200} %write{57,200}
temp	int	$tmp108	%read{2147483647,-1} %write{57,200}
temp	float	$tmp109	%read{202,202} %write{201,201}
code ___main___
# PxrDirt.osl:202
#     int totalSamples = direction == k_dir_both ? 2 * numSamples : numSamples;
	eq		$tmp1 direction $const1 	%filename{"PxrDirt.osl"} %line{202} %argrw{"wrr"}
	if		$tmp1 3 4 	%argrw{"r"}
	mul		totalSamples $const1 numSamples 	%argrw{"wrr"}
	assign		totalSamples numSamples 	%argrw{"wr"}
# PxrDirt.osl:205
#     vector biasDir = biasDirection;
	assign		biasDir biasDirection 	%line{205} %argrw{"wr"}
# PxrDirt.osl:206
#     if (biasDir)
	neq		$tmp2 biasDir $const2 	%line{206} %argrw{"wrr"}
	if		$tmp2 12 12 	%argrw{"r"}
# PxrDirt.osl:208
#         string space = biasDirectionCoordsys == "" ? "object" : biasDirectionCoordsys;
	eq		$tmp3 biasDirectionCoordsys $const3 	%line{208} %argrw{"wrr"}
	if		$tmp3 10 11 	%argrw{"r"}
	assign		___352_space $const4 	%argrw{"wr"}
	assign		___352_space biasDirectionCoordsys 	%argrw{"wr"}
# PxrDirt.osl:209
#         biasDir = transform("common", space, biasDir);
	transformv	biasDir $const5 ___352_space biasDir 	%line{209} %argrw{"wrrr"}
# PxrDirt.osl:214
#     CreateOrthonormalBasis(N, t0, t1);
	functioncall	$const6 45 	%line{214} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:42
#     float fsign = (n[2] >= 0.0) ? 1.0 : -1.0;
	compref		$tmp4 N $const1 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h"} %line{42} %argrw{"wrr"}
	ge		$tmp5 $tmp4 $const2 	%argrw{"wrr"}
	if		$tmp5 17 18 	%argrw{"r"}
	assign		___345_fsign $const7 	%argrw{"wr"}
	assign		___345_fsign $const8 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:43
#     float a = -1.0 / (fsign + n[2]);
	compref		$tmp6 N $const1 	%line{43} %argrw{"wrr"}
	add		$tmp7 ___345_fsign $tmp6 	%argrw{"wrr"}
	div		___345_a $const8 $tmp7 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:44
#     v2 = vector(n[0]*n[1]*a, fsign + n[1]*n[1]*a, -n[1]);
	compref		$tmp8 N $const9 	%line{44} %argrw{"wrr"}
	compref		$tmp9 N $const10 	%argrw{"wrr"}
	mul		$tmp10 $tmp8 $tmp9 	%argrw{"wrr"}
	mul		$tmp11 $tmp10 ___345_a 	%argrw{"wrr"}
	compref		$tmp12 N $const10 	%argrw{"wrr"}
	compref		$tmp13 N $const10 	%argrw{"wrr"}
	mul		$tmp14 $tmp12 $tmp13 	%argrw{"wrr"}
	mul		$tmp15 $tmp14 ___345_a 	%argrw{"wrr"}
	add		$tmp16 ___345_fsign $tmp15 	%argrw{"wrr"}
	compref		$tmp17 N $const10 	%argrw{"wrr"}
	neg		$tmp18 $tmp17 	%argrw{"wr"}
	vector		t1 $tmp11 $tmp16 $tmp18 	%argrw{"wrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:45
#     v1 = vector(1.0 + fsign*n[0]*n[0]*a, fsign*v2[0], -(fsign*n[0]));
	compref		$tmp19 N $const9 	%line{45} %argrw{"wrr"}
	mul		$tmp20 ___345_fsign $tmp19 	%argrw{"wrr"}
	compref		$tmp21 N $const9 	%argrw{"wrr"}
	mul		$tmp22 $tmp20 $tmp21 	%argrw{"wrr"}
	mul		$tmp23 $tmp22 ___345_a 	%argrw{"wrr"}
	add		$tmp24 $const7 $tmp23 	%argrw{"wrr"}
	compref		$tmp25 t1 $const9 	%argrw{"wrr"}
	mul		$tmp26 ___345_fsign $tmp25 	%argrw{"wrr"}
	compref		$tmp27 N $const9 	%argrw{"wrr"}
	mul		$tmp28 ___345_fsign $tmp27 	%argrw{"wrr"}
	neg		$tmp29 $tmp28 	%argrw{"wr"}
	vector		t0 $tmp24 $tmp26 $tmp29 	%argrw{"wrrr"}
# PxrDirt.osl:215
#     float maxdist = maxDistance > 0 ? maxDistance : MAXDIST;
	gt		$tmp30 maxDistance $const9 	%filename{"PxrDirt.osl"} %line{215} %argrw{"wrr"}
	if		$tmp30 48 49 	%argrw{"r"}
	assign		maxdist maxDistance 	%argrw{"wr"}
	assign		maxdist $const11 	%argrw{"wr"}
# PxrDirt.osl:216
#     float sfalloff = maxDistance > 0 ? falloff : min(0.0, -falloff);
	gt		$tmp31 maxDistance $const9 	%line{216} %argrw{"wrr"}
	if		$tmp31 52 54 	%argrw{"r"}
	assign		sfalloff falloff 	%argrw{"wr"}
	neg		$tmp32 falloff 	%argrw{"wr"}
	min		sfalloff $const2 $tmp32 	%argrw{"wrr"}
# PxrDirt.osl:219
#     float occlusion = 0;
	assign		occlusion $const9 	%line{219} %argrw{"wr"}
# PxrDirt.osl:220
#     for (int i = 0; i < totalSamples; i++)
	for		$tmp34 57 59 199 201 	%line{220} %argrw{"r"}
	assign		___353_i $const9 	%argrw{"wr"}
	lt		$tmp33 ___353_i totalSamples 	%argrw{"wrr"}
	neq		$tmp34 $tmp33 $const9 	%argrw{"wrr"}
# PxrDirt.osl:223
#         int seed = 0;  // temporary limitation: seed = 0--127
	assign		___354_seed $const9 	%line{223} %argrw{"wr"}
# PxrDirt.osl:224
#         point xi = random("stratified", seed, i, totalSamples);  // xi.z is ignored below
	functioncall	$const13 67 	%line{224} %argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:431
#   int combined = 4096*4096*seed + 4096*N + index;
	mul		$tmp35 $const14 ___354_seed 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{431} %argrw{"wrr"}
	mul		$tmp36 $const15 totalSamples 	%argrw{"wrr"}
	add		$tmp37 $tmp35 $tmp36 	%argrw{"wrr"}
	add		___293_combined $tmp37 ___353_i 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:435
#   int ok = getattribute("RNG", type, combined, xi);
	getattribute	___293_ok $const16 $const12 ___293_combined ___293_xi 	%line{435} %argrw{"wrrrw"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:436
#   return xi;
	assign		___354_xi ___293_xi 	%line{436} %argrw{"wr"}
# PxrDirt.osl:227
#         if (length(N) == 0)
	length		$tmp38 N 	%filename{"PxrDirt.osl"} %line{227} %argrw{"wr"}
	eq		$tmp39 $tmp38 $const9 	%argrw{"wrr"}
	if		$tmp39 93 149 	%argrw{"r"}
# PxrDirt.osl:229
#             dir = distributionSpherical(xi);
	functioncall	$const17 93 	%line{229} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:76
#     outDir[2] = 2.0 * xi[1] - 1.0;  // cosTheta
	compref		$tmp40 ___354_xi $const10 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h"} %line{76} %argrw{"wrr"}
	mul		$tmp41 $const18 $tmp40 	%argrw{"wrr"}
	sub		$tmp42 $tmp41 $const7 	%argrw{"wrr"}
	compassign	___348_outDir $const1 $tmp42 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:77
#     float sinTheta = 1.0 - outDir[2] * outDir[2];  // actually sinTheta^2 here
	compref		$tmp43 ___348_outDir $const1 	%line{77} %argrw{"wrr"}
	compref		$tmp44 ___348_outDir $const1 	%argrw{"wrr"}
	mul		$tmp45 $tmp43 $tmp44 	%argrw{"wrr"}
	sub		___348_sinTheta $const7 $tmp45 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:79
#     if (sinTheta > 0.0)
	gt		$tmp46 ___348_sinTheta $const2 	%line{79} %argrw{"wrr"}
	if		$tmp46 90 92 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:81
#         sinTheta  = sqrt(sinTheta);
	sqrt		___348_sinTheta ___348_sinTheta 	%line{81} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:82
#         float phi = xi[0] * M_2PI;
	compref		$tmp47 ___354_xi $const9 	%line{82} %argrw{"wrr"}
	mul		___349_phi $tmp47 $const19 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:83
#         outDir[0]  = sinTheta * cos(phi);
	cos		$tmp48 ___349_phi 	%line{83} %argrw{"wr"}
	mul		$tmp49 ___348_sinTheta $tmp48 	%argrw{"wrr"}
	compassign	___348_outDir $const9 $tmp49 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:84
#         outDir[1]  = sinTheta * sin(phi);
	sin		$tmp50 ___349_phi 	%line{84} %argrw{"wr"}
	mul		$tmp51 ___348_sinTheta $tmp50 	%argrw{"wrr"}
	compassign	___348_outDir $const10 $tmp51 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:88
#         outDir[0] = 0.0;
	compassign	___348_outDir $const9 $const2 	%line{88} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:89
#         outDir[1] = 0.0;
	compassign	___348_outDir $const10 $const2 	%line{89} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:91
#     return outDir;
	assign		dir ___348_outDir 	%line{91} %argrw{"wr"}
# PxrDirt.osl:233
#             normal Nn = direction == k_dir_outside ? N :
	eq		$tmp52 direction $const9 	%filename{"PxrDirt.osl"} %line{233} %argrw{"wrr"}
	if		$tmp52 96 103 	%argrw{"r"}
	assign		___356_Nn N 	%argrw{"wr"}
# PxrDirt.osl:234
#                         direction == k_dir_inside ? -N :
	eq		$tmp53 direction $const10 	%line{234} %argrw{"wrr"}
	if		$tmp53 99 103 	%argrw{"r"}
	neg		___356_Nn N 	%argrw{"wr"}
# PxrDirt.osl:235
#                         i >= numSamples ? -N : N;
	ge		$tmp54 ___353_i numSamples 	%line{235} %argrw{"wrr"}
	if		$tmp54 102 103 	%argrw{"r"}
	neg		___356_Nn N 	%argrw{"wr"}
	assign		___356_Nn N 	%argrw{"wr"}
# PxrDirt.osl:236
#             if (distribution == k_dist_cosine)
	eq		$tmp55 distribution $const10 	%line{236} %argrw{"wrr"}
	if		$tmp55 128 149 	%argrw{"r"}
# PxrDirt.osl:237
#                 dir = distributionCosine(xi, Nn, t0, t1, cosineSpread);
	functioncall	$const20 128 	%line{237} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:51
#     float e1 = xi[0] * M_2PI;
	compref		$tmp56 ___354_xi $const9 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h"} %line{51} %argrw{"wrr"}
	mul		___346_e1 $tmp56 $const19 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:52
#     float z = sqrt(xi[1]);
	compref		$tmp57 ___354_xi $const10 	%line{52} %argrw{"wrr"}
	sqrt		___346_z $tmp57 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:53
#     float r = spread * sqrt(max(0.0, 1.0 - xi[1]));
	compref		$tmp60 ___354_xi $const10 	%line{53} %argrw{"wrr"}
	sub		$tmp61 $const7 $tmp60 	%argrw{"wrr"}
	max		$tmp59 $const2 $tmp61 	%argrw{"wrr"}
	sqrt		$tmp58 $tmp59 	%argrw{"wr"}
	mul		___346_r cosineSpread $tmp58 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:54
#     if (z < 1.e-12) z = 1.e-12;
	lt		$tmp62 ___346_z $const21 	%line{54} %argrw{"wrr"}
	if		$tmp62 118 118 	%argrw{"r"}
	assign		___346_z $const21 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:55
#     vector outDir = r * cos(e1) * t0 + r * sin(e1) * t1 + z * n;
	cos		$tmp63 ___346_e1 	%line{55} %argrw{"wr"}
	mul		$tmp64 ___346_r $tmp63 	%argrw{"wrr"}
	mul		$tmp65 $tmp64 t0 	%argrw{"wrr"}
	sin		$tmp66 ___346_e1 	%argrw{"wr"}
	mul		$tmp67 ___346_r $tmp66 	%argrw{"wrr"}
	mul		$tmp68 $tmp67 t1 	%argrw{"wrr"}
	add		$tmp69 $tmp65 $tmp68 	%argrw{"wrr"}
	mul		$tmp70 ___346_z ___356_Nn 	%argrw{"wrr"}
	add		___346_outDir $tmp69 $tmp70 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:56
#     return normalize(outDir);
	normalize	dir ___346_outDir 	%line{56} %argrw{"wr"}
# PxrDirt.osl:239
#                 dir = distributionUniform(xi, Nn, t0, t1);
	functioncall	$const22 149 	%filename{"PxrDirt.osl"} %line{239} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:62
#     float e1 = xi[0] * M_2PI;
	compref		$tmp71 ___354_xi $const9 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h"} %line{62} %argrw{"wrr"}
	mul		___347_e1 $tmp71 $const19 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:63
#     float z = xi[1];
	compref		___347_z ___354_xi $const10 	%line{63} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:64
#     float r = sqrt(max(0.0, 1.0 - z * z));
	mul		$tmp73 ___347_z ___347_z 	%line{64} %argrw{"wrr"}
	sub		$tmp74 $const7 $tmp73 	%argrw{"wrr"}
	max		$tmp72 $const2 $tmp74 	%argrw{"wrr"}
	sqrt		___347_r $tmp72 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:65
#     float x = r * cos(e1);
	cos		$tmp75 ___347_e1 	%line{65} %argrw{"wr"}
	mul		___347_x ___347_r $tmp75 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:66
#     float y = r * sin(e1);
	sin		$tmp76 ___347_e1 	%line{66} %argrw{"wr"}
	mul		___347_y ___347_r $tmp76 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:67
#     if (z < 1.e-12) z = 1.e-12;
	lt		$tmp77 ___347_z $const21 	%line{67} %argrw{"wrr"}
	if		$tmp77 143 143 	%argrw{"r"}
	assign		___347_z $const21 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:68
#     vector outDir = x * t0 + y * t1 + z * n;
	mul		$tmp78 ___347_x t0 	%line{68} %argrw{"wrr"}
	mul		$tmp79 ___347_y t1 	%argrw{"wrr"}
	add		$tmp80 $tmp78 $tmp79 	%argrw{"wrr"}
	mul		$tmp81 ___347_z ___356_Nn 	%argrw{"wrr"}
	add		___347_outDir $tmp80 $tmp81 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:69
#     return outDir;
	assign		dir ___347_outDir 	%line{69} %argrw{"wr"}
# PxrDirt.osl:241
#         dir = normalize(dir + biasDir);
	add		$tmp82 dir biasDir 	%filename{"PxrDirt.osl"} %line{241} %argrw{"wrr"}
	normalize	dir $tmp82 	%argrw{"wr"}
# PxrDirt.osl:243
#         float mindist = minDistance > 0.0 ? minDistance : autoBias(N, dir);
	gt		$tmp83 minDistance $const2 	%line{243} %argrw{"wrr"}
	if		$tmp83 154 163 	%argrw{"r"}
	assign		___354_mindist minDistance 	%argrw{"wr"}
	functioncall	$const23 163 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:98
#     getattribute("builtin", "biasR", biasR);
	getattribute	$tmp84 $const24 $const25 ___351_biasR 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h"} %line{98} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:99
#     getattribute("builtin", "biasT", biasT);
	getattribute	$tmp85 $const24 $const26 ___351_biasT 	%line{99} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/rmanTrace.h:100
#     return dot(n, dir) < 0.0 ? biasT : biasR;
	dot		$tmp86 N dir 	%line{100} %argrw{"wrr"}
	lt		$tmp87 $tmp86 $const2 	%argrw{"wrr"}
	if		$tmp87 161 162 	%argrw{"r"}
	assign		___354_mindist ___351_biasT 	%argrw{"wr"}
	assign		___354_mindist ___351_biasR 	%argrw{"wr"}
	return
# PxrDirt.osl:245
#         point org = P;
	assign		___354_org P 	%filename{"PxrDirt.osl"} %line{245} %argrw{"wr"}
# PxrDirt.osl:248
#         if (jitter > 0.0)
	gt		$tmp88 jitter $const2 	%line{248} %argrw{"wrr"}
	if		$tmp88 182 182 	%argrw{"r"}
# PxrDirt.osl:250
#             float dPduLen = length(dPdu);
	length		___357_dPduLen dPdu 	%line{250} %argrw{"wr"}
# PxrDirt.osl:251
#             float dPdvLen = length(dPdv);
	length		___357_dPdvLen dPdv 	%line{251} %argrw{"wr"}
# PxrDirt.osl:252
#             point rnd = cellnoise((P + dir) * 3.0e6);  // used as a repeatable pos-dependent 2D "random" number
	add		$tmp89 P dir 	%line{252} %argrw{"wrr"}
	mul		$tmp90 $tmp89 $const27 	%argrw{"wrr"}
	cellnoise	___357_rnd $tmp90 	%argrw{"wr"}
# PxrDirt.osl:253
#             rnd = 2 * rnd - 1;
	mul		$tmp91 $const18 ___357_rnd 	%line{253} %argrw{"wrr"}
	sub		___357_rnd $tmp91 $const7 	%argrw{"wrr"}
# PxrDirt.osl:254
#             org += jitter * (rnd.x * dPdu / dPduLen + rnd.y * dPdv / dPdvLen);
	compref		$tmp92 ___357_rnd $const9 	%line{254} %argrw{"wrr"}
	mul		$tmp93 $tmp92 dPdu 	%argrw{"wrr"}
	div		$tmp94 $tmp93 ___357_dPduLen 	%argrw{"wrr"}
	compref		$tmp95 ___357_rnd $const10 	%argrw{"wrr"}
	mul		$tmp96 $tmp95 dPdv 	%argrw{"wrr"}
	div		$tmp97 $tmp96 ___357_dPdvLen 	%argrw{"wrr"}
	add		$tmp98 $tmp94 $tmp97 	%argrw{"wrr"}
	mul		$tmp99 jitter $tmp98 	%argrw{"wrr"}
	add		___354_org ___354_org $tmp99 	%argrw{"wrr"}
# PxrDirt.osl:258
#         int hit = trace(org, dir,
	trace		___354_hit ___354_org dir $const28 ___354_mindist $const29 maxdist $const30 traceSet 	%line{258} %argrw{"wrrrrrrrr"} %argderivs{1,2}
# PxrDirt.osl:264
#         if (hit)
	if		___354_hit 199 199 	%line{264} %argrw{"r"}
# PxrDirt.osl:266
#             float hitdist = 0.0;
	assign		___358_hitdist $const2 	%line{266} %argrw{"wr"}
# PxrDirt.osl:267
#             if (falloff == 0)
	eq		$tmp100 falloff $const9 	%line{267} %argrw{"wrr"}
	if		$tmp100 188 199 	%argrw{"r"}
# PxrDirt.osl:269
#                 occlusion += 1;
	add		occlusion occlusion $const7 	%line{269} %argrw{"wrr"}
# PxrDirt.osl:271
#             else if (getmessage("trace", "hitdist", hitdist))
	getmessage	$tmp101 $const31 $const32 ___358_hitdist 	%line{271} %argrw{"wrrw"}
	if		$tmp101 199 199 	%argrw{"r"}
# PxrDirt.osl:273
#                 if (maxdist == MAXDIST)
	eq		$tmp102 maxdist $const11 	%line{273} %argrw{"wrr"}
	if		$tmp102 195 199 	%argrw{"r"}
# PxrDirt.osl:274
#                     occlusion += exp(sfalloff * hitdist);
	mul		$tmp104 sfalloff ___358_hitdist 	%line{274} %argrw{"wrr"}
	exp		$tmp103 $tmp104 	%argrw{"wr"}
	add		occlusion occlusion $tmp103 	%argrw{"wrr"}
# PxrDirt.osl:276
#                     occlusion += pow(1.0 - hitdist / maxdist, sfalloff);
	div		$tmp106 ___358_hitdist maxdist 	%line{276} %argrw{"wrr"}
	sub		$tmp107 $const7 $tmp106 	%argrw{"wrr"}
	pow		$tmp105 $tmp107 sfalloff 	%argrw{"wrr"}
	add		occlusion occlusion $tmp105 	%argrw{"wrr"}
# PxrDirt.osl:220
#     for (int i = 0; i < totalSamples; i++)
	assign		$tmp108 ___353_i 	%line{220} %argrw{"wr"}
	add		___353_i ___353_i $const10 	%argrw{"wrr"}
# PxrDirt.osl:280
#     occlusion /= totalSamples;
	assign		$tmp109 totalSamples 	%line{280} %argrw{"wr"}
	div		occlusion occlusion $tmp109 	%argrw{"wrr"}
# PxrDirt.osl:281
#     resultRGB = mix(unoccluded, occluded, occlusion);
	mix		resultRGB unoccluded occluded occlusion 	%line{281} %argrw{"wrrr"}
# PxrDirt.osl:284
#     resultR = resultRGB[0];
	compref		resultR resultRGB $const9 	%line{284} %argrw{"wrr"}
# PxrDirt.osl:285
#     resultG = resultRGB[1];
	compref		resultG resultRGB $const10 	%line{285} %argrw{"wrr"}
# PxrDirt.osl:286
#     resultB = resultRGB[2];
	compref		resultB resultRGB $const1 	%line{286} %argrw{"wrr"}
	end
