OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.@PROJECT_VERSION_TWEAK@"dev"
# options: -DOSX -I/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/common -I/Users/Shared/build/ratbuild/rmanshare/RIS/pattern/osl -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl -o /Users/Shared/build/ratbuild/rmanshare/_built/osxSonoma_x86-64_clang15_external_release/osl/PxrTangentField.osl/obj/PxrTangentField.oso
shader PxrTangentField	%meta{int,rfm_nodeid,1053348} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/geometry"} %meta{string,rfh_classification,"Pattern/Geometry"} %meta{string,help,"Defines a tangent field typically used to control anisotropic direction. InputRotation takes a single grayscale channel where black = 0 degrees and white = 360 degrees.InputVector takes a 2 channels map where the red channels is x and green is y. The blue channel is ignored. The vector method often gives better results by minimizing texture filtering artifacts. If such artifacts are too visible, use the 'nearest' texture filter. The 'nearest' filter disables entirely mip-mapping, so you should only us it with a low resolutiion map to avoid slowing down the renderer and consuming too much texture memory. "} 
param	float	inputRotation	0		%meta{string,widget,"default"} %meta{string,help,"A single float value to rotate the shading tangent. This input will take precedence over inputVector"} %meta{string,label,"Input Rotation"}  %read{1,10} %write{2147483647,-1}
param	color	inputVector	0 0 0		%meta{string,widget,"default"} %meta{string,help,"The red and green channels will be read as x and y coordinates of a 2d vector. If inputRotation is connected, this input will be ignored."} %meta{string,label,"Input Vector"}  %read{131,133} %write{2147483647,-1}
param	float	rotationOffset	0		%meta{string,widget,"default"} %meta{string,help,"A global rotation offset."} %meta{int,connectable,0} %meta{string,label,"Rotation Offset"} %meta{float,max,90} %meta{float,min,-90}  %read{12,151} %write{2147483647,-1}
param	float	rotationRange	1		%meta{string,widget,"default"} %meta{string,help,"Scales the rotation range. 1.0 equates 0 to 360 degrees."} %meta{int,connectable,0} %meta{string,label,"Rotation Range"} %meta{float,max,2} %meta{float,min,0}  %read{11,152} %write{2147483647,-1}
param	int	centeredVectors	1		%meta{string,widget,"checkBox"} %meta{string,help,"Centers the gradient values of the vector map."} %meta{int,connectable,0} %meta{string,label,"Centered Vectors"}  %read{136,136} %write{2147483647,-1}
oparam	vector	resultXYZ	0 0 0		%meta{string,help,"resultXYZ (vector)"}  %read{270,273} %write{130,270}
oparam	float	resultX	0		%meta{string,help,"resultX (float)"}  %read{2147483647,-1} %write{271,271}
oparam	float	resultY	0		%meta{string,help,"resultY (float)"}  %read{2147483647,-1} %write{272,272}
oparam	float	resultZ	0		%meta{string,help,"resultZ (float)"}  %read{2147483647,-1} %write{273,273}
global	point	P	%read{16,157} %write{2147483647,-1}
global	normal	N	%read{18,157} %write{2147483647,-1}
local	point	___345_p	%read{19,158} %write{16,155}
local	point	___345_p1	%read{19,269} %write{17,156}
local	point	___345_p2	%read{20,159} %write{18,157}
local	vector	___345_u	%read{21,262} %write{20,160}
local	vector	___345_q1	%read{32,269} %write{19,268}
local	vector	___345_q2	%read{55,268} %write{33,267}
local	float	___345_d	%read{30,264} %write{29,168}
local	float	___345_sn	%read{75,218} %write{71,210}
local	float	___345_cs	%read{73,220} %write{71,210}
local	int	doRotation	%read{9,9} %write{0,3}
local	vector	U	%read{144,144} %write{4,4}
local	vector	V	%read{137,146} %write{5,143}
local	vector	Tn	%read{8,8} %write{6,7}
local	vector	dPds	%read{16,155} %write{8,8}
local	float	___352_rad	%read{149,152} %write{145,149}
const	int	$const1	0		%read{0,271} %write{2147483647,-1}
temp	int	$tmp1	%read{2,2} %write{1,1}
const	int	$const2	1		%read{3,272} %write{2147483647,-1}
const	vector	$const3	1 0 0		%read{4,4} %write{2147483647,-1}
const	vector	$const4	0 0 0		%read{5,5} %write{2147483647,-1}
temp	int	$tmp2	%read{2147483647,-1} %write{7,7}
const	string	$const5	"builtin"		%read{7,7} %write{2147483647,-1}
const	string	$const6	"Tn"		%read{7,7} %write{2147483647,-1}
temp	float	$tmp3	%read{71,71} %write{14,14}
const	float	$const7	360		%read{10,10} %write{2147483647,-1}
temp	float	$tmp4	%read{11,11} %write{10,10}
temp	float	$tmp5	%read{12,12} %write{11,11}
temp	float	$tmp6	%read{14,14} %write{12,12}
const	string	$const8	"radians"		%read{13,150} %write{2147483647,-1}
const	float	$const9	0.0174532924		%read{14,151} %write{2147483647,-1}
const	string	$const10	"rotate"		%read{15,154} %write{2147483647,-1}
temp	float	$tmp7	%read{24,24} %write{22,22}
temp	float	$tmp8	%read{24,24} %write{23,23}
temp	float	$tmp9	%read{28,28} %write{24,24}
const	int	$const11	2		%read{25,273} %write{2147483647,-1}
temp	float	$tmp10	%read{27,27} %write{25,25}
temp	float	$tmp11	%read{27,27} %write{26,26}
temp	float	$tmp12	%read{28,28} %write{27,27}
temp	float	$tmp13	%read{29,29} %write{28,28}
const	float	$const12	0		%read{30,169} %write{2147483647,-1}
temp	int	$tmp14	%read{31,31} %write{30,30}
temp	float	$tmp15	%read{33,33} %write{32,32}
temp	float	$tmp16	%read{36,36} %write{34,34}
temp	float	$tmp17	%read{36,36} %write{35,35}
temp	float	$tmp18	%read{37,37} %write{36,36}
temp	float	$tmp19	%read{42,42} %write{37,37}
temp	float	$tmp20	%read{40,40} %write{38,38}
temp	float	$tmp21	%read{40,40} %write{39,39}
temp	float	$tmp22	%read{41,41} %write{40,40}
temp	float	$tmp23	%read{42,42} %write{41,41}
temp	float	$tmp24	%read{43,43} %write{42,42}
temp	float	$tmp25	%read{46,46} %write{44,44}
temp	float	$tmp26	%read{46,46} %write{45,45}
temp	float	$tmp27	%read{47,47} %write{46,46}
temp	float	$tmp28	%read{52,52} %write{47,47}
temp	float	$tmp29	%read{50,50} %write{48,48}
temp	float	$tmp30	%read{50,50} %write{49,49}
temp	float	$tmp31	%read{51,51} %write{50,50}
temp	float	$tmp32	%read{52,52} %write{51,51}
temp	float	$tmp33	%read{53,53} %write{52,52}
temp	float	$tmp34	%read{56,56} %write{55,55}
temp	float	$tmp35	%read{60,60} %write{56,56}
temp	float	$tmp36	%read{59,59} %write{57,57}
temp	float	$tmp37	%read{59,59} %write{58,58}
temp	float	$tmp38	%read{60,60} %write{59,59}
temp	float	$tmp39	%read{61,61} %write{60,60}
temp	float	$tmp40	%read{63,63} %write{62,62}
temp	float	$tmp41	%read{66,66} %write{64,64}
temp	float	$tmp42	%read{66,66} %write{65,65}
temp	float	$tmp43	%read{69,69} %write{66,66}
temp	float	$tmp44	%read{68,68} %write{67,67}
temp	float	$tmp45	%read{69,69} %write{68,68}
temp	float	$tmp46	%read{70,70} %write{69,69}
temp	float	$tmp47	%read{73,73} %write{72,72}
temp	float	$tmp48	%read{76,76} %write{73,73}
temp	float	$tmp49	%read{75,75} %write{74,74}
temp	float	$tmp50	%read{76,76} %write{75,75}
temp	float	$tmp51	%read{77,77} %write{76,76}
temp	float	$tmp52	%read{79,79} %write{78,78}
temp	float	$tmp53	%read{82,82} %write{79,79}
temp	float	$tmp54	%read{81,81} %write{80,80}
temp	float	$tmp55	%read{82,82} %write{81,81}
temp	float	$tmp56	%read{83,83} %write{82,82}
temp	float	$tmp57	%read{85,85} %write{84,84}
temp	float	$tmp58	%read{87,87} %write{86,86}
temp	float	$tmp59	%read{91,91} %write{87,87}
temp	float	$tmp60	%read{90,90} %write{88,88}
temp	float	$tmp61	%read{90,90} %write{89,89}
temp	float	$tmp62	%read{91,91} %write{90,90}
temp	float	$tmp63	%read{92,92} %write{91,91}
temp	float	$tmp64	%read{94,94} %write{93,93}
temp	float	$tmp65	%read{96,96} %write{95,95}
temp	float	$tmp66	%read{98,98} %write{96,96}
temp	float	$tmp67	%read{98,98} %write{97,97}
temp	float	$tmp68	%read{101,101} %write{98,98}
temp	float	$tmp69	%read{100,100} %write{99,99}
temp	float	$tmp70	%read{101,101} %write{100,100}
temp	float	$tmp71	%read{102,102} %write{101,101}
temp	int	$tmp72	%read{104,104} %write{103,103}
temp	float	$tmp73	%read{106,106} %write{105,105}
temp	float	$tmp74	%read{109,109} %write{107,107}
temp	float	$tmp75	%read{109,109} %write{108,108}
temp	float	$tmp76	%read{110,110} %write{109,109}
temp	float	$tmp77	%read{115,115} %write{110,110}
temp	float	$tmp78	%read{113,113} %write{111,111}
temp	float	$tmp79	%read{113,113} %write{112,112}
temp	float	$tmp80	%read{114,114} %write{113,113}
temp	float	$tmp81	%read{115,115} %write{114,114}
temp	float	$tmp82	%read{116,116} %write{115,115}
temp	float	$tmp83	%read{118,118} %write{117,117}
temp	float	$tmp84	%read{120,120} %write{118,118}
temp	float	$tmp85	%read{120,120} %write{119,119}
temp	float	$tmp86	%read{121,121} %write{120,120}
temp	float	$tmp87	%read{126,126} %write{121,121}
temp	float	$tmp88	%read{124,124} %write{122,122}
temp	float	$tmp89	%read{124,124} %write{123,123}
temp	float	$tmp90	%read{125,125} %write{124,124}
temp	float	$tmp91	%read{126,126} %write{125,125}
temp	float	$tmp92	%read{127,127} %write{126,126}
temp	float	$tmp93	%read{132,132} %write{131,131}
temp	float	$tmp94	%read{134,134} %write{133,133}
temp	float	$tmp95	%read{138,138} %write{137,137}
const	float	$const13	0.5		%read{138,141} %write{2147483647,-1}
temp	float	$tmp96	%read{139,139} %write{138,138}
temp	float	$tmp97	%read{141,141} %write{140,140}
temp	float	$tmp98	%read{142,142} %write{141,141}
temp	float	$tmp99	%read{145,145} %write{144,144}
temp	float	$tmp100	%read{147,147} %write{146,146}
temp	int	$tmp101	%read{148,148} %write{147,147}
const	float	$const14	-1		%read{149,149} %write{2147483647,-1}
temp	float	$tmp102	%read{153,153} %write{151,151}
temp	float	$tmp103	%read{153,153} %write{152,152}
temp	float	$tmp104	%read{210,210} %write{153,153}
temp	float	$tmp105	%read{163,163} %write{161,161}
temp	float	$tmp106	%read{163,163} %write{162,162}
temp	float	$tmp107	%read{167,167} %write{163,163}
temp	float	$tmp108	%read{166,166} %write{164,164}
temp	float	$tmp109	%read{166,166} %write{165,165}
temp	float	$tmp110	%read{167,167} %write{166,166}
temp	float	$tmp111	%read{168,168} %write{167,167}
temp	int	$tmp112	%read{170,170} %write{169,169}
temp	float	$tmp113	%read{172,172} %write{171,171}
temp	float	$tmp114	%read{175,175} %write{173,173}
temp	float	$tmp115	%read{175,175} %write{174,174}
temp	float	$tmp116	%read{176,176} %write{175,175}
temp	float	$tmp117	%read{181,181} %write{176,176}
temp	float	$tmp118	%read{179,179} %write{177,177}
temp	float	$tmp119	%read{179,179} %write{178,178}
temp	float	$tmp120	%read{180,180} %write{179,179}
temp	float	$tmp121	%read{181,181} %write{180,180}
temp	float	$tmp122	%read{182,182} %write{181,181}
temp	float	$tmp123	%read{185,185} %write{183,183}
temp	float	$tmp124	%read{185,185} %write{184,184}
temp	float	$tmp125	%read{186,186} %write{185,185}
temp	float	$tmp126	%read{191,191} %write{186,186}
temp	float	$tmp127	%read{189,189} %write{187,187}
temp	float	$tmp128	%read{189,189} %write{188,188}
temp	float	$tmp129	%read{190,190} %write{189,189}
temp	float	$tmp130	%read{191,191} %write{190,190}
temp	float	$tmp131	%read{192,192} %write{191,191}
temp	float	$tmp132	%read{195,195} %write{194,194}
temp	float	$tmp133	%read{199,199} %write{195,195}
temp	float	$tmp134	%read{198,198} %write{196,196}
temp	float	$tmp135	%read{198,198} %write{197,197}
temp	float	$tmp136	%read{199,199} %write{198,198}
temp	float	$tmp137	%read{200,200} %write{199,199}
temp	float	$tmp138	%read{202,202} %write{201,201}
temp	float	$tmp139	%read{205,205} %write{203,203}
temp	float	$tmp140	%read{205,205} %write{204,204}
temp	float	$tmp141	%read{208,208} %write{205,205}
temp	float	$tmp142	%read{207,207} %write{206,206}
temp	float	$tmp143	%read{208,208} %write{207,207}
temp	float	$tmp144	%read{209,209} %write{208,208}
temp	float	$tmp145	%read{212,212} %write{211,211}
temp	float	$tmp146	%read{215,215} %write{212,212}
temp	float	$tmp147	%read{214,214} %write{213,213}
temp	float	$tmp148	%read{215,215} %write{214,214}
temp	float	$tmp149	%read{216,216} %write{215,215}
temp	float	$tmp150	%read{218,218} %write{217,217}
temp	float	$tmp151	%read{221,221} %write{218,218}
temp	float	$tmp152	%read{220,220} %write{219,219}
temp	float	$tmp153	%read{221,221} %write{220,220}
temp	float	$tmp154	%read{222,222} %write{221,221}
temp	float	$tmp155	%read{224,224} %write{223,223}
temp	float	$tmp156	%read{226,226} %write{225,225}
temp	float	$tmp157	%read{230,230} %write{226,226}
temp	float	$tmp158	%read{229,229} %write{227,227}
temp	float	$tmp159	%read{229,229} %write{228,228}
temp	float	$tmp160	%read{230,230} %write{229,229}
temp	float	$tmp161	%read{231,231} %write{230,230}
temp	float	$tmp162	%read{233,233} %write{232,232}
temp	float	$tmp163	%read{235,235} %write{234,234}
temp	float	$tmp164	%read{237,237} %write{235,235}
temp	float	$tmp165	%read{237,237} %write{236,236}
temp	float	$tmp166	%read{240,240} %write{237,237}
temp	float	$tmp167	%read{239,239} %write{238,238}
temp	float	$tmp168	%read{240,240} %write{239,239}
temp	float	$tmp169	%read{241,241} %write{240,240}
temp	int	$tmp170	%read{243,243} %write{242,242}
temp	float	$tmp171	%read{245,245} %write{244,244}
temp	float	$tmp172	%read{248,248} %write{246,246}
temp	float	$tmp173	%read{248,248} %write{247,247}
temp	float	$tmp174	%read{249,249} %write{248,248}
temp	float	$tmp175	%read{254,254} %write{249,249}
temp	float	$tmp176	%read{252,252} %write{250,250}
temp	float	$tmp177	%read{252,252} %write{251,251}
temp	float	$tmp178	%read{253,253} %write{252,252}
temp	float	$tmp179	%read{254,254} %write{253,253}
temp	float	$tmp180	%read{255,255} %write{254,254}
temp	float	$tmp181	%read{257,257} %write{256,256}
temp	float	$tmp182	%read{259,259} %write{257,257}
temp	float	$tmp183	%read{259,259} %write{258,258}
temp	float	$tmp184	%read{260,260} %write{259,259}
temp	float	$tmp185	%read{265,265} %write{260,260}
temp	float	$tmp186	%read{263,263} %write{261,261}
temp	float	$tmp187	%read{263,263} %write{262,262}
temp	float	$tmp188	%read{264,264} %write{263,263}
temp	float	$tmp189	%read{265,265} %write{264,264}
temp	float	$tmp190	%read{266,266} %write{265,265}
code ___main___
# PxrTangentField.osl:175
#     int doRotation = 0;
	assign		doRotation $const1 	%filename{"PxrTangentField.osl"} %line{175} %argrw{"wr"}
# PxrTangentField.osl:176
#     if (isconnected(inputRotation))
	isconnected	$tmp1 inputRotation 	%line{176} %argrw{"wr"}
	if		$tmp1 4 4 	%argrw{"r"}
# PxrTangentField.osl:178
#         doRotation = 1;
	assign		doRotation $const2 	%line{178} %argrw{"wr"}
# PxrTangentField.osl:181
#     vector U = vector(1.0, 0.0, 0.0);
	assign		U $const3 	%line{181} %argrw{"wr"}
# PxrTangentField.osl:182
#     vector V = vector(0.0, 0.0, 0.0);
	assign		V $const4 	%line{182} %argrw{"wr"}
# PxrTangentField.osl:184
#     vector Tn = 0;
	assign		Tn $const1 	%line{184} %argrw{"wr"}
# PxrTangentField.osl:185
#     getattribute("builtin", "Tn", Tn);
	getattribute	$tmp2 $const5 $const6 Tn 	%line{185} %argrw{"wrrw"}
# PxrTangentField.osl:186
#     vector dPds = normalize(Tn);
	normalize	dPds Tn 	%line{186} %argrw{"wr"}
# PxrTangentField.osl:188
#     if (doRotation)
	if		doRotation 131 270 	%line{188} %argrw{"r"}
# PxrTangentField.osl:191
#         rotate(dPds, radians(rotationOffset + inputRotation * 360.0 * rotationRange), P, N,
	mul		$tmp4 inputRotation $const7 	%line{191} %argrw{"wrr"}
	mul		$tmp5 $tmp4 rotationRange 	%argrw{"wrr"}
	add		$tmp6 rotationOffset $tmp5 	%argrw{"wrr"}
	functioncall	$const8 15 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	mul		$tmp3 $tmp6 $const9 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
# PxrTangentField.osl:191
#         rotate(dPds, radians(rotationOffset + inputRotation * 360.0 * rotationRange), P, N,
	functioncall	$const10 131 	%filename{"PxrTangentField.osl"} %line{191} %argrw{"r"}
# PxrTangentField.osl:39
#     point p = P + invec;
	add		___345_p P dPds 	%line{39} %argrw{"wrr"}
# PxrTangentField.osl:40
#     point p1 = P;
	assign		___345_p1 P 	%line{40} %argrw{"wr"}
# PxrTangentField.osl:41
#     point p2 = P + Nn;
	add		___345_p2 P N 	%line{41} %argrw{"wrr"}
# PxrTangentField.osl:47
#     q1 = p - p1;
	sub		___345_q1 ___345_p ___345_p1 	%line{47} %argrw{"wrr"}
# PxrTangentField.osl:48
#     u = p2 - p1;
	sub		___345_u ___345_p2 ___345_p1 	%line{48} %argrw{"wrr"}
# PxrTangentField.osl:49
#     u = normalize(u);
	normalize	___345_u ___345_u 	%line{49} %argrw{"wr"}
# PxrTangentField.osl:50
#     d = sqrt(u[1] * u[1] + u[2] * u[2]);
	compref		$tmp7 ___345_u $const2 	%line{50} %argrw{"wrr"}
	compref		$tmp8 ___345_u $const2 	%argrw{"wrr"}
	mul		$tmp9 $tmp7 $tmp8 	%argrw{"wrr"}
	compref		$tmp10 ___345_u $const11 	%argrw{"wrr"}
	compref		$tmp11 ___345_u $const11 	%argrw{"wrr"}
	mul		$tmp12 $tmp10 $tmp11 	%argrw{"wrr"}
	add		$tmp13 $tmp9 $tmp12 	%argrw{"wrr"}
	sqrt		___345_d $tmp13 	%argrw{"wr"}
# PxrTangentField.osl:53
#     if (d != 0.0)
	neq		$tmp14 ___345_d $const12 	%line{53} %argrw{"wrr"}
	if		$tmp14 54 55 	%argrw{"r"}
# PxrTangentField.osl:55
#         q2[0] = q1[0];
	compref		$tmp15 ___345_q1 $const1 	%line{55} %argrw{"wrr"}
	compassign	___345_q2 $const1 $tmp15 	%argrw{"wrr"}
# PxrTangentField.osl:56
#         q2[1] = q1[1] * u[2] / d - q1[2] * u[1] / d;
	compref		$tmp16 ___345_q1 $const2 	%line{56} %argrw{"wrr"}
	compref		$tmp17 ___345_u $const11 	%argrw{"wrr"}
	mul		$tmp18 $tmp16 $tmp17 	%argrw{"wrr"}
	div		$tmp19 $tmp18 ___345_d 	%argrw{"wrr"}
	compref		$tmp20 ___345_q1 $const11 	%argrw{"wrr"}
	compref		$tmp21 ___345_u $const2 	%argrw{"wrr"}
	mul		$tmp22 $tmp20 $tmp21 	%argrw{"wrr"}
	div		$tmp23 $tmp22 ___345_d 	%argrw{"wrr"}
	sub		$tmp24 $tmp19 $tmp23 	%argrw{"wrr"}
	compassign	___345_q2 $const2 $tmp24 	%argrw{"wrr"}
# PxrTangentField.osl:57
#         q2[2] = q1[1] * u[1] / d + q1[2] * u[2] / d;
	compref		$tmp25 ___345_q1 $const2 	%line{57} %argrw{"wrr"}
	compref		$tmp26 ___345_u $const2 	%argrw{"wrr"}
	mul		$tmp27 $tmp25 $tmp26 	%argrw{"wrr"}
	div		$tmp28 $tmp27 ___345_d 	%argrw{"wrr"}
	compref		$tmp29 ___345_q1 $const11 	%argrw{"wrr"}
	compref		$tmp30 ___345_u $const11 	%argrw{"wrr"}
	mul		$tmp31 $tmp29 $tmp30 	%argrw{"wrr"}
	div		$tmp32 $tmp31 ___345_d 	%argrw{"wrr"}
	add		$tmp33 $tmp28 $tmp32 	%argrw{"wrr"}
	compassign	___345_q2 $const11 $tmp33 	%argrw{"wrr"}
# PxrTangentField.osl:61
#         q2 = q1;
	assign		___345_q2 ___345_q1 	%line{61} %argrw{"wr"}
# PxrTangentField.osl:65
#     q1[0] = q2[0] * d - q2[2] * u[0];
	compref		$tmp34 ___345_q2 $const1 	%line{65} %argrw{"wrr"}
	mul		$tmp35 $tmp34 ___345_d 	%argrw{"wrr"}
	compref		$tmp36 ___345_q2 $const11 	%argrw{"wrr"}
	compref		$tmp37 ___345_u $const1 	%argrw{"wrr"}
	mul		$tmp38 $tmp36 $tmp37 	%argrw{"wrr"}
	sub		$tmp39 $tmp35 $tmp38 	%argrw{"wrr"}
	compassign	___345_q1 $const1 $tmp39 	%argrw{"wrr"}
# PxrTangentField.osl:66
#     q1[1] = q2[1];
	compref		$tmp40 ___345_q2 $const2 	%line{66} %argrw{"wrr"}
	compassign	___345_q1 $const2 $tmp40 	%argrw{"wrr"}
# PxrTangentField.osl:67
#     q1[2] = q2[0] * u[0] + q2[2] * d;
	compref		$tmp41 ___345_q2 $const1 	%line{67} %argrw{"wrr"}
	compref		$tmp42 ___345_u $const1 	%argrw{"wrr"}
	mul		$tmp43 $tmp41 $tmp42 	%argrw{"wrr"}
	compref		$tmp44 ___345_q2 $const11 	%argrw{"wrr"}
	mul		$tmp45 $tmp44 ___345_d 	%argrw{"wrr"}
	add		$tmp46 $tmp43 $tmp45 	%argrw{"wrr"}
	compassign	___345_q1 $const11 $tmp46 	%argrw{"wrr"}
# PxrTangentField.osl:71
#     sincos(rad, sn, cs);
	sincos		$tmp3 ___345_sn ___345_cs 	%line{71} %argrw{"rww"}
# PxrTangentField.osl:72
#     q2[0] = q1[0] * cs - q1[1] * sn;
	compref		$tmp47 ___345_q1 $const1 	%line{72} %argrw{"wrr"}
	mul		$tmp48 $tmp47 ___345_cs 	%argrw{"wrr"}
	compref		$tmp49 ___345_q1 $const2 	%argrw{"wrr"}
	mul		$tmp50 $tmp49 ___345_sn 	%argrw{"wrr"}
	sub		$tmp51 $tmp48 $tmp50 	%argrw{"wrr"}
	compassign	___345_q2 $const1 $tmp51 	%argrw{"wrr"}
# PxrTangentField.osl:73
#     q2[1] = q1[0] * sn + q1[1] * cs;
	compref		$tmp52 ___345_q1 $const1 	%line{73} %argrw{"wrr"}
	mul		$tmp53 $tmp52 ___345_sn 	%argrw{"wrr"}
	compref		$tmp54 ___345_q1 $const2 	%argrw{"wrr"}
	mul		$tmp55 $tmp54 ___345_cs 	%argrw{"wrr"}
	add		$tmp56 $tmp53 $tmp55 	%argrw{"wrr"}
	compassign	___345_q2 $const2 $tmp56 	%argrw{"wrr"}
# PxrTangentField.osl:74
#     q2[2] = q1[2];
	compref		$tmp57 ___345_q1 $const11 	%line{74} %argrw{"wrr"}
	compassign	___345_q2 $const11 $tmp57 	%argrw{"wrr"}
# PxrTangentField.osl:77
#     q1[0] = q2[0] * d + q2[2] * u[0];
	compref		$tmp58 ___345_q2 $const1 	%line{77} %argrw{"wrr"}
	mul		$tmp59 $tmp58 ___345_d 	%argrw{"wrr"}
	compref		$tmp60 ___345_q2 $const11 	%argrw{"wrr"}
	compref		$tmp61 ___345_u $const1 	%argrw{"wrr"}
	mul		$tmp62 $tmp60 $tmp61 	%argrw{"wrr"}
	add		$tmp63 $tmp59 $tmp62 	%argrw{"wrr"}
	compassign	___345_q1 $const1 $tmp63 	%argrw{"wrr"}
# PxrTangentField.osl:78
#     q1[1] = q2[1];
	compref		$tmp64 ___345_q2 $const2 	%line{78} %argrw{"wrr"}
	compassign	___345_q1 $const2 $tmp64 	%argrw{"wrr"}
# PxrTangentField.osl:79
#     q1[2] = -q2[0] * u[0] + q2[2] * d;
	compref		$tmp65 ___345_q2 $const1 	%line{79} %argrw{"wrr"}
	neg		$tmp66 $tmp65 	%argrw{"wr"}
	compref		$tmp67 ___345_u $const1 	%argrw{"wrr"}
	mul		$tmp68 $tmp66 $tmp67 	%argrw{"wrr"}
	compref		$tmp69 ___345_q2 $const11 	%argrw{"wrr"}
	mul		$tmp70 $tmp69 ___345_d 	%argrw{"wrr"}
	add		$tmp71 $tmp68 $tmp70 	%argrw{"wrr"}
	compassign	___345_q1 $const11 $tmp71 	%argrw{"wrr"}
# PxrTangentField.osl:82
#     if (d != 0)
	neq		$tmp72 ___345_d $const1 	%line{82} %argrw{"wrr"}
	if		$tmp72 128 129 	%argrw{"r"}
# PxrTangentField.osl:84
#         q2[0] = q1[0];
	compref		$tmp73 ___345_q1 $const1 	%line{84} %argrw{"wrr"}
	compassign	___345_q2 $const1 $tmp73 	%argrw{"wrr"}
# PxrTangentField.osl:85
#         q2[1] = q1[1] * u[2] / d + q1[2] * u[1] / d;
	compref		$tmp74 ___345_q1 $const2 	%line{85} %argrw{"wrr"}
	compref		$tmp75 ___345_u $const11 	%argrw{"wrr"}
	mul		$tmp76 $tmp74 $tmp75 	%argrw{"wrr"}
	div		$tmp77 $tmp76 ___345_d 	%argrw{"wrr"}
	compref		$tmp78 ___345_q1 $const11 	%argrw{"wrr"}
	compref		$tmp79 ___345_u $const2 	%argrw{"wrr"}
	mul		$tmp80 $tmp78 $tmp79 	%argrw{"wrr"}
	div		$tmp81 $tmp80 ___345_d 	%argrw{"wrr"}
	add		$tmp82 $tmp77 $tmp81 	%argrw{"wrr"}
	compassign	___345_q2 $const2 $tmp82 	%argrw{"wrr"}
# PxrTangentField.osl:86
#         q2[2] = -q1[1] * u[1] / d + q1[2] * u[2] / d;
	compref		$tmp83 ___345_q1 $const2 	%line{86} %argrw{"wrr"}
	neg		$tmp84 $tmp83 	%argrw{"wr"}
	compref		$tmp85 ___345_u $const2 	%argrw{"wrr"}
	mul		$tmp86 $tmp84 $tmp85 	%argrw{"wrr"}
	div		$tmp87 $tmp86 ___345_d 	%argrw{"wrr"}
	compref		$tmp88 ___345_q1 $const11 	%argrw{"wrr"}
	compref		$tmp89 ___345_u $const11 	%argrw{"wrr"}
	mul		$tmp90 $tmp88 $tmp89 	%argrw{"wrr"}
	div		$tmp91 $tmp90 ___345_d 	%argrw{"wrr"}
	add		$tmp92 $tmp87 $tmp91 	%argrw{"wrr"}
	compassign	___345_q2 $const11 $tmp92 	%argrw{"wrr"}
# PxrTangentField.osl:90
#         q2 = q1;
	assign		___345_q2 ___345_q1 	%line{90} %argrw{"wr"}
# PxrTangentField.osl:94
#     q1 = q2 + p1;
	add		___345_q1 ___345_q2 ___345_p1 	%line{94} %argrw{"wrr"}
# PxrTangentField.osl:96
#     result = p1 - q1;
	sub		resultXYZ ___345_p1 ___345_q1 	%line{96} %argrw{"wrr"}
# PxrTangentField.osl:198
#         V[0] = inputVector[0];
	compref		$tmp93 inputVector $const1 	%line{198} %argrw{"wrr"}
	compassign	V $const1 $tmp93 	%argrw{"wrr"}
# PxrTangentField.osl:199
#         V[1] = inputVector[1];
	compref		$tmp94 inputVector $const2 	%line{199} %argrw{"wrr"}
	compassign	V $const2 $tmp94 	%argrw{"wrr"}
# PxrTangentField.osl:200
#         V[2] = 0.0;
	compassign	V $const11 $const12 	%line{200} %argrw{"wrr"}
# PxrTangentField.osl:201
#         if (centeredVectors)
	if		centeredVectors 143 143 	%line{201} %argrw{"r"}
# PxrTangentField.osl:203
#             V[0] -= 0.5;
	compref		$tmp95 V $const1 	%line{203} %argrw{"wrr"}
	sub		$tmp96 $tmp95 $const13 	%argrw{"wrr"}
	compassign	V $const1 $tmp96 	%argrw{"wrr"}
# PxrTangentField.osl:204
#             V[1] -= 0.5;
	compref		$tmp97 V $const2 	%line{204} %argrw{"wrr"}
	sub		$tmp98 $tmp97 $const13 	%argrw{"wrr"}
	compassign	V $const2 $tmp98 	%argrw{"wrr"}
# PxrTangentField.osl:206
#         V = normalize(V);
	normalize	V V 	%line{206} %argrw{"wr"}
# PxrTangentField.osl:207
#         float rad = acos(dot(U, V));
	dot		$tmp99 U V 	%line{207} %argrw{"wrr"}
	acos		___352_rad $tmp99 	%argrw{"wr"}
# PxrTangentField.osl:208
#         if (V[1] < 0.0) rad *= -1.0;
	compref		$tmp100 V $const2 	%line{208} %argrw{"wrr"}
	lt		$tmp101 $tmp100 $const12 	%argrw{"wrr"}
	if		$tmp101 150 150 	%argrw{"r"}
	mul		___352_rad ___352_rad $const14 	%argrw{"wrr"}
# PxrTangentField.osl:210
#         rotate(dPds, radians(rotationOffset) + rad * rotationRange, P, N, resultXYZ);
	functioncall	$const8 152 	%line{210} %argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:65
# float  radians (float x)  { return x*(M_PI/180.0); }
	mul		$tmp102 rotationOffset $const9 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{65} %argrw{"wrr"}
# PxrTangentField.osl:210
#         rotate(dPds, radians(rotationOffset) + rad * rotationRange, P, N, resultXYZ);
	mul		$tmp103 ___352_rad rotationRange 	%filename{"PxrTangentField.osl"} %line{210} %argrw{"wrr"}
	add		$tmp104 $tmp102 $tmp103 	%argrw{"wrr"}
	functioncall	$const10 270 	%argrw{"r"}
# PxrTangentField.osl:39
#     point p = P + invec;
	add		___345_p P dPds 	%line{39} %argrw{"wrr"}
# PxrTangentField.osl:40
#     point p1 = P;
	assign		___345_p1 P 	%line{40} %argrw{"wr"}
# PxrTangentField.osl:41
#     point p2 = P + Nn;
	add		___345_p2 P N 	%line{41} %argrw{"wrr"}
# PxrTangentField.osl:47
#     q1 = p - p1;
	sub		___345_q1 ___345_p ___345_p1 	%line{47} %argrw{"wrr"}
# PxrTangentField.osl:48
#     u = p2 - p1;
	sub		___345_u ___345_p2 ___345_p1 	%line{48} %argrw{"wrr"}
# PxrTangentField.osl:49
#     u = normalize(u);
	normalize	___345_u ___345_u 	%line{49} %argrw{"wr"}
# PxrTangentField.osl:50
#     d = sqrt(u[1] * u[1] + u[2] * u[2]);
	compref		$tmp105 ___345_u $const2 	%line{50} %argrw{"wrr"}
	compref		$tmp106 ___345_u $const2 	%argrw{"wrr"}
	mul		$tmp107 $tmp105 $tmp106 	%argrw{"wrr"}
	compref		$tmp108 ___345_u $const11 	%argrw{"wrr"}
	compref		$tmp109 ___345_u $const11 	%argrw{"wrr"}
	mul		$tmp110 $tmp108 $tmp109 	%argrw{"wrr"}
	add		$tmp111 $tmp107 $tmp110 	%argrw{"wrr"}
	sqrt		___345_d $tmp111 	%argrw{"wr"}
# PxrTangentField.osl:53
#     if (d != 0.0)
	neq		$tmp112 ___345_d $const12 	%line{53} %argrw{"wrr"}
	if		$tmp112 193 194 	%argrw{"r"}
# PxrTangentField.osl:55
#         q2[0] = q1[0];
	compref		$tmp113 ___345_q1 $const1 	%line{55} %argrw{"wrr"}
	compassign	___345_q2 $const1 $tmp113 	%argrw{"wrr"}
# PxrTangentField.osl:56
#         q2[1] = q1[1] * u[2] / d - q1[2] * u[1] / d;
	compref		$tmp114 ___345_q1 $const2 	%line{56} %argrw{"wrr"}
	compref		$tmp115 ___345_u $const11 	%argrw{"wrr"}
	mul		$tmp116 $tmp114 $tmp115 	%argrw{"wrr"}
	div		$tmp117 $tmp116 ___345_d 	%argrw{"wrr"}
	compref		$tmp118 ___345_q1 $const11 	%argrw{"wrr"}
	compref		$tmp119 ___345_u $const2 	%argrw{"wrr"}
	mul		$tmp120 $tmp118 $tmp119 	%argrw{"wrr"}
	div		$tmp121 $tmp120 ___345_d 	%argrw{"wrr"}
	sub		$tmp122 $tmp117 $tmp121 	%argrw{"wrr"}
	compassign	___345_q2 $const2 $tmp122 	%argrw{"wrr"}
# PxrTangentField.osl:57
#         q2[2] = q1[1] * u[1] / d + q1[2] * u[2] / d;
	compref		$tmp123 ___345_q1 $const2 	%line{57} %argrw{"wrr"}
	compref		$tmp124 ___345_u $const2 	%argrw{"wrr"}
	mul		$tmp125 $tmp123 $tmp124 	%argrw{"wrr"}
	div		$tmp126 $tmp125 ___345_d 	%argrw{"wrr"}
	compref		$tmp127 ___345_q1 $const11 	%argrw{"wrr"}
	compref		$tmp128 ___345_u $const11 	%argrw{"wrr"}
	mul		$tmp129 $tmp127 $tmp128 	%argrw{"wrr"}
	div		$tmp130 $tmp129 ___345_d 	%argrw{"wrr"}
	add		$tmp131 $tmp126 $tmp130 	%argrw{"wrr"}
	compassign	___345_q2 $const11 $tmp131 	%argrw{"wrr"}
# PxrTangentField.osl:61
#         q2 = q1;
	assign		___345_q2 ___345_q1 	%line{61} %argrw{"wr"}
# PxrTangentField.osl:65
#     q1[0] = q2[0] * d - q2[2] * u[0];
	compref		$tmp132 ___345_q2 $const1 	%line{65} %argrw{"wrr"}
	mul		$tmp133 $tmp132 ___345_d 	%argrw{"wrr"}
	compref		$tmp134 ___345_q2 $const11 	%argrw{"wrr"}
	compref		$tmp135 ___345_u $const1 	%argrw{"wrr"}
	mul		$tmp136 $tmp134 $tmp135 	%argrw{"wrr"}
	sub		$tmp137 $tmp133 $tmp136 	%argrw{"wrr"}
	compassign	___345_q1 $const1 $tmp137 	%argrw{"wrr"}
# PxrTangentField.osl:66
#     q1[1] = q2[1];
	compref		$tmp138 ___345_q2 $const2 	%line{66} %argrw{"wrr"}
	compassign	___345_q1 $const2 $tmp138 	%argrw{"wrr"}
# PxrTangentField.osl:67
#     q1[2] = q2[0] * u[0] + q2[2] * d;
	compref		$tmp139 ___345_q2 $const1 	%line{67} %argrw{"wrr"}
	compref		$tmp140 ___345_u $const1 	%argrw{"wrr"}
	mul		$tmp141 $tmp139 $tmp140 	%argrw{"wrr"}
	compref		$tmp142 ___345_q2 $const11 	%argrw{"wrr"}
	mul		$tmp143 $tmp142 ___345_d 	%argrw{"wrr"}
	add		$tmp144 $tmp141 $tmp143 	%argrw{"wrr"}
	compassign	___345_q1 $const11 $tmp144 	%argrw{"wrr"}
# PxrTangentField.osl:71
#     sincos(rad, sn, cs);
	sincos		$tmp104 ___345_sn ___345_cs 	%line{71} %argrw{"rww"}
# PxrTangentField.osl:72
#     q2[0] = q1[0] * cs - q1[1] * sn;
	compref		$tmp145 ___345_q1 $const1 	%line{72} %argrw{"wrr"}
	mul		$tmp146 $tmp145 ___345_cs 	%argrw{"wrr"}
	compref		$tmp147 ___345_q1 $const2 	%argrw{"wrr"}
	mul		$tmp148 $tmp147 ___345_sn 	%argrw{"wrr"}
	sub		$tmp149 $tmp146 $tmp148 	%argrw{"wrr"}
	compassign	___345_q2 $const1 $tmp149 	%argrw{"wrr"}
# PxrTangentField.osl:73
#     q2[1] = q1[0] * sn + q1[1] * cs;
	compref		$tmp150 ___345_q1 $const1 	%line{73} %argrw{"wrr"}
	mul		$tmp151 $tmp150 ___345_sn 	%argrw{"wrr"}
	compref		$tmp152 ___345_q1 $const2 	%argrw{"wrr"}
	mul		$tmp153 $tmp152 ___345_cs 	%argrw{"wrr"}
	add		$tmp154 $tmp151 $tmp153 	%argrw{"wrr"}
	compassign	___345_q2 $const2 $tmp154 	%argrw{"wrr"}
# PxrTangentField.osl:74
#     q2[2] = q1[2];
	compref		$tmp155 ___345_q1 $const11 	%line{74} %argrw{"wrr"}
	compassign	___345_q2 $const11 $tmp155 	%argrw{"wrr"}
# PxrTangentField.osl:77
#     q1[0] = q2[0] * d + q2[2] * u[0];
	compref		$tmp156 ___345_q2 $const1 	%line{77} %argrw{"wrr"}
	mul		$tmp157 $tmp156 ___345_d 	%argrw{"wrr"}
	compref		$tmp158 ___345_q2 $const11 	%argrw{"wrr"}
	compref		$tmp159 ___345_u $const1 	%argrw{"wrr"}
	mul		$tmp160 $tmp158 $tmp159 	%argrw{"wrr"}
	add		$tmp161 $tmp157 $tmp160 	%argrw{"wrr"}
	compassign	___345_q1 $const1 $tmp161 	%argrw{"wrr"}
# PxrTangentField.osl:78
#     q1[1] = q2[1];
	compref		$tmp162 ___345_q2 $const2 	%line{78} %argrw{"wrr"}
	compassign	___345_q1 $const2 $tmp162 	%argrw{"wrr"}
# PxrTangentField.osl:79
#     q1[2] = -q2[0] * u[0] + q2[2] * d;
	compref		$tmp163 ___345_q2 $const1 	%line{79} %argrw{"wrr"}
	neg		$tmp164 $tmp163 	%argrw{"wr"}
	compref		$tmp165 ___345_u $const1 	%argrw{"wrr"}
	mul		$tmp166 $tmp164 $tmp165 	%argrw{"wrr"}
	compref		$tmp167 ___345_q2 $const11 	%argrw{"wrr"}
	mul		$tmp168 $tmp167 ___345_d 	%argrw{"wrr"}
	add		$tmp169 $tmp166 $tmp168 	%argrw{"wrr"}
	compassign	___345_q1 $const11 $tmp169 	%argrw{"wrr"}
# PxrTangentField.osl:82
#     if (d != 0)
	neq		$tmp170 ___345_d $const1 	%line{82} %argrw{"wrr"}
	if		$tmp170 267 268 	%argrw{"r"}
# PxrTangentField.osl:84
#         q2[0] = q1[0];
	compref		$tmp171 ___345_q1 $const1 	%line{84} %argrw{"wrr"}
	compassign	___345_q2 $const1 $tmp171 	%argrw{"wrr"}
# PxrTangentField.osl:85
#         q2[1] = q1[1] * u[2] / d + q1[2] * u[1] / d;
	compref		$tmp172 ___345_q1 $const2 	%line{85} %argrw{"wrr"}
	compref		$tmp173 ___345_u $const11 	%argrw{"wrr"}
	mul		$tmp174 $tmp172 $tmp173 	%argrw{"wrr"}
	div		$tmp175 $tmp174 ___345_d 	%argrw{"wrr"}
	compref		$tmp176 ___345_q1 $const11 	%argrw{"wrr"}
	compref		$tmp177 ___345_u $const2 	%argrw{"wrr"}
	mul		$tmp178 $tmp176 $tmp177 	%argrw{"wrr"}
	div		$tmp179 $tmp178 ___345_d 	%argrw{"wrr"}
	add		$tmp180 $tmp175 $tmp179 	%argrw{"wrr"}
	compassign	___345_q2 $const2 $tmp180 	%argrw{"wrr"}
# PxrTangentField.osl:86
#         q2[2] = -q1[1] * u[1] / d + q1[2] * u[2] / d;
	compref		$tmp181 ___345_q1 $const2 	%line{86} %argrw{"wrr"}
	neg		$tmp182 $tmp181 	%argrw{"wr"}
	compref		$tmp183 ___345_u $const2 	%argrw{"wrr"}
	mul		$tmp184 $tmp182 $tmp183 	%argrw{"wrr"}
	div		$tmp185 $tmp184 ___345_d 	%argrw{"wrr"}
	compref		$tmp186 ___345_q1 $const11 	%argrw{"wrr"}
	compref		$tmp187 ___345_u $const11 	%argrw{"wrr"}
	mul		$tmp188 $tmp186 $tmp187 	%argrw{"wrr"}
	div		$tmp189 $tmp188 ___345_d 	%argrw{"wrr"}
	add		$tmp190 $tmp185 $tmp189 	%argrw{"wrr"}
	compassign	___345_q2 $const11 $tmp190 	%argrw{"wrr"}
# PxrTangentField.osl:90
#         q2 = q1;
	assign		___345_q2 ___345_q1 	%line{90} %argrw{"wr"}
# PxrTangentField.osl:94
#     q1 = q2 + p1;
	add		___345_q1 ___345_q2 ___345_p1 	%line{94} %argrw{"wrr"}
# PxrTangentField.osl:96
#     result = p1 - q1;
	sub		resultXYZ ___345_p1 ___345_q1 	%line{96} %argrw{"wrr"}
# PxrTangentField.osl:213
#     resultXYZ = normalize(resultXYZ);
	normalize	resultXYZ resultXYZ 	%line{213} %argrw{"wr"}
# PxrTangentField.osl:215
#     resultX = resultXYZ[0];
	compref		resultX resultXYZ $const1 	%line{215} %argrw{"wrr"}
# PxrTangentField.osl:216
#     resultY = resultXYZ[1];
	compref		resultY resultXYZ $const2 	%line{216} %argrw{"wrr"}
# PxrTangentField.osl:217
#     resultZ = resultXYZ[2];
	compref		resultZ resultXYZ $const11 	%line{217} %argrw{"wrr"}
	end
