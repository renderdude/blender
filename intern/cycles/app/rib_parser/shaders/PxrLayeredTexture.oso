OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.@PROJECT_VERSION_TWEAK@"dev"
# options: -DOSX -I/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/common -I/Users/Shared/build/ratbuild/rmanshare/RIS/pattern/osl -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl -o /Users/Shared/build/ratbuild/rmanshare/_built/osxSonoma_x86-64_clang15_external_release/osl/PxrLayeredTexture.osl/obj/PxrLayeredTexture.oso
shader PxrLayeredTexture	%meta{int,rfm_nodeid,1200384} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/texture"} %meta{string,rfh_classification,"Pattern/Texture"} %meta{string,help,"Read a texture file and composite it with another PxrLayeredTexture.<br>This is the most efficient way to layer textures."} 
param	int	mute	0		%meta{string,widget,"checkBox"} %meta{string,help,"Make this node invisible in the compositing chain.<br><br>mute (int)"} %meta{int,connectable,0} %meta{string,label,"Mute"}  %read{68,68} %write{2147483647,-1}
param	int	doNotOptimize	0		%meta{string,widget,"null"} %meta{string,help,"Make this node much slower than it should be.<br><br>doNotOptimize (int)"} %meta{int,connectable,0}  %read{64,64} %write{2147483647,-1}
param	struct TexOverlay	textureOverlay			%meta{string,help,"textureOverlay (struct)"} %meta{string,label,"Texture Overlay"} %meta{string,readOnly,"True"}  %read{44,44} %write{2147483647,-1} %struct{"TexOverlay"} %structfields{c,a} %structfieldtypes{"cf"} %structnfields{2}
param	color	textureOverlay.c	0 0 0		%meta{string,help,"textureOverlay (struct)"} %meta{string,label,"Texture Overlay"} %meta{string,readOnly,"True"}  %read{74,393} %write{2147483647,-1} %mystruct{textureOverlay} %mystructfield{0}
param	float	textureOverlay.a	0		%meta{string,help,"textureOverlay (struct)"} %meta{string,label,"Texture Overlay"} %meta{string,readOnly,"True"}  %read{59,416} %write{2147483647,-1} %mystruct{textureOverlay} %mystructfield{1}
param	float	maskValue	1		%meta{string,widget,"default"} %meta{string,page,"Mask"} %meta{int,page_open,1} %meta{string,help,"An optional mask for this texture. This will scale the mask<br>texture.<br><br>maskValue (float)"} %meta{string,label,"Mask Value"} %meta{float,max,1} %meta{float,min,0} %meta{int,slider,1}  %read{316,326} %write{2147483647,-1}
param	string	maskTexture	""		%meta{string,widget,"assetIdInput"} %meta{string,page,"Mask"} %meta{string,help,"If your mask is a texture, this is the optimal way to mask it.<br>Your mask texture will be scaled by the maskValue parameter.<br><br>maskTexture (string)"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,label,"Mask Texture"}  %read{22,29} %write{2147483647,-1}
param	int	maskChannel	0		%meta{string,widget,"default"} %meta{string,page,"Mask"} %meta{string,help,"First channel offset to be looked up for the mask texture.<br><br>maskChannel (int)"} %meta{int,connectable,0} %meta{string,label,"Mask Channel"}  %read{105,105} %write{2147483647,-1}
param	int	maskAtlasStyle	0		%meta{string,widget,"mapper"} %meta{string,page,"Mask"} %meta{string,help,"[DEPRECATED]: maskAtlasStyle (int)"} %meta{string,options,"None:0|UDIM (Mari):1|UV Tile Base-1 (Mudbox):2|UV Tile Base-0 (Zbrush):3"} %meta{int,connectable,0} %meta{string,label,"Mask Atlas Style"}  %read{23,40} %write{2147483647,-1}
param	float	missingMask	0		%meta{string,widget,"default"} %meta{string,page,"Mask"} %meta{string,help,"If the texture can not be read - i.e. a missing tile in a texture<br>atlas - This value will be used.<br><br>missingMask (float)"} %meta{string,label,"Missing Mask"} %meta{float,max,1} %meta{float,min,0} %meta{int,slider,1}  %read{108,108} %write{2147483647,-1}
param	string	filename	""		%meta{string,widget,"assetIdInput"} %meta{string,page,"Texture"} %meta{int,page_open,1} %meta{string,help,"filename (string)"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,label,"Filename"}  %read{0,7} %write{2147483647,-1}
param	int	firstChannel	0		%meta{string,widget,"default"} %meta{string,page,"Texture"} %meta{string,help,"First channel offset to be looked up for Filename.<br><br>firstChannel (int)"} %meta{int,connectable,0} %meta{string,label,"First Channel Offset"}  %read{330,330} %write{2147483647,-1}
param	int	atlasStyle	0		%meta{string,widget,"mapper"} %meta{string,page,"Texture"} %meta{string,help,"[DEPRECATED]: Specify which atlas style.<br><br>atlasStyle (int)"} %meta{string,options,"None:0|UDIM (Mari):1|UV Tile Base-1 (Mudbox):2|UV Tile Base-0 (Zbrush):3"} %meta{int,connectable,0} %meta{string,label,"Atlas Style"}  %read{1,90} %write{2147483647,-1}
param	int	invertT	1		%meta{string,widget,"checkBox"} %meta{string,page,"Texture"} %meta{string,help,"invertT (int)"} %meta{int,connectable,0} %meta{string,label,"Invert T"}  %read{95,95} %write{2147483647,-1}
param	int	smoothRayDerivs	1		%meta{string,widget,"checkBox"} %meta{string,page,"Texture"} %meta{string,help,"Compute texture filter widths at ray hit points in a more robust manner, providing consistent widths independent of the rotation of the underlying surface."} %meta{int,connectable,0} %meta{string,label,"Smooth Ray Derivs"}  %read{129,129} %write{2147483647,-1}
param	struct Manifold	manifold			%meta{string,widget,"default"} %meta{string,page,"Texture"} %meta{string,help,"manifold (struct)"} %meta{string,label,"Manifold"}  %read{82,82} %write{2147483647,-1} %struct{"Manifold"} %structfields{Q,QN,Qradius} %structfieldtypes{"pnf"} %structnfields{3}
param	point	manifold.Q	0 0 0		%meta{string,widget,"default"} %meta{string,page,"Texture"} %meta{string,help,"manifold (struct)"} %meta{string,label,"Manifold"}  %read{86,88} %write{2147483647,-1} %mystruct{manifold} %mystructfield{0} %derivs
param	normal	manifold.QN	0 0 1		%meta{string,widget,"default"} %meta{string,page,"Texture"} %meta{string,help,"manifold (struct)"} %meta{string,label,"Manifold"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifold} %mystructfield{1}
param	float	manifold.Qradius	0		%meta{string,widget,"default"} %meta{string,page,"Texture"} %meta{string,help,"manifold (struct)"} %meta{string,label,"Manifold"}  %read{2147483647,-1} %write{2147483647,-1} %mystruct{manifold} %mystructfield{2}
param	int	filter	1		%meta{string,widget,"mapper"} %meta{string,page,"Texture.Filtering And Defaults"} %meta{int,page_open,1} %meta{string,help,"filter (int)"} %meta{string,options,"Nearest:0|Box:1|Bilinear:2|Bspline:3|Gaussian:6|Lagrangian:7"} %meta{int,connectable,0} %meta{string,label,"Filter"}  %read{98,101} %write{2147483647,-1}
param	float	blur	0		%meta{string,widget,"default"} %meta{string,page,"Texture.Filtering And Defaults"} %meta{string,help,"blur (float)"} %meta{string,label,"Blur"}  %read{106,106} %write{2147483647,-1}
param	int	lerp	1		%meta{string,widget,"checkBox"} %meta{string,page,"Texture.Filtering And Defaults"} %meta{string,help,"lerp (int)"} %meta{int,connectable,0} %meta{string,label,"Mip Interpolate"}  %read{2147483647,-1} %write{2147483647,-1}
param	color	missingColor	1 0 1		%meta{string,widget,"color"} %meta{string,page,"Texture.Filtering And Defaults"} %meta{string,help,"missingColor (color)"} %meta{string,label,"Missing Color"}  %read{107,107} %write{2147483647,-1}
param	float	missingAlpha	1		%meta{string,widget,"default"} %meta{string,page,"Texture.Filtering And Defaults"} %meta{string,help,"missingAlpha (float)"} %meta{string,label,"Missing Alpha"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	mipBias	0		%meta{string,page,"Texture.Filtering And Defaults.Advanced Texture Settings"} %meta{int,page_open,1} %meta{string,help,"Offset the selected MIP level picked by the renderer.<br>Positive values will bias toward lower resolution MIPs.<br>Negative values will bias toward higher resolution MIPs.<br><br>mipBias (int)"} %meta{int,connectable,0} %meta{string,label,"MIP bias"} %meta{int,slidermax,10} %meta{int,slidermin,-10}  %read{242,252} %write{2147483647,-1}
param	float	maxResolution	0		%meta{string,widget,"mapper"} %meta{string,page,"Texture.Filtering And Defaults.Advanced Texture Settings"} %meta{string,help,"Clamp the resolution to a maximum value.<br><br>maxResolution (float)"} %meta{string,options,"Unlimited:0|32:32|64:64|128:128|256:256|512:512|1024:1024|2048:2048|4096:4096|8192:8192"} %meta{string,label,"Max Resolution"}  %read{245,259} %write{2147483647,-1}
param	int	optimizeIndirect	1		%meta{string,widget,"checkBox"} %meta{string,page,"Texture.Filtering And Defaults.Advanced Texture Settings"} %meta{string,help,"Make indirect hits use a box filter rather than the selected one.<br><br>optimizeIndirect (int)"} %meta{int,connectable,0} %meta{string,label,"Optimize Indirect"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	linearize	0		%meta{string,widget,"checkBox"} %meta{string,page,"Color Correct"} %meta{int,page_open,1} %meta{string,help,"linearize (int)"} %meta{int,connectable,0} %meta{string,label,"Linearize"}  %read{362,362} %write{2147483647,-1}
param	color	colorTint	1 1 1		%meta{string,widget,"color"} %meta{string,page,"Color Correct"} %meta{string,help,"coloint (color)"} %meta{string,label,"Color Tint"}  %read{386,386} %write{2147483647,-1}
param	color	colorOffset	0 0 0		%meta{string,widget,"color"} %meta{string,page,"Color Correct"} %meta{string,help,"colorOffset (color)"} %meta{string,label,"Color Offset"}  %read{387,387} %write{2147483647,-1}
oparam	color	resultRGB	0 0 0		%meta{string,help,"resultRGB (color)"}  %read{372,408} %write{76,393}
oparam	float	resultR	0		%meta{string,help,"resultR (float)"}  %read{2147483647,-1} %write{77,394}
oparam	float	resultG	0		%meta{string,help,"resultG (float)"}  %read{2147483647,-1} %write{78,395}
oparam	float	resultB	0		%meta{string,help,"resultB (float)"}  %read{2147483647,-1} %write{79,396}
oparam	float	resultA	0		%meta{string,help,"resultA (float)"}  %read{45,56} %write{80,405}
oparam	struct TexOverlay	resultOverlay			%meta{string,help,"resultOverlay (struct)"}  %read{50,406} %write{2147483647,-1} %struct{"TexOverlay"} %structfields{c,a} %structfieldtypes{"cf"} %structnfields{2}
oparam	color	resultOverlay.c	0 0 0		%meta{string,help,"resultOverlay (struct)"}  %read{76,79} %write{74,408} %mystruct{resultOverlay} %mystructfield{0}
oparam	float	resultOverlay.a	0		%meta{string,help,"resultOverlay (struct)"}  %read{54,417} %write{75,417} %mystruct{resultOverlay} %mystructfield{1}
global	vector	dPdu	%read{130,178} %write{2147483647,-1}
global	vector	dPdv	%read{131,169} %write{2147483647,-1}
local	string	___438_interp	%read{109,109} %write{100,104}
local	int	___438_params.firstchannel	%read{111,111} %write{105,105} %mystruct{___438_params} %mystructfield{0}
local	float	___438_params.blur	%read{112,112} %write{106,106} %mystruct{___438_params} %mystructfield{1}
local	color	___438_params.missingcolor	%read{113,113} %write{107,107} %mystruct{___438_params} %mystructfield{2}
local	float	___438_params.missingalpha	%read{114,114} %write{108,108} %mystruct{___438_params} %mystructfield{3}
local	string	___438_params.interp	%read{115,115} %write{109,109} %mystruct{___438_params} %mystructfield{4}
local	float	___438_params.width	%read{116,116} %write{110,110} %mystruct{___438_params} %mystructfield{5}
local	float	___440_coords.s	%read{234,234} %write{213,227} %mystruct{___440_coords} %mystructfield{0}
local	float	___440_coords.t	%read{235,235} %write{214,228} %mystruct{___440_coords} %mystructfield{1}
local	float	___440_coords.dsdx	%read{236,236} %write{215,229} %mystruct{___440_coords} %mystructfield{2}
local	float	___440_coords.dtdx	%read{237,237} %write{216,230} %mystruct{___440_coords} %mystructfield{3}
local	float	___440_coords.dsdy	%read{238,238} %write{217,231} %mystruct{___440_coords} %mystructfield{4}
local	float	___440_coords.dtdy	%read{239,239} %write{218,232} %mystruct{___440_coords} %mystructfield{5}
local	float	___440_coords.blur	%read{240,240} %write{219,233} %mystruct{___440_coords} %mystructfield{6}
local	float	___440__tt	%read{136,232} %write{126,127} %derivs
local	float	___440_blur0	%read{219,233} %write{128,128}
local	float	___441_du	%read{133,137} %write{130,130}
local	float	___441_dv	%read{135,139} %write{131,131}
local	float	___441_dsdu	%read{140,155} %write{133,133}
local	float	___441_dsdv	%read{141,169} %write{135,135}
local	float	___441_dtdu	%read{141,178} %write{137,137}
local	float	___441_dtdv	%read{140,159} %write{139,139}
local	float	___441_det	%read{143,152} %write{142,142}
local	vector	___441_dPds	%read{161,187} %write{148,182}
local	vector	___441_dPdt	%read{170,189} %write{152,186}
local	float	___441_filterwidthS	%read{207,224} %write{188,207}
local	float	___441_filterwidthT	%read{208,223} %write{190,208}
local	float	___441_dxss	%read{195,209} %write{191,191}
local	float	___441_dxtt	%read{201,205} %write{192,192}
local	float	___441_dyss	%read{196,210} %write{193,193}
local	float	___441_dytt	%read{202,206} %write{194,194}
local	float	___441_signS	%read{207,207} %write{199,200}
local	float	___441_signT	%read{208,208} %write{205,206}
local	int	___441_unmixedDerivsAreDominant	%read{212,212} %write{211,211}
local	int	___448_foo	%read{367,367} %write{365,366}
local	int	___451_i	%read{372,385} %write{371,385}
local	float	___455_eps	%read{270,295} %write{269,269}
local	float	___455_eps2	%read{277,292} %write{270,270}
local	float	___455_dxlen2	%read{277,294} %write{273,273}
local	float	___455_dylen2	%read{279,292} %write{276,276}
local	float	___458_scale	%read{287,290} %write{286,286}
local	float	___459_scale	%read{297,299} %write{295,295}
local	float	___460_bias	%read{255,255} %write{253,254}
local	float	___461_minwidth	%read{313,313} %write{259,259}
local	float	___461_swidth	%read{310,311} %write{303,303}
local	float	___461_twidth	%read{310,311} %write{306,306}
local	int	___461_conservative_filter	%read{309,309} %write{307,308}
local	float	___461_filterwidth	%read{312,314} %write{310,313}
local	int	___462_exists	%read{319,321} %write{318,320}
local	int	___463_success	%read{343,343} %write{332,342}
local	int	___463_nchannels	%read{345,351} %write{333,342}
local	color	___463_finalResult	%read{361,361} %write{334,360}
local	color	___463_result	%read{337,359} %write{336,336}
local	color	___466_missingalpha	%read{325,325} %write{324,324}
local	string	___467_UDIMfilename	%read{21,43} %write{4,42}
local	string	___467_separator	%read{7,29} %write{5,27}
local	string[2]	___467_tokens	%read{10,33} %write{6,29}
local	int	___467_nTokens	%read{8,30} %write{7,29}
local	string	___468_baseFileName	%read{14,42} %write{10,32}
local	string	___468_extension	%read{14,42} %write{11,33}
local	string	finalFilename	%read{336,342} %write{0,21}
local	string	finalMaskFilename	%read{318,325} %write{22,43}
local	int	hasOverlay	%read{57,389} %write{44,44}
local	int	needResultA	%read{47,397} %write{45,45}
local	float	texAlpha	%read{400,413} %write{46,56}
local	int	overlayFullyOpaque	%read{70,70} %write{67,67}
local	int	hasManifold	%read{83,93} %write{82,82}
local	float[2]	st	%read{117,118} %write{85,89} %derivs
local	int	doInvertT	%read{120,120} %write{92,95}
local	int	txparams.firstchannel	%read{325,336} %write{111,330} %mystruct{txparams} %mystructfield{0}
local	float	txparams.blur	%read{312,335} %write{112,112} %mystruct{txparams} %mystructfield{1}
local	color	txparams.missingcolor	%read{336,337} %write{113,113} %mystruct{txparams} %mystructfield{2}
local	float	txparams.missingalpha	%read{324,324} %write{114,114} %mystruct{txparams} %mystructfield{3}
local	string	txparams.interp	%read{325,336} %write{115,115} %mystruct{txparams} %mystructfield{4}
local	float	txparams.width	%read{255,336} %write{116,315} %mystruct{txparams} %mystructfield{5}
local	float	txcoords.s	%read{325,336} %write{234,234} %mystruct{txcoords} %mystructfield{0}
local	float	txcoords.t	%read{325,336} %write{235,235} %mystruct{txcoords} %mystructfield{1}
local	float	txcoords.dsdx	%read{261,336} %write{236,288} %mystruct{txcoords} %mystructfield{2}
local	float	txcoords.dtdx	%read{263,336} %write{237,291} %mystruct{txcoords} %mystructfield{3}
local	float	txcoords.dsdy	%read{265,336} %write{238,298} %mystruct{txcoords} %mystructfield{4}
local	float	txcoords.dtdy	%read{267,336} %write{239,300} %mystruct{txcoords} %mystructfield{5}
local	float	txcoords.blur	%read{335,335} %write{240,314} %mystruct{txcoords} %mystructfield{6}
local	float	finalMask	%read{326,410} %write{316,329}
const	int	$const1	0		%read{1,394} %write{2147483647,-1}
temp	int	$tmp1	%read{2,2} %write{1,1}
const	string	$const2	"PxrAtlasRename"		%read{3,25} %write{2147483647,-1}
const	string	$const3	"_MAPID_"		%read{5,27} %write{2147483647,-1}
const	string[2]	$const4	"" "" 		%read{6,28} %write{2147483647,-1}
const	int	$const5	2		%read{7,396} %write{2147483647,-1}
temp	int	$tmp2	%read{9,9} %write{8,8}
const	int	$const6	1		%read{11,395} %write{2147483647,-1}
temp	int	$tmp3	%read{13,13} %write{12,12}
const	string	$const7	"%s%s%s"		%read{14,42} %write{2147483647,-1}
const	string	$const8	"<UDIM>"		%read{14,36} %write{2147483647,-1}
temp	int	$tmp4	%read{16,16} %write{15,15}
const	string	$const9	"_u<U>_v<V>"		%read{17,39} %write{2147483647,-1}
const	int	$const10	3		%read{18,372} %write{2147483647,-1}
temp	int	$tmp5	%read{19,19} %write{18,18}
const	string	$const11	"_u<u>_v<v>"		%read{20,42} %write{2147483647,-1}
temp	int	$tmp6	%read{24,24} %write{23,23}
temp	int	$tmp7	%read{31,31} %write{30,30}
temp	int	$tmp8	%read{35,35} %write{34,34}
temp	int	$tmp9	%read{38,38} %write{37,37}
temp	int	$tmp10	%read{41,41} %write{40,40}
const	int	$const12	-1		%read{46,46} %write{2147483647,-1}
temp	int	$tmp11	%read{48,48} %write{47,47}
temp	int	$tmp12	%read{49,53} %write{48,52}
temp	int	$tmp13	%read{51,51} %write{50,50}
temp	int	$tmp14	%read{52,52} %write{51,51}
temp	int	$tmp15	%read{58,62} %write{57,61}
const	float	$const13	1		%read{59,414} %write{2147483647,-1}
temp	int	$tmp16	%read{60,60} %write{59,59}
temp	int	$tmp17	%read{61,61} %write{60,60}
temp	int	$tmp18	%read{63,67} %write{62,66}
temp	int	$tmp19	%read{65,65} %write{64,64}
temp	int	$tmp20	%read{66,66} %write{65,65}
temp	int	$tmp21	%read{69,72} %write{68,71}
temp	int	$tmp22	%read{71,71} %write{70,70}
temp	int	$tmp23	%read{84,84} %write{83,83}
temp	int	$tmp24	%read{2147483647,-1} %write{85,85}
const	string	$const14	"primvar"		%read{85,85} %write{2147483647,-1}
const	string	$const15	"st"		%read{85,85} %write{2147483647,-1}
temp	float	$tmp25	%read{87,87} %write{86,86} %derivs
temp	float	$tmp26	%read{89,89} %write{88,88} %derivs
temp	int	$tmp27	%read{91,91} %write{90,90}
const	string	$const16	"initTxParams"		%read{96,97} %write{2147483647,-1}
temp	int	$tmp28	%read{99,99} %write{98,98}
const	string	$const17	"closest"		%read{100,100} %write{2147483647,-1}
temp	int	$tmp29	%read{102,102} %write{101,101}
const	string	$const18	"linear"		%read{103,103} %write{2147483647,-1}
const	string	$const19	"smartcubic"		%read{104,104} %write{2147483647,-1}
temp	float	$tmp30	%read{132,231} %write{117,117} %derivs
temp	float	$tmp31	%read{122,127} %write{118,118} %derivs
const	string	$const20	"initTxCoords"		%read{119,119} %write{2147483647,-1}
const	string	$const21	"invertCoord"		%read{121,121} %write{2147483647,-1}
temp	float	$tmp32	%read{123,123} %write{122,122} %derivs
temp	float	$tmp33	%read{126,126} %write{123,123} %derivs
temp	float	$tmp34	%read{125,125} %write{124,124} %derivs
temp	float	$tmp35	%read{126,126} %write{125,125} %derivs
const	float	$const22	0		%read{128,400} %write{2147483647,-1}
temp	float	$tmp36	%read{133,133} %write{132,132}
temp	float	$tmp37	%read{135,135} %write{134,134}
temp	float	$tmp38	%read{137,137} %write{136,136}
temp	float	$tmp39	%read{139,139} %write{138,138}
temp	float	$tmp40	%read{142,142} %write{140,140}
temp	float	$tmp41	%read{142,142} %write{141,141}
temp	int	$tmp42	%read{144,144} %write{143,143}
temp	vector	$tmp43	%read{147,147} %write{145,145}
temp	vector	$tmp44	%read{147,147} %write{146,146}
temp	vector	$tmp45	%read{148,148} %write{147,147}
temp	vector	$tmp46	%read{151,151} %write{149,149}
temp	vector	$tmp47	%read{151,151} %write{150,150}
temp	vector	$tmp48	%read{152,152} %write{151,151}
temp	int	$tmp49	%read{154,154} %write{153,153}
const	vector	$const23	0 0 0		%read{156,160} %write{2147483647,-1}
temp	int	$tmp50	%read{158,158} %write{157,157}
temp	float	$tmp51	%read{162,162} %write{161,161}
temp	int	$tmp52	%read{163,163} %write{162,162}
temp	int	$tmp53	%read{164,168} %write{163,167}
temp	int	$tmp54	%read{166,166} %write{165,165}
temp	int	$tmp55	%read{167,167} %write{166,166}
temp	float	$tmp56	%read{171,171} %write{170,170}
temp	int	$tmp57	%read{172,172} %write{171,171}
temp	int	$tmp58	%read{173,177} %write{172,176}
temp	int	$tmp59	%read{175,175} %write{174,174}
temp	int	$tmp60	%read{176,176} %write{175,175}
temp	float	$tmp61	%read{180,180} %write{179,179}
temp	int	$tmp62	%read{181,181} %write{180,180}
temp	float	$tmp63	%read{184,184} %write{183,183}
temp	int	$tmp64	%read{185,185} %write{184,184}
temp	float	$tmp65	%read{188,188} %write{187,187}
temp	float	$tmp66	%read{190,190} %write{189,189}
temp	float	$tmp67	%read{197,197} %write{195,195}
temp	float	$tmp68	%read{197,197} %write{196,196}
temp	int	$tmp69	%read{198,198} %write{197,197}
temp	float	$tmp70	%read{203,203} %write{201,201}
temp	float	$tmp71	%read{203,203} %write{202,202}
temp	int	$tmp72	%read{204,204} %write{203,203}
temp	float	$tmp73	%read{211,211} %write{209,209}
temp	float	$tmp74	%read{211,211} %write{210,210}
temp	int	$tmp75	%read{243,243} %write{242,242}
temp	int	$tmp76	%read{244,248} %write{243,247}
temp	int	$tmp77	%read{246,246} %write{245,245}
temp	int	$tmp78	%read{247,247} %write{246,246}
const	string	$const24	"PxrTxMipControls"		%read{249,249} %write{2147483647,-1}
temp	int	$tmp79	%read{251,251} %write{250,250}
const	float	$const25	2		%read{253,253} %write{2147483647,-1}
temp	float	$tmp80	%read{253,253} %write{252,252}
temp	int	$tmp81	%read{258,258} %write{257,257}
const	string	$const26	"adjust_width"		%read{260,260} %write{2147483647,-1}
const	float	$const27	9.99999994e-09		%read{269,269} %write{2147483647,-1}
temp	float	$tmp82	%read{273,273} %write{271,271}
temp	float	$tmp83	%read{273,273} %write{272,272}
temp	float	$tmp84	%read{276,276} %write{274,274}
temp	float	$tmp85	%read{276,276} %write{275,275}
temp	int	$tmp86	%read{278,278} %write{277,277}
temp	int	$tmp87	%read{280,280} %write{279,279}
temp	float	$tmp88	%read{286,286} %write{285,285}
temp	float	$tmp89	%read{290,290} %write{289,289}
temp	int	$tmp90	%read{293,293} %write{292,292}
temp	float	$tmp91	%read{295,295} %write{294,294}
temp	float	$tmp92	%read{297,297} %write{296,296}
temp	float	$tmp93	%read{303,303} %write{301,301}
temp	float	$tmp94	%read{303,303} %write{302,302}
temp	float	$tmp95	%read{306,306} %write{304,304}
temp	float	$tmp96	%read{306,306} %write{305,305}
temp	int	$tmp97	%read{2147483647,-1} %write{308,308}
const	string	$const28	"context"		%read{308,308} %write{2147483647,-1}
const	string	$const29	"reyesGrid"		%read{308,308} %write{2147483647,-1}
temp	int	$tmp98	%read{322,322} %write{321,321}
const	string	$const30	"PxrTextureIsValid"		%read{317,317} %write{2147483647,-1}
const	string	$const31	""		%read{318,318} %write{2147483647,-1}
temp	int	$tmp99	%read{2147483647,-1} %write{320,320}
const	string	$const32	"exists"		%read{320,320} %write{2147483647,-1}
const	string	$const33	"PxrTextureLookup"		%read{323,331} %write{2147483647,-1}
const	string	$const34	"firstchannel"		%read{325,336} %write{2147483647,-1}
const	string	$const35	"blur"		%read{325,336} %write{2147483647,-1}
const	string	$const36	"missingcolor"		%read{325,336} %write{2147483647,-1}
const	string	$const37	"interp"		%read{325,336} %write{2147483647,-1}
const	string	$const38	"width"		%read{325,336} %write{2147483647,-1}
temp	float	$tmp100	%read{328,328} %write{326,326}
const	string	$const39	"clamp"		%read{327,327} %write{2147483647,-1}
temp	float	$tmp101	%read{329,329} %write{328,328}
temp	float	$tmp102	%read{336,336} %write{335,335}
temp	int	$tmp103	%read{338,338} %write{337,337}
const	string	$const40	"channels"		%read{342,342} %write{2147483647,-1}
temp	int	$tmp104	%read{344,347} %write{343,346}
temp	int	$tmp105	%read{346,346} %write{345,345}
temp	int	$tmp106	%read{349,349} %write{348,348}
temp	int	$tmp107	%read{350,354} %write{349,353}
temp	int	$tmp108	%read{352,352} %write{351,351}
temp	int	$tmp109	%read{353,353} %write{352,352}
temp	float	$tmp110	%read{356,356} %write{355,355}
temp	float	$tmp111	%read{358,358} %write{357,357}
temp	float	$tmp112	%read{360,360} %write{359,359}
const	string	$const41	"PxrLinearizeSRGB"		%read{363,363} %write{2147483647,-1}
temp	int	$tmp113	%read{368,368} %write{367,367}
const	string	$const42	"ocioEnabled"		%read{364,364} %write{2147483647,-1}
temp	int	$tmp114	%read{2147483647,-1} %write{366,366}
const	string	$const43	"user:ocioenabled"		%read{366,366} %write{2147483647,-1}
temp	int	$tmp115	%read{369,369} %write{368,368}
temp	int	$tmp116	%read{372,385} %write{372,385}
temp	int	$tmp117	%read{370,385} %write{371,385}
temp	float	$tmp118	%read{372,385} %write{372,385}
const	float	$const44	0.0404499993		%read{375,375} %write{2147483647,-1}
temp	int	$tmp119	%read{372,385} %write{372,385}
temp	float	$tmp120	%read{372,385} %write{372,385}
const	float	$const45	0.0773993805		%read{378,378} %write{2147483647,-1}
temp	float	$tmp121	%read{372,385} %write{372,385}
temp	float	$tmp122	%read{372,385} %write{372,385}
temp	float	$tmp123	%read{372,385} %write{372,385}
const	float	$const46	0.0549999997		%read{381,381} %write{2147483647,-1}
temp	float	$tmp124	%read{372,385} %write{372,385}
const	float	$const47	0.947867274		%read{382,382} %write{2147483647,-1}
temp	float	$tmp125	%read{372,385} %write{372,385}
const	float	$const48	2.4000001		%read{383,383} %write{2147483647,-1}
temp	color	$tmp126	%read{388,388} %write{386,386}
temp	color	$tmp127	%read{388,388} %write{387,387}
temp	float	$tmp128	%read{391,391} %write{390,390}
temp	color	$tmp129	%read{392,392} %write{391,391}
temp	color	$tmp130	%read{393,393} %write{392,392}
temp	float	$tmp131	%read{399,399} %write{398,398}
temp	float	$tmp132	%read{404,404} %write{399,399}
temp	float	$tmp133	%read{404,404} %write{402,403}
temp	int	$tmp134	%read{401,401} %write{400,400}
temp	float	$tmp135	%read{405,405} %write{404,404}
temp	int	$tmp136	%read{407,407} %write{406,406}
temp	float	$tmp137	%read{410,410} %write{409,409}
temp	float	$tmp138	%read{415,415} %write{410,410}
temp	float	$tmp139	%read{415,415} %write{413,414}
temp	int	$tmp140	%read{412,412} %write{411,411}
temp	float	$tmp141	%read{416,416} %write{415,415}
code ___main___
# PxrLayeredTexture.osl:294
#     string finalFilename = filename;
	assign		finalFilename filename 	%filename{"PxrLayeredTexture.osl"} %line{294} %argrw{"wr"}
# PxrLayeredTexture.osl:295
#     if (atlasStyle > 0)
	gt		$tmp1 atlasStyle $const1 	%line{295} %argrw{"wrr"}
	if		$tmp1 22 22 	%argrw{"r"}
# PxrLayeredTexture.osl:297
#         finalFilename = PxrAtlasRename(filename, atlasStyle);
	functioncall	$const2 22 	%line{297} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:376
#     string UDIMfilename = filename;
	assign		___467_UDIMfilename filename 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{376} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:377
#     string separator = "_MAPID_";
	assign		___467_separator $const3 	%line{377} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:378
#     string tokens[2] = {"",""};
	assign		___467_tokens $const4 	%line{378} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:380
#     int nTokens = split(filename, tokens, separator, 2);
	split		___467_nTokens filename ___467_tokens ___467_separator $const5 	%line{380} %argrw{"wrwrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:383
#     if (nTokens == 2)
	eq		$tmp2 ___467_nTokens $const5 	%line{383} %argrw{"wrr"}
	if		$tmp2 21 21 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:385
#         string baseFileName = tokens[0];
	aref		___468_baseFileName ___467_tokens $const1 	%line{385} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:386
#         string extension = tokens[1];
	aref		___468_extension ___467_tokens $const6 	%line{386} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:388
#         if (atlasStyle == 1) {
	eq		$tmp3 atlasStyle $const6 	%line{388} %argrw{"wrr"}
	if		$tmp3 15 21 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:389
#             UDIMfilename = format("%s%s%s",baseFileName,"<UDIM>",extension);
	format		___467_UDIMfilename $const7 ___468_baseFileName $const8 ___468_extension 	%line{389} %argrw{"wrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:391
#         else if (atlasStyle == 2)
	eq		$tmp4 atlasStyle $const5 	%line{391} %argrw{"wrr"}
	if		$tmp4 18 21 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:393
#             UDIMfilename = format("%s%s%s",baseFileName,"_u<U>_v<V>",extension);
	format		___467_UDIMfilename $const7 ___468_baseFileName $const9 ___468_extension 	%line{393} %argrw{"wrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:395
#         else if (atlasStyle == 3)
	eq		$tmp5 atlasStyle $const10 	%line{395} %argrw{"wrr"}
	if		$tmp5 21 21 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:397
#             UDIMfilename = format("%s%s%s",baseFileName,"_u<u>_v<v>",extension);
	format		___467_UDIMfilename $const7 ___468_baseFileName $const11 ___468_extension 	%line{397} %argrw{"wrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:400
#     return UDIMfilename;
	assign		finalFilename ___467_UDIMfilename 	%line{400} %argrw{"wr"}
# PxrLayeredTexture.osl:301
#     string finalMaskFilename = maskTexture;
	assign		finalMaskFilename maskTexture 	%filename{"PxrLayeredTexture.osl"} %line{301} %argrw{"wr"}
# PxrLayeredTexture.osl:302
#     if (maskAtlasStyle > 0)
	gt		$tmp6 maskAtlasStyle $const1 	%line{302} %argrw{"wrr"}
	if		$tmp6 44 44 	%argrw{"r"}
# PxrLayeredTexture.osl:304
#         finalMaskFilename = PxrAtlasRename(maskTexture, maskAtlasStyle);
	functioncall	$const2 44 	%line{304} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:376
#     string UDIMfilename = filename;
	assign		___467_UDIMfilename maskTexture 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{376} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:377
#     string separator = "_MAPID_";
	assign		___467_separator $const3 	%line{377} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:378
#     string tokens[2] = {"",""};
	assign		___467_tokens $const4 	%line{378} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:380
#     int nTokens = split(filename, tokens, separator, 2);
	split		___467_nTokens maskTexture ___467_tokens ___467_separator $const5 	%line{380} %argrw{"wrwrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:383
#     if (nTokens == 2)
	eq		$tmp7 ___467_nTokens $const5 	%line{383} %argrw{"wrr"}
	if		$tmp7 43 43 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:385
#         string baseFileName = tokens[0];
	aref		___468_baseFileName ___467_tokens $const1 	%line{385} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:386
#         string extension = tokens[1];
	aref		___468_extension ___467_tokens $const6 	%line{386} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:388
#         if (atlasStyle == 1) {
	eq		$tmp8 maskAtlasStyle $const6 	%line{388} %argrw{"wrr"}
	if		$tmp8 37 43 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:389
#             UDIMfilename = format("%s%s%s",baseFileName,"<UDIM>",extension);
	format		___467_UDIMfilename $const7 ___468_baseFileName $const8 ___468_extension 	%line{389} %argrw{"wrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:391
#         else if (atlasStyle == 2)
	eq		$tmp9 maskAtlasStyle $const5 	%line{391} %argrw{"wrr"}
	if		$tmp9 40 43 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:393
#             UDIMfilename = format("%s%s%s",baseFileName,"_u<U>_v<V>",extension);
	format		___467_UDIMfilename $const7 ___468_baseFileName $const9 ___468_extension 	%line{393} %argrw{"wrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:395
#         else if (atlasStyle == 3)
	eq		$tmp10 maskAtlasStyle $const10 	%line{395} %argrw{"wrr"}
	if		$tmp10 43 43 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:397
#             UDIMfilename = format("%s%s%s",baseFileName,"_u<u>_v<v>",extension);
	format		___467_UDIMfilename $const7 ___468_baseFileName $const11 ___468_extension 	%line{397} %argrw{"wrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:400
#     return UDIMfilename;
	assign		finalMaskFilename ___467_UDIMfilename 	%line{400} %argrw{"wr"}
# PxrLayeredTexture.osl:308
#     int hasOverlay = isconnected(textureOverlay);
	isconnected	hasOverlay textureOverlay 	%filename{"PxrLayeredTexture.osl"} %line{308} %argrw{"wr"}
# PxrLayeredTexture.osl:309
#     int needResultA = isconnected(resultA);
	isconnected	needResultA resultA 	%line{309} %argrw{"wr"}
# PxrLayeredTexture.osl:314
#     float texAlpha = -1;
	assign		texAlpha $const12 	%line{314} %argrw{"wr"}
# PxrLayeredTexture.osl:315
#     if (!needResultA && isconnected(resultOverlay))
	eq		$tmp11 needResultA $const1 	%line{315} %argrw{"wrr"}
	neq		$tmp12 $tmp11 $const1 	%argrw{"wrr"}
	if		$tmp12 53 53 	%argrw{"r"}
	isconnected	$tmp13 resultOverlay 	%argrw{"wr"}
	neq		$tmp14 $tmp13 $const1 	%argrw{"wrr"}
	assign		$tmp12 $tmp14 	%argrw{"wr"}
	if		$tmp12 55 57 	%argrw{"r"}
# PxrLayeredTexture.osl:316
#         texAlpha = resultOverlay.a;
	assign		texAlpha resultOverlay.a 	%line{316} %argrw{"wr"}
# PxrLayeredTexture.osl:317
#     else if (needResultA)
	if		needResultA 57 57 	%line{317} %argrw{"r"}
# PxrLayeredTexture.osl:318
#         texAlpha = resultA;
	assign		texAlpha resultA 	%line{318} %argrw{"wr"}
# PxrLayeredTexture.osl:322
#     int overlayFullyOpaque = hasOverlay && textureOverlay.a == 1.0 && doNotOptimize == 0;
	neq		$tmp15 hasOverlay $const1 	%line{322} %argrw{"wrr"}
	if		$tmp15 62 62 	%argrw{"r"}
	eq		$tmp16 textureOverlay.a $const13 	%argrw{"wrr"}
	neq		$tmp17 $tmp16 $const1 	%argrw{"wrr"}
	assign		$tmp15 $tmp17 	%argrw{"wr"}
	neq		$tmp18 $tmp15 $const1 	%argrw{"wrr"}
	if		$tmp18 67 67 	%argrw{"r"}
	eq		$tmp19 doNotOptimize $const1 	%argrw{"wrr"}
	neq		$tmp20 $tmp19 $const1 	%argrw{"wrr"}
	assign		$tmp18 $tmp20 	%argrw{"wr"}
	assign		overlayFullyOpaque $tmp18 	%argrw{"wr"}
# PxrLayeredTexture.osl:323
#     if (mute || overlayFullyOpaque)
	neq		$tmp21 mute $const1 	%line{323} %argrw{"wrr"}
	if		$tmp21 70 72 	%argrw{"r"}
	neq		$tmp22 overlayFullyOpaque $const1 	%argrw{"wrr"}
	assign		$tmp21 $tmp22 	%argrw{"wr"}
	if		$tmp21 82 82 	%argrw{"r"}
# PxrLayeredTexture.osl:325
#         if (hasOverlay)
	if		hasOverlay 81 81 	%line{325} %argrw{"r"}
# PxrLayeredTexture.osl:327
#             resultOverlay = textureOverlay;
	assign		resultOverlay.c textureOverlay.c 	%line{327} %argrw{"wr"}
	assign		resultOverlay.a textureOverlay.a 	%argrw{"wr"}
# PxrLayeredTexture.osl:328
#             resultRGB = resultOverlay.c;
	assign		resultRGB resultOverlay.c 	%line{328} %argrw{"wr"}
# PxrLayeredTexture.osl:329
#             resultR = resultOverlay.c[0];
	compref		resultR resultOverlay.c $const1 	%line{329} %argrw{"wrr"}
# PxrLayeredTexture.osl:330
#             resultG = resultOverlay.c[1];
	compref		resultG resultOverlay.c $const6 	%line{330} %argrw{"wrr"}
# PxrLayeredTexture.osl:331
#             resultB = resultOverlay.c[2];
	compref		resultB resultOverlay.c $const5 	%line{331} %argrw{"wrr"}
# PxrLayeredTexture.osl:332
#             resultA = resultOverlay.a;
	assign		resultA resultOverlay.a 	%line{332} %argrw{"wr"}
# PxrLayeredTexture.osl:334
#         return;
	exit	%line{334}
# PxrLayeredTexture.osl:340
#     int hasManifold = isconnected(manifold);
	isconnected	hasManifold manifold 	%line{340} %argrw{"wr"}
# PxrLayeredTexture.osl:342
#     if (!hasManifold)
	eq		$tmp23 hasManifold $const1 	%line{342} %argrw{"wrr"}
	if		$tmp23 86 90 	%argrw{"r"}
# PxrLayeredTexture.osl:344
#         getattribute("primvar", "st", st);
	getattribute	$tmp24 $const14 $const15 st 	%line{344} %argrw{"wrrw"}
# PxrLayeredTexture.osl:348
#         st[0] = manifold.Q[0];
	compref		$tmp25 manifold.Q $const1 	%line{348} %argrw{"wrr"}
	aassign		st $const1 $tmp25 	%argrw{"wrr"}
# PxrLayeredTexture.osl:349
#         st[1] = manifold.Q[1];
	compref		$tmp26 manifold.Q $const6 	%line{349} %argrw{"wrr"}
	aassign		st $const6 $tmp26 	%argrw{"wrr"}
# PxrLayeredTexture.osl:355
#     int doInvertT = atlasStyle > 0 ? 1 : hasManifold ? 0 : invertT;
	gt		$tmp27 atlasStyle $const1 	%line{355} %argrw{"wrr"}
	if		$tmp27 93 96 	%argrw{"r"}
	assign		doInvertT $const6 	%argrw{"wr"}
	if		hasManifold 95 96 	%argrw{"r"}
	assign		doInvertT $const1 	%argrw{"wr"}
	assign		doInvertT invertT 	%argrw{"wr"}
# PxrLayeredTexture.osl:356
#     TxParams txparams = initTxParams(maskChannel, blur,
	functioncall	$const16 117 	%line{356} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:83
#     return initTxParams(firstchannel, blur, missingcolor, missingalpha, filter, 1.0);
	functioncall	$const16 117 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{83} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:68
#     if (filter == 0)
	eq		$tmp28 filter $const1 	%line{68} %argrw{"wrr"}
	if		$tmp28 101 105 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:69
#         interp = "closest";
	assign		___438_interp $const17 	%line{69} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:70
#     else if (filter == 2)
	eq		$tmp29 filter $const5 	%line{70} %argrw{"wrr"}
	if		$tmp29 104 105 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:71
#         interp = "linear";
	assign		___438_interp $const18 	%line{71} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:73
#         interp = "smartcubic";
	assign		___438_interp $const19 	%line{73} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:75
#     TxParams params = {firstchannel, blur, missingcolor, missingalpha,
	assign		___438_params.firstchannel maskChannel 	%line{75} %argrw{"wr"}
	assign		___438_params.blur blur 	%argrw{"wr"}
	assign		___438_params.missingcolor missingColor 	%argrw{"wr"}
	assign		___438_params.missingalpha missingMask 	%argrw{"wr"}
	assign		___438_params.interp ___438_interp 	%argrw{"wr"}
	assign		___438_params.width $const13 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:77
#     return params;
	assign		txparams.firstchannel ___438_params.firstchannel 	%line{77} %argrw{"wr"}
	assign		txparams.blur ___438_params.blur 	%argrw{"wr"}
	assign		txparams.missingcolor ___438_params.missingcolor 	%argrw{"wr"}
	assign		txparams.missingalpha ___438_params.missingalpha 	%argrw{"wr"}
	assign		txparams.interp ___438_params.interp 	%argrw{"wr"}
	assign		txparams.width ___438_params.width 	%argrw{"wr"}
# PxrLayeredTexture.osl:358
#     TxCoords txcoords = initTxCoords(st[0], st[1], doInvertT, smoothRayDerivs);
	aref		$tmp30 st $const1 	%filename{"PxrLayeredTexture.osl"} %line{358} %argrw{"wrr"}
	aref		$tmp31 st $const6 	%argrw{"wrr"}
	functioncall	$const20 242 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:110
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		doInvertT 127 128 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{110} %argrw{"r"}
	functioncall	$const21 127 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp32 $tmp31 	%line{48} %argrw{"wr"}
	add		$tmp33 $tmp32 $const13 	%argrw{"wrr"}
	floor		$tmp34 $tmp31 	%argrw{"wr"}
	sub		$tmp35 $tmp31 $tmp34 	%argrw{"wrr"}
	sub		___440__tt $tmp33 $tmp35 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:110
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___440__tt $tmp31 	%line{110} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:111
#     float blur0 = 0.0;
	assign		___440_blur0 $const22 	%line{111} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:113
#     if (smoothRayDerivs)
	if		smoothRayDerivs 227 234 	%line{113} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:115
#         float du = length(dPdu);  // width of the ray hit footprint projected onto the dPdu direction
	length		___441_du dPdu 	%line{115} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:116
#         float dv = length(dPdv);  // width of the ray hit footprint projected onto the dPdv direction
	length		___441_dv dPdv 	%line{116} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#         float dsdu = Dx(ss) * du;  // change in s over ray hit footprint
	Dx		$tmp36 $tmp30 	%line{118} %argrw{"wr"} %argderivs{1}
	mul		___441_dsdu $tmp36 ___441_du 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#         float dsdv = Dy(ss) * dv;
	Dy		$tmp37 $tmp30 	%line{119} %argrw{"wr"} %argderivs{1}
	mul		___441_dsdv $tmp37 ___441_dv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#         float dtdu = Dx(_tt) * du;  // change in t over ray hit footprint
	Dx		$tmp38 ___440__tt 	%line{120} %argrw{"wr"} %argderivs{1}
	mul		___441_dtdu $tmp38 ___441_du 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:121
#         float dtdv = Dy(_tt) * dv;
	Dy		$tmp39 ___440__tt 	%line{121} %argrw{"wr"} %argderivs{1}
	mul		___441_dtdv $tmp39 ___441_dv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:148
#         float det = dsdu * dtdv - dtdu * dsdv;
	mul		$tmp40 ___441_dsdu ___441_dtdv 	%line{148} %argrw{"wrr"}
	mul		$tmp41 ___441_dtdu ___441_dsdv 	%argrw{"wrr"}
	sub		___441_det $tmp40 $tmp41 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:150
#         if (det != 0.0)
	neq		$tmp42 ___441_det $const22 	%line{150} %argrw{"wrr"}
	if		$tmp42 153 187 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:152
#             dPds = (dPdu*dtdv - dPdv*dtdu) / det;
	mul		$tmp43 dPdu ___441_dtdv 	%line{152} %argrw{"wrr"}
	mul		$tmp44 dPdv ___441_dtdu 	%argrw{"wrr"}
	sub		$tmp45 $tmp43 $tmp44 	%argrw{"wrr"}
	div		___441_dPds $tmp45 ___441_det 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#             dPdt = (dPdv*dsdu - dPdu*dsdv) / det;
	mul		$tmp46 dPdv ___441_dsdu 	%line{153} %argrw{"wrr"}
	mul		$tmp47 dPdu ___441_dsdv 	%argrw{"wrr"}
	sub		$tmp48 $tmp46 $tmp47 	%argrw{"wrr"}
	div		___441_dPdt $tmp48 ___441_det 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#             dPds = (dsdu != 0.0) ? (dPdu / dsdu) : vector(0.0);
	neq		$tmp49 ___441_dsdu $const22 	%line{157} %argrw{"wrr"}
	if		$tmp49 156 157 	%argrw{"r"}
	div		___441_dPds dPdu ___441_dsdu 	%argrw{"wrr"}
	assign		___441_dPds $const23 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:158
#             dPdt = (dtdv != 0.0) ? (dPdv / dtdv) : vector(0.0);
	neq		$tmp50 ___441_dtdv $const22 	%line{158} %argrw{"wrr"}
	if		$tmp50 160 161 	%argrw{"r"}
	div		___441_dPdt dPdv ___441_dtdv 	%argrw{"wrr"}
	assign		___441_dPdt $const23 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:160
#             if (length(dPds) == 0.0 && dsdv != 0.0) dPds = dPdv / dsdv;
	length		$tmp51 ___441_dPds 	%line{160} %argrw{"wr"}
	eq		$tmp52 $tmp51 $const22 	%argrw{"wrr"}
	neq		$tmp53 $tmp52 $const1 	%argrw{"wrr"}
	if		$tmp53 168 168 	%argrw{"r"}
	neq		$tmp54 ___441_dsdv $const22 	%argrw{"wrr"}
	neq		$tmp55 $tmp54 $const1 	%argrw{"wrr"}
	assign		$tmp53 $tmp55 	%argrw{"wr"}
	if		$tmp53 170 170 	%argrw{"r"}
	div		___441_dPds dPdv ___441_dsdv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:161
#             if (length(dPdt) == 0.0 && dtdu != 0.0) dPdt = dPdu / dtdu;
	length		$tmp56 ___441_dPdt 	%line{161} %argrw{"wr"}
	eq		$tmp57 $tmp56 $const22 	%argrw{"wrr"}
	neq		$tmp58 $tmp57 $const1 	%argrw{"wrr"}
	if		$tmp58 177 177 	%argrw{"r"}
	neq		$tmp59 ___441_dtdu $const22 	%argrw{"wrr"}
	neq		$tmp60 $tmp59 $const1 	%argrw{"wrr"}
	assign		$tmp58 $tmp60 	%argrw{"wr"}
	if		$tmp58 179 179 	%argrw{"r"}
	div		___441_dPdt dPdu ___441_dtdu 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#             if (length(dPds) == 0.0) dPds = dPdt;
	length		$tmp61 ___441_dPds 	%line{163} %argrw{"wr"}
	eq		$tmp62 $tmp61 $const22 	%argrw{"wrr"}
	if		$tmp62 183 183 	%argrw{"r"}
	assign		___441_dPds ___441_dPdt 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:164
#             if (length(dPdt) == 0.0) dPdt = dPds;
	length		$tmp63 ___441_dPdt 	%line{164} %argrw{"wr"}
	eq		$tmp64 $tmp63 $const22 	%argrw{"wrr"}
	if		$tmp64 187 187 	%argrw{"r"}
	assign		___441_dPdt ___441_dPds 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         float filterwidthS = 1.0 / length(dPds);
	length		$tmp65 ___441_dPds 	%line{170} %argrw{"wr"}
	div		___441_filterwidthS $const13 $tmp65 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         float filterwidthT = 1.0 / length(dPdt);
	length		$tmp66 ___441_dPdt 	%line{171} %argrw{"wr"}
	div		___441_filterwidthT $const13 $tmp66 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:176
#         float dxss = Dx(ss);
	Dx		___441_dxss $tmp30 	%line{176} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:177
#         float dxtt = Dx(_tt);
	Dx		___441_dxtt ___440__tt 	%line{177} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:178
#         float dyss = Dy(ss);
	Dy		___441_dyss $tmp30 	%line{178} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:179
#         float dytt = Dy(_tt);
	Dy		___441_dytt ___440__tt 	%line{179} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:181
#         float signS = (abs(dxss) > abs(dyss)) ? sign(dxss) : sign(dyss);  // dominant sign (+/-) for ds
	abs		$tmp67 ___441_dxss 	%line{181} %argrw{"wr"}
	abs		$tmp68 ___441_dyss 	%argrw{"wr"}
	gt		$tmp69 $tmp67 $tmp68 	%argrw{"wrr"}
	if		$tmp69 200 201 	%argrw{"r"}
	sign		___441_signS ___441_dxss 	%argrw{"wr"}
	sign		___441_signS ___441_dyss 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:182
#         float signT = (abs(dxtt) > abs(dytt)) ? sign(dxtt) : sign(dytt);  // dominant sign (+/-) for dt
	abs		$tmp70 ___441_dxtt 	%line{182} %argrw{"wr"}
	abs		$tmp71 ___441_dytt 	%argrw{"wr"}
	gt		$tmp72 $tmp70 $tmp71 	%argrw{"wrr"}
	if		$tmp72 206 207 	%argrw{"r"}
	sign		___441_signT ___441_dxtt 	%argrw{"wr"}
	sign		___441_signT ___441_dytt 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:184
#         filterwidthS *= signS;
	mul		___441_filterwidthS ___441_filterwidthS ___441_signS 	%line{184} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#         filterwidthT *= signT;
	mul		___441_filterwidthT ___441_filterwidthT ___441_signT 	%line{185} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#         int unmixedDerivsAreDominant = (abs(dxss) > abs(dyss));
	abs		$tmp73 ___441_dxss 	%line{187} %argrw{"wr"}
	abs		$tmp74 ___441_dyss 	%argrw{"wr"}
	gt		___441_unmixedDerivsAreDominant $tmp73 $tmp74 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:188
#         if (unmixedDerivsAreDominant)
	if		___441_unmixedDerivsAreDominant 220 227 	%line{188} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:190
#             coords = TxCoords( ss, _tt, filterwidthS, 0.0, 0.0, filterwidthT, blur0 );
	assign		___440_coords.s $tmp30 	%line{190} %argrw{"wr"}
	assign		___440_coords.t ___440__tt 	%argrw{"wr"}
	assign		___440_coords.dsdx ___441_filterwidthS 	%argrw{"wr"}
	assign		___440_coords.dtdx $const22 	%argrw{"wr"}
	assign		___440_coords.dsdy $const22 	%argrw{"wr"}
	assign		___440_coords.dtdy ___441_filterwidthT 	%argrw{"wr"}
	assign		___440_coords.blur ___440_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:194
#             coords = TxCoords( ss, _tt, 0.0, filterwidthT, filterwidthS, 0.0, blur0 );
	assign		___440_coords.s $tmp30 	%line{194} %argrw{"wr"}
	assign		___440_coords.t ___440__tt 	%argrw{"wr"}
	assign		___440_coords.dsdx $const22 	%argrw{"wr"}
	assign		___440_coords.dtdx ___441_filterwidthT 	%argrw{"wr"}
	assign		___440_coords.dsdy ___441_filterwidthS 	%argrw{"wr"}
	assign		___440_coords.dtdy $const22 	%argrw{"wr"}
	assign		___440_coords.blur ___440_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:200
#         coords = TxCoords( ss, _tt, Dx(ss), Dx(_tt), Dy(ss), Dy(_tt), blur0 );
	assign		___440_coords.s $tmp30 	%line{200} %argrw{"wr"}
	assign		___440_coords.t ___440__tt 	%argrw{"wr"}
	Dx		___440_coords.dsdx $tmp30 	%argrw{"wr"} %argderivs{1}
	Dx		___440_coords.dtdx ___440__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___440_coords.dsdy $tmp30 	%argrw{"wr"} %argderivs{1}
	Dy		___440_coords.dtdy ___440__tt 	%argrw{"wr"} %argderivs{1}
	assign		___440_coords.blur ___440_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:203
#     return coords;
	assign		txcoords.s ___440_coords.s 	%line{203} %argrw{"wr"}
	assign		txcoords.t ___440_coords.t 	%argrw{"wr"}
	assign		txcoords.dsdx ___440_coords.dsdx 	%argrw{"wr"}
	assign		txcoords.dtdx ___440_coords.dtdx 	%argrw{"wr"}
	assign		txcoords.dsdy ___440_coords.dsdy 	%argrw{"wr"}
	assign		txcoords.dtdy ___440_coords.dtdy 	%argrw{"wr"}
	assign		txcoords.blur ___440_coords.blur 	%argrw{"wr"}
	return
# PxrLayeredTexture.osl:359
#     if (mipBias != 0 || maxResolution != 0)
	neq		$tmp75 mipBias $const1 	%filename{"PxrLayeredTexture.osl"} %line{359} %argrw{"wrr"}
	neq		$tmp76 $tmp75 $const1 	%argrw{"wrr"}
	if		$tmp76 245 248 	%argrw{"r"}
	neq		$tmp77 maxResolution $const1 	%argrw{"wrr"}
	neq		$tmp78 $tmp77 $const1 	%argrw{"wrr"}
	assign		$tmp76 $tmp78 	%argrw{"wr"}
	if		$tmp76 316 316 	%argrw{"r"}
# PxrLayeredTexture.osl:360
#         PxrTxMipControls(mipBias, maxResolution, txcoords, txparams);
	functioncall	$const24 316 	%line{360} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:283
#     float bias = (mipBias != 0) ? pow(2.0, mipBias) : 1.0;
	neq		$tmp79 mipBias $const1 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{283} %argrw{"wrr"}
	if		$tmp79 254 255 	%argrw{"r"}
	assign		$tmp80 mipBias 	%argrw{"wr"}
	pow		___460_bias $const25 $tmp80 	%argrw{"wrr"}
	assign		___460_bias $const13 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:284
#     params.width *= bias;
	mul		txparams.width txparams.width ___460_bias 	%line{284} %argrw{"wrr"}
	assign		txparams.width txparams.width 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:286
#     if (maxResolution > 0)
	gt		$tmp81 maxResolution $const1 	%line{286} %argrw{"wrr"}
	if		$tmp81 316 316 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:290
#         float minwidth = 1.0 / maxResolution;
	div		___461_minwidth $const13 maxResolution 	%line{290} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:293
#         adjust_width(params.width, coords);
	functioncall	$const26 301 	%line{293} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:250
#     coords.dsdx *= width;
	mul		txcoords.dsdx txcoords.dsdx txparams.width 	%line{250} %argrw{"wrr"}
	assign		txcoords.dsdx txcoords.dsdx 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:251
#     coords.dtdx *= width;
	mul		txcoords.dtdx txcoords.dtdx txparams.width 	%line{251} %argrw{"wrr"}
	assign		txcoords.dtdx txcoords.dtdx 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:252
#     coords.dsdy *= width;
	mul		txcoords.dsdy txcoords.dsdy txparams.width 	%line{252} %argrw{"wrr"}
	assign		txcoords.dsdy txcoords.dsdy 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:253
#     coords.dtdy *= width;
	mul		txcoords.dtdy txcoords.dtdy txparams.width 	%line{253} %argrw{"wrr"}
	assign		txcoords.dtdy txcoords.dtdy 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:256
#     float eps = 1.0e-8, eps2 = eps*eps;
	assign		___455_eps $const27 	%line{256} %argrw{"wr"}
	mul		___455_eps2 ___455_eps ___455_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:257
#     float dxlen2 = coords.dsdx * coords.dsdx + coords.dtdx * coords.dtdx;
	mul		$tmp82 txcoords.dsdx txcoords.dsdx 	%line{257} %argrw{"wrr"}
	mul		$tmp83 txcoords.dtdx txcoords.dtdx 	%argrw{"wrr"}
	add		___455_dxlen2 $tmp82 $tmp83 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:258
#     float dylen2 = coords.dsdy * coords.dsdy + coords.dtdy * coords.dtdy;
	mul		$tmp84 txcoords.dsdy txcoords.dsdy 	%line{258} %argrw{"wrr"}
	mul		$tmp85 txcoords.dtdy txcoords.dtdy 	%argrw{"wrr"}
	add		___455_dylen2 $tmp84 $tmp85 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:259
#     if (dxlen2 < eps2) {   // Tiny dx
	lt		$tmp86 ___455_dxlen2 ___455_eps2 	%line{259} %argrw{"wrr"}
	if		$tmp86 292 301 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:260
#         if (dylen2 < eps2) {
	lt		$tmp87 ___455_dylen2 ___455_eps2 	%line{260} %argrw{"wrr"}
	if		$tmp87 285 292 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:262
#             coords.dsdx = eps; coords.dsdy = 0;
	assign		txcoords.dsdx ___455_eps 	%line{262} %argrw{"wr"}
	assign		txcoords.dsdy $const22 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:263
#             coords.dtdx = 0; coords.dtdy = eps;
	assign		txcoords.dtdx $const22 	%line{263} %argrw{"wr"}
	assign		txcoords.dtdy ___455_eps 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:266
#             float scale = eps / sqrt(dylen2);
	sqrt		$tmp88 ___455_dylen2 	%line{266} %argrw{"wr"}
	div		___458_scale ___455_eps $tmp88 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:267
#             coords.dsdx = coords.dtdy * scale;
	mul		txcoords.dsdx txcoords.dtdy ___458_scale 	%line{267} %argrw{"wrr"}
	assign		txcoords.dsdx txcoords.dsdx 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:268
#             coords.dtdx = -coords.dsdy * scale;
	neg		$tmp89 txcoords.dsdy 	%line{268} %argrw{"wr"}
	mul		txcoords.dtdx $tmp89 ___458_scale 	%argrw{"wrr"}
	assign		txcoords.dtdx txcoords.dtdx 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:270
#     } else if (dylen2 < eps2) {
	lt		$tmp90 ___455_dylen2 ___455_eps2 	%line{270} %argrw{"wrr"}
	if		$tmp90 301 301 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:272
#         float scale = eps / sqrt(dxlen2);
	sqrt		$tmp91 ___455_dxlen2 	%line{272} %argrw{"wr"}
	div		___459_scale ___455_eps $tmp91 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:273
#         coords.dsdy = -coords.dtdx * scale;
	neg		$tmp92 txcoords.dtdx 	%line{273} %argrw{"wr"}
	mul		txcoords.dsdy $tmp92 ___459_scale 	%argrw{"wrr"}
	assign		txcoords.dsdy txcoords.dsdy 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:274
#         coords.dtdy = coords.dsdx * scale;
	mul		txcoords.dtdy txcoords.dsdx ___459_scale 	%line{274} %argrw{"wrr"}
	assign		txcoords.dtdy txcoords.dtdy 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:297
#         float swidth = max(abs(coords.dsdx), abs(coords.dsdy));
	abs		$tmp93 txcoords.dsdx 	%line{297} %argrw{"wr"}
	abs		$tmp94 txcoords.dsdy 	%argrw{"wr"}
	max		___461_swidth $tmp93 $tmp94 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:298
#         float twidth = max(abs(coords.dtdx), abs(coords.dtdy));
	abs		$tmp95 txcoords.dtdx 	%line{298} %argrw{"wr"}
	abs		$tmp96 txcoords.dtdy 	%argrw{"wr"}
	max		___461_twidth $tmp95 $tmp96 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:299
#         int conservative_filter = 0;
	assign		___461_conservative_filter $const1 	%line{299} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:300
#         getattribute("context", "reyesGrid", conservative_filter);  // 1 if displ. shading, 0 if ray hit
	getattribute	$tmp97 $const28 $const29 ___461_conservative_filter 	%line{300} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:301
#         float filterwidth = conservative_filter ? max(swidth, twidth)
	if		___461_conservative_filter 311 312 	%line{301} %argrw{"r"}
	max		___461_filterwidth ___461_swidth ___461_twidth 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:302
#                                                 : min(swidth, twidth);
	min		___461_filterwidth ___461_swidth ___461_twidth 	%line{302} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:305
#         filterwidth += params.blur;
	add		___461_filterwidth ___461_filterwidth txparams.blur 	%line{305} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:308
#         filterwidth = max(filterwidth, minwidth);
	max		___461_filterwidth ___461_filterwidth ___461_minwidth 	%line{308} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:310
#         coords.blur = filterwidth;  // coords.blur now specifies the texture lookup filter width
	assign		txcoords.blur ___461_filterwidth 	%line{310} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:311
#         params.width = 0.0;  // set multiplier on derivatives to 0 so that only blur determines filter width
	assign		txparams.width $const22 	%line{311} %argrw{"wr"}
# PxrLayeredTexture.osl:362
#     float finalMask = maskValue;
	assign		finalMask maskValue 	%filename{"PxrLayeredTexture.osl"} %line{362} %argrw{"wr"}
# PxrLayeredTexture.osl:363
#     if (PxrTextureIsValid(finalMaskFilename))
	functioncall	$const30 322 	%line{363} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:317
#     int exists = filename != "";
	neq		___462_exists finalMaskFilename $const31 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{317} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:318
#     if (exists)
	if		___462_exists 321 321 	%line{318} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:319
#         gettextureinfo(filename, "exists", exists);
	gettextureinfo	$tmp99 finalMaskFilename $const32 ___462_exists 	%line{319} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:320
#     return exists;
	assign		$tmp98 ___462_exists 	%line{320} %argrw{"wr"}
# PxrLayeredTexture.osl:363
#     if (PxrTextureIsValid(finalMaskFilename))
	if		$tmp98 330 330 	%filename{"PxrLayeredTexture.osl"} %line{363} %argrw{"r"}
# PxrLayeredTexture.osl:365
#         finalMask = PxrTextureLookup(finalMaskFilename, txcoords, txparams);
	functioncall	$const33 326 	%line{365} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:363
#     color missingalpha = params.missingalpha;
	assign		___466_missingalpha txparams.missingalpha 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{363} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:364
#     return texture(filename,
	texture		finalMask finalMaskFilename txcoords.s txcoords.t txcoords.dsdx txcoords.dtdx txcoords.dsdy txcoords.dtdy $const34 txparams.firstchannel $const35 txparams.blur $const36 ___466_missingalpha $const37 txparams.interp $const38 txparams.width 	%line{364} %argrw{"wrrrrrrrrrrrrrrrrr"}
# PxrLayeredTexture.osl:366
#         finalMask = clamp(finalMask * maskValue, 0, 1);
	mul		$tmp100 finalMask maskValue 	%filename{"PxrLayeredTexture.osl"} %line{366} %argrw{"wrr"}
	functioncall	$const39 330 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp101 $tmp100 $const13 	%filename{"/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		finalMask $tmp101 $const22 	%argrw{"wrr"}
# PxrLayeredTexture.osl:371
#     txparams.firstchannel = firstChannel;
	assign		txparams.firstchannel firstChannel 	%filename{"PxrLayeredTexture.osl"} %line{371} %argrw{"wr"}
# PxrLayeredTexture.osl:372
#     resultRGB = PxrTextureLookup(finalFilename, txcoords, txparams);
	functioncall	$const33 362 	%line{372} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:325
#     int success = 0;
	assign		___463_success $const1 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{325} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:326
#     int nchannels = 0;
	assign		___463_nchannels $const1 	%line{326} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:327
#     color finalResult = 0;
	assign		___463_finalResult $const1 	%line{327} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:333
#                            "blur", max(coords.blur, params.blur),
	max		$tmp102 txcoords.blur txparams.blur 	%line{333} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:329
#     color result = texture(filename,
	texture		___463_result finalFilename txcoords.s txcoords.t txcoords.dsdx txcoords.dtdx txcoords.dsdy txcoords.dtdy $const34 txparams.firstchannel $const35 $tmp102 $const36 txparams.missingcolor $const37 txparams.interp $const38 txparams.width 	%line{329} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:339
#     if (result == params.missingcolor) return result;
	eq		$tmp103 ___463_result txparams.missingcolor 	%line{339} %argrw{"wrr"}
	if		$tmp103 341 341 	%argrw{"r"}
	assign		resultRGB ___463_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:342
#     finalResult = result;
	assign		___463_finalResult ___463_result 	%line{342} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:345
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___463_success finalFilename $const40 ___463_nchannels 	%line{345} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:346
#     if (success && nchannels)
	neq		$tmp104 ___463_success $const1 	%line{346} %argrw{"wrr"}
	if		$tmp104 347 347 	%argrw{"r"}
	neq		$tmp105 ___463_nchannels $const1 	%argrw{"wrr"}
	assign		$tmp104 $tmp105 	%argrw{"wr"}
	if		$tmp104 361 361 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:348
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp106 ___463_nchannels $const6 	%line{348} %argrw{"wrr"}
	neq		$tmp107 $tmp106 $const1 	%argrw{"wrr"}
	if		$tmp107 351 354 	%argrw{"r"}
	eq		$tmp108 ___463_nchannels $const5 	%argrw{"wrr"}
	neq		$tmp109 $tmp108 $const1 	%argrw{"wrr"}
	assign		$tmp107 $tmp109 	%argrw{"wr"}
	if		$tmp107 361 361 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:351
#             finalResult[0] = result[0];
	compref		$tmp110 ___463_result $const1 	%line{351} %argrw{"wrr"}
	compassign	___463_finalResult $const1 $tmp110 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:352
#             finalResult[1] = result[0];
	compref		$tmp111 ___463_result $const1 	%line{352} %argrw{"wrr"}
	compassign	___463_finalResult $const6 $tmp111 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:353
#             finalResult[2] = result[0];
	compref		$tmp112 ___463_result $const1 	%line{353} %argrw{"wrr"}
	compassign	___463_finalResult $const5 $tmp112 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:357
#     return finalResult;
	assign		resultRGB ___463_finalResult 	%line{357} %argrw{"wr"}
# PxrLayeredTexture.osl:374
#     if (linearize) PxrLinearizeSRGB(resultRGB);
	if		linearize 386 386 	%filename{"PxrLayeredTexture.osl"} %line{374} %argrw{"r"}
	functioncall	$const41 386 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:222
#     if (!ocioEnabled())
	functioncall	$const42 368 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{222} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:215
#     int foo = 0;
	assign		___448_foo $const1 	%line{215} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:216
#     getattribute("user:ocioenabled", foo);
	getattribute	$tmp114 $const43 ___448_foo 	%line{216} %argrw{"wrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:217
#     return foo;
	assign		$tmp113 ___448_foo 	%line{217} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:222
#     if (!ocioEnabled())
	eq		$tmp115 $tmp113 $const1 	%line{222} %argrw{"wrr"}
	if		$tmp115 386 386 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#         for (int i = 0; i < 3; ++i)
	for		$tmp117 372 374 385 386 	%line{224} %argrw{"r"}
	assign		___451_i $const1 	%argrw{"wr"}
	lt		$tmp116 ___451_i $const10 	%argrw{"wrr"}
	neq		$tmp117 $tmp116 $const1 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:226
#             if (inout[i] < 0.04045)
	compref		$tmp118 resultRGB ___451_i 	%line{226} %argrw{"wrr"}
	lt		$tmp119 $tmp118 $const44 	%argrw{"wrr"}
	if		$tmp119 380 385 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:227
#                 inout[i] = inout[i] * 0.07739938;
	compref		$tmp120 resultRGB ___451_i 	%line{227} %argrw{"wrr"}
	mul		$tmp121 $tmp120 $const45 	%argrw{"wrr"}
	compassign	resultRGB ___451_i $tmp121 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:229
#                 inout[i] = pow((inout[i] + 0.055) * 0.947867299, 2.4);
	compref		$tmp123 resultRGB ___451_i 	%line{229} %argrw{"wrr"}
	add		$tmp124 $tmp123 $const46 	%argrw{"wrr"}
	mul		$tmp125 $tmp124 $const47 	%argrw{"wrr"}
	pow		$tmp122 $tmp125 $const48 	%argrw{"wrr"}
	compassign	resultRGB ___451_i $tmp122 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:224
#         for (int i = 0; i < 3; ++i)
	add		___451_i ___451_i $const6 	%line{224} %argrw{"wrr"}
# PxrLayeredTexture.osl:376
#     resultRGB = resultRGB * colorTint + (colorOffset * finalMask);
	mul		$tmp126 resultRGB colorTint 	%filename{"PxrLayeredTexture.osl"} %line{376} %argrw{"wrr"}
	mul		$tmp127 colorOffset finalMask 	%argrw{"wrr"}
	add		resultRGB $tmp126 $tmp127 	%argrw{"wrr"}
# PxrLayeredTexture.osl:380
#     if (hasOverlay)
	if		hasOverlay 406 406 	%line{380} %argrw{"r"}
# PxrLayeredTexture.osl:386
#                     (1.0-textureOverlay.a) * resultRGB * finalMask;
	sub		$tmp128 $const13 textureOverlay.a 	%line{386} %argrw{"wrr"}
	mul		$tmp129 $tmp128 resultRGB 	%argrw{"wrr"}
	mul		$tmp130 $tmp129 finalMask 	%argrw{"wrr"}
# PxrLayeredTexture.osl:385
#         resultRGB = textureOverlay.c +
	add		resultRGB textureOverlay.c $tmp130 	%line{385} %argrw{"wrr"}
# PxrLayeredTexture.osl:388
#         resultR = resultRGB[0];
	compref		resultR resultRGB $const1 	%line{388} %argrw{"wrr"}
# PxrLayeredTexture.osl:389
#         resultG = resultRGB[1];
	compref		resultG resultRGB $const6 	%line{389} %argrw{"wrr"}
# PxrLayeredTexture.osl:390
#         resultB = resultRGB[2];
	compref		resultB resultRGB $const5 	%line{390} %argrw{"wrr"}
# PxrLayeredTexture.osl:392
#         if (needResultA)
	if		needResultA 406 406 	%line{392} %argrw{"r"}
# PxrLayeredTexture.osl:395
#                             (1.0-textureOverlay.a) * finalMask *
	sub		$tmp131 $const13 textureOverlay.a 	%line{395} %argrw{"wrr"}
	mul		$tmp132 $tmp131 finalMask 	%argrw{"wrr"}
# PxrLayeredTexture.osl:396
#                             (texAlpha ? texAlpha:1.0);
	neq		$tmp134 texAlpha $const22 	%line{396} %argrw{"wrr"}
	if		$tmp134 403 404 	%argrw{"r"}
	assign		$tmp133 texAlpha 	%argrw{"wr"}
	assign		$tmp133 $const13 	%argrw{"wr"}
# PxrLayeredTexture.osl:395
#                             (1.0-textureOverlay.a) * finalMask *
	mul		$tmp135 $tmp132 $tmp133 	%line{395} %argrw{"wrr"}
# PxrLayeredTexture.osl:394
#             resultA = textureOverlay.a +
	add		resultA textureOverlay.a $tmp135 	%line{394} %argrw{"wrr"}
# PxrLayeredTexture.osl:402
#     if (isconnected(resultOverlay))
	isconnected	$tmp136 resultOverlay 	%line{402} %argrw{"wr"}
	if		$tmp136 418 418 	%argrw{"r"}
# PxrLayeredTexture.osl:404
#         resultOverlay.c = resultRGB;
	assign		resultOverlay.c resultRGB 	%line{404} %argrw{"wr"}
# PxrLayeredTexture.osl:406
#                           (1.0-textureOverlay.a) * finalMask *
	sub		$tmp137 $const13 textureOverlay.a 	%line{406} %argrw{"wrr"}
	mul		$tmp138 $tmp137 finalMask 	%argrw{"wrr"}
# PxrLayeredTexture.osl:407
#                           (isconnected(texAlpha) ? texAlpha : 1.0);
	isconnected	$tmp140 texAlpha 	%line{407} %argrw{"wr"}
	if		$tmp140 414 415 	%argrw{"r"}
	assign		$tmp139 texAlpha 	%argrw{"wr"}
	assign		$tmp139 $const13 	%argrw{"wr"}
# PxrLayeredTexture.osl:406
#                           (1.0-textureOverlay.a) * finalMask *
	mul		$tmp141 $tmp138 $tmp139 	%line{406} %argrw{"wrr"}
# PxrLayeredTexture.osl:405
#         resultOverlay.a = textureOverlay.a +
	add		resultOverlay.a textureOverlay.a $tmp141 	%line{405} %argrw{"wrr"}
	assign		resultOverlay.a resultOverlay.a 	%argrw{"wr"}
	end
