OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.@PROJECT_VERSION_TWEAK@"dev"
# options: -DOSX -I/Users/Shared/build/ratbuild/rman/_built/osxSonoma_x86-64_clang15_external_release/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/common -I/Users/Shared/build/ratbuild/rmanshare/RIS/pattern/osl -I/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl -o /Users/Shared/build/ratbuild/rmanshare/_built/osxSonoma_x86-64_clang15_external_release/osl/PxrNormalMap.osl/obj/PxrNormalMap.oso
shader PxrNormalMap	%meta{int,rfm_nodeid,1053417} %meta{string,rfm_classification,"rendernode/RenderMan/pattern/bump"} %meta{string,rfh_classification,"Pattern/Bump"} %meta{string,help,"Calculate a bumped normal based on a normal map file or color input."} 
param	float	bumpScale	1		%meta{string,widget,"default"} %meta{string,help,"Scale the bump effect<br><br>bumpScale (float)"} %meta{string,label,"Bump Scale"} %meta{float,slidermax,2} %meta{float,slidermin,0}  %read{408,408} %write{2147483647,-1}
param	color	inputRGB	0 0 0		%meta{string,widget,"color"} %meta{string,help,"Specifies normal map color (this parameter is ignored if filename<br>is provided).<br><br>inputRGB (color)"} %meta{string,label,"Input Normal"}  %read{107,345} %write{2147483647,-1}
param	string	filename	""		%meta{string,widget,"assetIdInput"} %meta{string,help,"Normal map filename.  The shader reads only one channel of the<br>file from Channel specified below.<br>Note that this will be read in as the Mudbox normal map format<br>in tangent space.<br><br>filename (string)"} %meta{string,options,"texture"} %meta{int,connectable,0} %meta{string,label,"Filename"}  %read{1,94} %write{2147483647,-1}
param	normal	bumpOverlay	0 0 0		%meta{string,widget,"default"} %meta{string,help,"Connect a PxrBump or PxrNormalMap node here if you need to combine<br>multiple patterns.<br><br>bumpOverlay (normal)"} %meta{string,label,"Bump Overlay"} %meta{string,readOnly,"True"}  %read{29,31} %write{2147483647,-1}
param	int	invertBump	0		%meta{string,widget,"checkBox"} %meta{string,page,"Bump Orientation"} %meta{int,page_open,1} %meta{string,help,"Invert the bump orientation.<br>Concave becomes convex and vice versa.<br><br>invertBump (int)"} %meta{int,connectable,0} %meta{string,label,"Invert Bump"}  %read{409,409} %write{2147483647,-1}
param	int	orientation	2		%meta{string,widget,"mapper"} %meta{string,page,"Bump Orientation"} %meta{string,help,"Some texturing applications offer different orientations,<br>like OpenGL or DirectX. You can also go manual to try to<br>fix your normal map's appearance.<br><br>orientation (int)"} %meta{string,options,"OpenGL:0|DirectX:1|Custom:2"} %meta{int,connectable,0} %meta{string,label,"Orientation"}  %read{348,353} %write{2147483647,-1}
param	int	flipX	0		%meta{string,widget,"checkBox"} %meta{string,page,"Bump Orientation"} %meta{string,help,"Invert the bump orientation.<br>Concave becomes convex and vice versa.<br><br>flipX (int)"} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"../orientation"} %meta{string,conditionalVisValue,"2"} %meta{int,connectable,0} %meta{string,label,"Flip X"}  %read{361,361} %write{2147483647,-1}
param	int	flipY	0		%meta{string,widget,"checkBox"} %meta{string,page,"Bump Orientation"} %meta{string,help,"Invert the bump orientation.<br>Concave becomes convex and vice versa.<br><br>flipY (int)"} %meta{string,conditionalVisOp,"equalTo"} %meta{string,conditionalVisPath,"../orientation"} %meta{string,conditionalVisValue,"2"} %meta{int,connectable,0} %meta{string,label,"Flip Y"}  %read{365,365} %write{2147483647,-1}
param	int	firstChannel	0		%meta{string,widget,"default"} %meta{string,page,"Mapping Controls"} %meta{int,page_open,1} %meta{string,help,"First channel offset to be looked up for Filename.<br><br>firstChannel (int)"} %meta{string,conditionalVisOp,"notEqualTo"} %meta{string,conditionalVisPath,"../../filename"} %meta{string,conditionalVisValue,""} %meta{int,connectable,0} %meta{string,label,"First Channel Offset"}  %read{105,105} %write{2147483647,-1}
param	int	atlasStyle	0		%meta{string,widget,"mapper"} %meta{string,page,"Mapping Controls"} %meta{string,help,"[DEPRECATED]: Specify which atlas style.<br><br>atlasStyle (int)"} %meta{string,conditionalVisOp,"notEqualTo"} %meta{string,conditionalVisPath,"../filename"} %meta{string,conditionalVisValue,""} %meta{string,options,"None:0|UDIM (Mari):1|UV Tile Base-1 (Mudbox):2|UV Tile Base-0 (Zbrush):3"} %meta{int,connectable,0} %meta{string,label,"Atlas Style"}  %read{5,24} %write{2147483647,-1}
param	int	invertT	1		%meta{string,widget,"checkBox"} %meta{string,page,"Mapping Controls"} %meta{string,help,"Inverts the t texture coordinate for texture lookup.<br><br>invertT (int)"} %meta{string,conditionalVisOp,"notEqualTo"} %meta{string,conditionalVisPath,"../filename"} %meta{string,conditionalVisValue,""} %meta{int,connectable,0} %meta{string,label,"Invert T"}  %read{0,0} %write{2147483647,-1}
param	float	blur	0		%meta{string,widget,"default"} %meta{string,page,"Mapping Controls"} %meta{string,help,"Specifies how much to blur the result from the texture.<br><br>blur (float)"} %meta{string,conditionalVisOp,"notEqualTo"} %meta{string,conditionalVisPath,"../filename"} %meta{string,conditionalVisValue,""} %meta{string,label,"Blur"}  %read{106,106} %write{2147483647,-1}
param	int	lerp	1		%meta{string,widget,"checkBox"} %meta{string,page,"Mapping Controls"} %meta{string,help,"Selects whether to interpolate between adjacent resolutions in the multi-resolution texture,<br>resulting in smoother transitions between levels.<br><br>lerp (int)"} %meta{string,conditionalVisOp,"notEqualTo"} %meta{string,conditionalVisPath,"../filename"} %meta{string,conditionalVisValue,""} %meta{int,connectable,0} %meta{string,label,"Mip Interpolate"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	filter	1		%meta{string,widget,"mapper"} %meta{string,page,"Mapping Controls"} %meta{string,help,"filter (int)"} %meta{string,conditionalVisOp,"notEqualTo"} %meta{string,conditionalVisPath,"../filename"} %meta{string,conditionalVisValue,""} %meta{string,options,"Box:1|Bilinear:2|Bspline:3|Gaussian:6|Lagrangian:7"} %meta{int,connectable,0} %meta{string,label,"Filter"}  %read{98,101} %write{2147483647,-1}
param	int	smoothRayDerivs	1		%meta{string,widget,"checkBox"} %meta{string,page,"Texture"} %meta{string,help,"Compute texture filter widths at ray hit points in a more robust manner, providing consistent widths independent of the rotation of the underlying surface."} %meta{int,connectable,0} %meta{string,label,"Smooth Ray Derivs"}  %read{127,127} %write{2147483647,-1}
param	struct Manifold	manifold			%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{56,81} %write{2147483647,-1} %struct{"Manifold"} %structfields{Q,QN,Qradius} %structfieldtypes{"pnf"} %structnfields{3}
param	point	manifold.Q	0 0 0		%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{78,78} %write{2147483647,-1} %mystruct{manifold} %mystructfield{0} %derivs
param	normal	manifold.QN	0 0 1		%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{79,79} %write{2147483647,-1} %mystruct{manifold} %mystructfield{1}
param	float	manifold.Qradius	0		%meta{string,page,""} %meta{string,widget,"default"} %meta{string,readOnly,"True"}  %read{80,80} %write{2147483647,-1} %mystruct{manifold} %mystructfield{2}
param	int	mipBias	0		%meta{string,page,"Mapping Controls.Advanced Texture Settings"} %meta{int,page_open,1} %meta{string,help,"Offset the selected MIP level picked by the renderer.<br>Positive values will bias toward lower resolution MIPs.<br>Negative values will bias toward higher resolution MIPs.<br><br>mipBias (int)"} %meta{int,connectable,0} %meta{string,label,"MIP bias"} %meta{int,slidermax,10} %meta{int,slidermin,-10}  %read{240,250} %write{2147483647,-1}
param	float	maxResolution	0		%meta{string,widget,"mapper"} %meta{string,page,"Mapping Controls.Advanced Texture Settings"} %meta{string,help,"Clamp the resolution to a maximum value.<br><br>maxResolution (float)"} %meta{string,options,"Unlimited:0|32:32|64:64|128:128|256:256|512:512|1024:1024|2048:2048|4096:4096|8192:8192"} %meta{string,label,"Max Resolution"}  %read{243,257} %write{2147483647,-1}
param	int	optimizeIndirect	1		%meta{string,widget,"checkBox"} %meta{string,page,"Mapping Controls.Advanced Texture Settings"} %meta{string,help,"Make indirect hits use a box filter rather than the selected one.<br><br>optimizeIndirect (int)"} %meta{int,connectable,0} %meta{string,label,"Optimize Indirect"}  %read{2147483647,-1} %write{2147483647,-1}
param	int	reverse	0		%meta{string,widget,"checkBox"} %meta{string,page,"Advanced"} %meta{int,page_open,1} %meta{string,help,"Reverse the resulting normal.<br><br>reverse (int)"} %meta{int,connectable,0} %meta{string,label,"Reverse Normal"}  %read{418,418} %write{2147483647,-1}
param	float	adjustAmount	1		%meta{string,widget,"default"} %meta{string,page,"Advanced"} %meta{string,help,"Amount to adjust the normals when they are facing away from the camera.<br><br>adjustAmount (float)"} %meta{string,label,"Adjust Amount"} %meta{float,max,1} %meta{float,min,0}  %read{423,432} %write{2147483647,-1}
param	float	surfaceNormalMix	0		%meta{string,widget,"default"} %meta{string,page,"Advanced"} %meta{string,help,"The amount to mix the resulting normals with the surface normals.<br><br>surfaceNormalMix (float)"} %meta{string,label,"Surface Normal Mix"} %meta{float,max,1} %meta{float,min,0} %meta{int,slider,1} %meta{float,slidermax,1} %meta{float,slidermin,0}  %read{438,440} %write{2147483647,-1}
param	int	disable	0		%meta{string,widget,"checkBox"} %meta{string,page,"Advanced"} %meta{string,help,"Use the geometric normal (ignore the modified normal).<br><br>disable (int)"} %meta{int,connectable,0} %meta{string,label,"Disabled"}  %read{48,48} %write{2147483647,-1}
oparam	normal	resultN	0 0 0		%meta{string,help,"resultN (normal)"}  %read{419,440} %write{54,441}
oparam	vector	resultNG	0 0 0		%meta{string,help,"Surface gradient from bump map.<br>resultNG (vector)"}  %read{442,442} %write{444,444}
global	point	P	%read{60,60} %write{2147483647,-1} %derivs
global	vector	I	%read{420,420} %write{2147483647,-1}
global	normal	N	%read{32,61} %write{2147483647,-1}
global	normal	Ng	%read{426,426} %write{2147483647,-1}
global	float	u	%read{90,90} %write{2147483647,-1} %derivs
global	float	v	%read{91,91} %write{2147483647,-1} %derivs
global	vector	dPdu	%read{128,176} %write{2147483647,-1}
global	vector	dPdv	%read{129,167} %write{2147483647,-1}
local	vector	___412_vec1	%read{71,72} %write{70,71}
local	float	___412_scale	%read{75,75} %write{74,74}
local	string	___438_interp	%read{109,109} %write{100,104}
local	int	___438_params.firstchannel	%read{111,111} %write{105,105} %mystruct{___438_params} %mystructfield{0}
local	float	___438_params.blur	%read{112,112} %write{106,106} %mystruct{___438_params} %mystructfield{1}
local	color	___438_params.missingcolor	%read{113,113} %write{107,107} %mystruct{___438_params} %mystructfield{2}
local	float	___438_params.missingalpha	%read{114,114} %write{108,108} %mystruct{___438_params} %mystructfield{3}
local	string	___438_params.interp	%read{115,115} %write{109,109} %mystruct{___438_params} %mystructfield{4}
local	float	___438_params.width	%read{116,116} %write{110,110} %mystruct{___438_params} %mystructfield{5}
local	float	___440_coords.s	%read{232,232} %write{211,225} %mystruct{___440_coords} %mystructfield{0}
local	float	___440_coords.t	%read{233,233} %write{212,226} %mystruct{___440_coords} %mystructfield{1}
local	float	___440_coords.dsdx	%read{234,234} %write{213,227} %mystruct{___440_coords} %mystructfield{2}
local	float	___440_coords.dtdx	%read{235,235} %write{214,228} %mystruct{___440_coords} %mystructfield{3}
local	float	___440_coords.dsdy	%read{236,236} %write{215,229} %mystruct{___440_coords} %mystructfield{4}
local	float	___440_coords.dtdy	%read{237,237} %write{216,230} %mystruct{___440_coords} %mystructfield{5}
local	float	___440_coords.blur	%read{238,238} %write{217,231} %mystruct{___440_coords} %mystructfield{6}
local	float	___440__tt	%read{134,230} %write{124,125} %derivs
local	float	___440_blur0	%read{217,231} %write{126,126}
local	float	___441_du	%read{131,135} %write{128,128}
local	float	___441_dv	%read{133,137} %write{129,129}
local	float	___441_dsdu	%read{138,153} %write{131,131}
local	float	___441_dsdv	%read{139,167} %write{133,133}
local	float	___441_dtdu	%read{139,176} %write{135,135}
local	float	___441_dtdv	%read{138,157} %write{137,137}
local	float	___441_det	%read{141,150} %write{140,140}
local	vector	___441_dPds	%read{159,185} %write{146,180}
local	vector	___441_dPdt	%read{168,187} %write{150,184}
local	float	___441_filterwidthS	%read{205,222} %write{186,205}
local	float	___441_filterwidthT	%read{206,221} %write{188,206}
local	float	___441_dxss	%read{193,207} %write{189,189}
local	float	___441_dxtt	%read{199,203} %write{190,190}
local	float	___441_dyss	%read{194,208} %write{191,191}
local	float	___441_dytt	%read{200,204} %write{192,192}
local	float	___441_signS	%read{205,205} %write{197,198}
local	float	___441_signT	%read{206,206} %write{203,204}
local	int	___441_unmixedDerivsAreDominant	%read{210,210} %write{209,209}
local	float	___455_eps	%read{268,293} %write{267,267}
local	float	___455_eps2	%read{275,290} %write{268,268}
local	float	___455_dxlen2	%read{275,292} %write{271,271}
local	float	___455_dylen2	%read{277,290} %write{274,274}
local	float	___458_scale	%read{285,288} %write{284,284}
local	float	___459_scale	%read{295,297} %write{293,293}
local	float	___460_bias	%read{253,253} %write{251,252}
local	float	___461_minwidth	%read{311,311} %write{257,257}
local	float	___461_swidth	%read{308,309} %write{301,301}
local	float	___461_twidth	%read{308,309} %write{304,304}
local	int	___461_conservative_filter	%read{307,307} %write{305,306}
local	float	___461_filterwidth	%read{310,312} %write{308,311}
local	int	___463_success	%read{326,326} %write{315,325}
local	int	___463_nchannels	%read{328,334} %write{316,325}
local	color	___463_finalResult	%read{344,344} %write{317,343}
local	color	___463_result	%read{320,342} %write{319,319}
local	string	___467_UDIMfilename	%read{27,27} %write{10,26}
local	string	___467_separator	%read{13,13} %write{11,11}
local	string[2]	___467_tokens	%read{16,17} %write{12,13}
local	int	___467_nTokens	%read{14,14} %write{13,13}
local	string	___468_baseFileName	%read{20,26} %write{16,16}
local	string	___468_extension	%read{20,26} %write{17,17}
local	float	___492_b_inv	%read{398,399} %write{397,397}
local	float	___499_scale	%read{384,384} %write{378,378}
local	color	___499_vMa	%read{380,382} %write{379,379}
local	float	___499_z_ma	%read{397,397} %write{385,385}
local	int	___499_gFlipVertDeriv	%read{387,387} %write{386,386}
local	float	___499_s	%read{392,392} %write{388,389}
local	float	___513_VdotN	%read{430,433} %write{429,429}
local	float	___516_weight	%read{47,47} %write{34,46}
local	float	___516_incidentRaySpread	%read{38,44} %write{35,36}
local	int	inInvertT	%read{118,118} %write{0,85}
local	string	finalFilename	%read{319,325} %write{1,27}
local	normal	Nin	%read{54,440} %write{31,32}
local	float	bumpFade	%read{50,408} %write{47,47}
local	point	inputManifoldRw.Q	%read{65,84} %write{60,78} %mystruct{inputManifoldRw} %mystructfield{0} %derivs
local	normal	inputManifoldRw.QN	%read{67,69} %write{61,79} %mystruct{inputManifoldRw} %mystructfield{1}
local	float	inputManifoldRw.Qradius	%read{75,76} %write{62,80} %mystruct{inputManifoldRw} %mystructfield{2}
local	float	s	%read{130,229} %write{83,90} %derivs
local	float	t	%read{120,125} %write{84,91} %derivs
local	float[2]	___525_inManifold	%read{88,89} %write{86,86} %derivs
local	int	useInputBump	%read{2147483647,-1} %write{92,92}
local	color	tbn	%read{346,346} %write{93,345}
local	int	___528_txparams.firstchannel	%read{319,319} %write{111,111} %mystruct{___528_txparams} %mystructfield{0}
local	float	___528_txparams.blur	%read{310,318} %write{112,112} %mystruct{___528_txparams} %mystructfield{1}
local	color	___528_txparams.missingcolor	%read{319,320} %write{113,113} %mystruct{___528_txparams} %mystructfield{2}
local	float	___528_txparams.missingalpha	%read{2147483647,-1} %write{114,114} %mystruct{___528_txparams} %mystructfield{3}
local	string	___528_txparams.interp	%read{319,319} %write{115,115} %mystruct{___528_txparams} %mystructfield{4}
local	float	___528_txparams.width	%read{253,319} %write{116,313} %mystruct{___528_txparams} %mystructfield{5}
local	float	___528_txcoords.s	%read{319,319} %write{232,232} %mystruct{___528_txcoords} %mystructfield{0}
local	float	___528_txcoords.t	%read{319,319} %write{233,233} %mystruct{___528_txcoords} %mystructfield{1}
local	float	___528_txcoords.dsdx	%read{259,319} %write{234,286} %mystruct{___528_txcoords} %mystructfield{2}
local	float	___528_txcoords.dtdx	%read{261,319} %write{235,289} %mystruct{___528_txcoords} %mystructfield{3}
local	float	___528_txcoords.dsdy	%read{263,319} %write{236,296} %mystruct{___528_txcoords} %mystructfield{4}
local	float	___528_txcoords.dtdy	%read{265,319} %write{237,298} %mystruct{___528_txcoords} %mystructfield{5}
local	float	___528_txcoords.blur	%read{318,318} %write{238,312} %mystruct{___528_txcoords} %mystructfield{6}
local	color	tsNormal	%read{350,391} %write{347,368}
local	vector	Tn	%read{376,405} %write{369,372}
local	vector	Bn	%read{406,406} %write{373,376}
local	vector	grad	%read{413,444} %write{407,413}
local	vector	Vn	%read{426,434} %write{421,421}
const	string	$const1	""		%read{2,94} %write{2147483647,-1}
temp	int	$tmp1	%read{3,3} %write{2,2}
temp	int	$tmp2	%read{4,8} %write{3,7}
const	int	$const2	0		%read{3,438} %write{2147483647,-1}
temp	int	$tmp3	%read{6,6} %write{5,5}
temp	int	$tmp4	%read{7,7} %write{6,6}
const	string	$const3	"PxrAtlasRename"		%read{9,9} %write{2147483647,-1}
const	string	$const4	"_MAPID_"		%read{11,11} %write{2147483647,-1}
const	string[2]	$const5	"" "" 		%read{12,12} %write{2147483647,-1}
const	int	$const6	2		%read{13,380} %write{2147483647,-1}
temp	int	$tmp5	%read{15,15} %write{14,14}
const	int	$const7	1		%read{17,391} %write{2147483647,-1}
temp	int	$tmp6	%read{19,19} %write{18,18}
const	string	$const8	"%s%s%s"		%read{20,26} %write{2147483647,-1}
const	string	$const9	"<UDIM>"		%read{20,20} %write{2147483647,-1}
temp	int	$tmp7	%read{22,22} %write{21,21}
const	string	$const10	"_u<U>_v<V>"		%read{23,23} %write{2147483647,-1}
const	int	$const11	3		%read{24,24} %write{2147483647,-1}
temp	int	$tmp8	%read{25,25} %write{24,24}
const	string	$const12	"_u<u>_v<v>"		%read{26,26} %write{2147483647,-1}
temp	int	$tmp9	%read{30,30} %write{29,29}
const	string	$const13	"RixRaySpreadWeight"		%read{33,33} %write{2147483647,-1}
const	float	$const14	1		%read{34,411} %write{2147483647,-1}
const	float	$const15	0		%read{35,313} %write{2147483647,-1}
temp	int	$tmp10	%read{37,37} %write{36,36}
const	string	$const16	"builtin"		%read{36,372} %write{2147483647,-1}
const	string	$const17	"incidentRaySpread"		%read{36,36} %write{2147483647,-1}
const	float	$const18	0.25		%read{38,44} %write{2147483647,-1}
temp	int	$tmp11	%read{39,39} %write{38,38}
const	float	$const19	0.5		%read{41,41} %write{2147483647,-1}
temp	int	$tmp12	%read{42,42} %write{41,41}
temp	float	$tmp13	%read{45,45} %write{44,44}
const	float	$const20	4		%read{45,45} %write{2147483647,-1}
temp	float	$tmp14	%read{46,46} %write{45,45}
temp	int	$tmp15	%read{49,53} %write{48,52}
temp	int	$tmp16	%read{51,51} %write{50,50}
temp	int	$tmp17	%read{52,52} %write{51,51}
temp	int	$tmp18	%read{57,57} %write{56,56}
temp	int	$tmp19	%read{58,58} %write{57,57}
const	string	$const21	"Manifold_Construct"		%read{59,59} %write{2147483647,-1}
const	string	$const22	"object"		%read{65,71} %write{2147483647,-1}
const	string	$const23	"Manifold_Transform"		%read{63,64} %write{2147483647,-1}
const	string	$const24	"common"		%read{65,71} %write{2147483647,-1}
temp	normal	$tmp20	%read{68,68} %write{67,67}
const	vector	$const25	1 1 1		%read{70,70} %write{2147483647,-1}
temp	float	$tmp21	%read{74,74} %write{72,72}
temp	float	$tmp22	%read{74,74} %write{73,73}
const	float	$const26	3		%read{73,73} %write{2147483647,-1}
const	string	$const27	"Manifold_Copy"		%read{77,77} %write{2147483647,-1}
temp	int	$tmp23	%read{82,82} %write{81,81}
temp	int	$tmp24	%read{87,87} %write{86,86}
const	string	$const28	"primvar"		%read{86,373} %write{2147483647,-1}
const	string	$const29	"st"		%read{86,86} %write{2147483647,-1}
temp	int	$tmp25	%read{95,95} %write{94,94}
const	string	$const30	"initTxParams"		%read{96,97} %write{2147483647,-1}
temp	int	$tmp26	%read{99,99} %write{98,98}
const	string	$const31	"closest"		%read{100,100} %write{2147483647,-1}
temp	int	$tmp27	%read{102,102} %write{101,101}
const	string	$const32	"linear"		%read{103,103} %write{2147483647,-1}
const	string	$const33	"smartcubic"		%read{104,104} %write{2147483647,-1}
const	string	$const34	"initTxCoords"		%read{117,117} %write{2147483647,-1}
const	string	$const35	"invertCoord"		%read{119,119} %write{2147483647,-1}
temp	float	$tmp28	%read{121,121} %write{120,120} %derivs
temp	float	$tmp29	%read{124,124} %write{121,121} %derivs
temp	float	$tmp30	%read{123,123} %write{122,122} %derivs
temp	float	$tmp31	%read{124,124} %write{123,123} %derivs
temp	float	$tmp32	%read{131,131} %write{130,130}
temp	float	$tmp33	%read{133,133} %write{132,132}
temp	float	$tmp34	%read{135,135} %write{134,134}
temp	float	$tmp35	%read{137,137} %write{136,136}
temp	float	$tmp36	%read{140,140} %write{138,138}
temp	float	$tmp37	%read{140,140} %write{139,139}
temp	int	$tmp38	%read{142,142} %write{141,141}
temp	vector	$tmp39	%read{145,145} %write{143,143}
temp	vector	$tmp40	%read{145,145} %write{144,144}
temp	vector	$tmp41	%read{146,146} %write{145,145}
temp	vector	$tmp42	%read{149,149} %write{147,147}
temp	vector	$tmp43	%read{149,149} %write{148,148}
temp	vector	$tmp44	%read{150,150} %write{149,149}
temp	int	$tmp45	%read{152,152} %write{151,151}
const	vector	$const36	0 0 0		%read{154,158} %write{2147483647,-1}
temp	int	$tmp46	%read{156,156} %write{155,155}
temp	float	$tmp47	%read{160,160} %write{159,159}
temp	int	$tmp48	%read{161,161} %write{160,160}
temp	int	$tmp49	%read{162,166} %write{161,165}
temp	int	$tmp50	%read{164,164} %write{163,163}
temp	int	$tmp51	%read{165,165} %write{164,164}
temp	float	$tmp52	%read{169,169} %write{168,168}
temp	int	$tmp53	%read{170,170} %write{169,169}
temp	int	$tmp54	%read{171,175} %write{170,174}
temp	int	$tmp55	%read{173,173} %write{172,172}
temp	int	$tmp56	%read{174,174} %write{173,173}
temp	float	$tmp57	%read{178,178} %write{177,177}
temp	int	$tmp58	%read{179,179} %write{178,178}
temp	float	$tmp59	%read{182,182} %write{181,181}
temp	int	$tmp60	%read{183,183} %write{182,182}
temp	float	$tmp61	%read{186,186} %write{185,185}
temp	float	$tmp62	%read{188,188} %write{187,187}
temp	float	$tmp63	%read{195,195} %write{193,193}
temp	float	$tmp64	%read{195,195} %write{194,194}
temp	int	$tmp65	%read{196,196} %write{195,195}
temp	float	$tmp66	%read{201,201} %write{199,199}
temp	float	$tmp67	%read{201,201} %write{200,200}
temp	int	$tmp68	%read{202,202} %write{201,201}
temp	float	$tmp69	%read{209,209} %write{207,207}
temp	float	$tmp70	%read{209,209} %write{208,208}
temp	int	$tmp71	%read{241,241} %write{240,240}
temp	int	$tmp72	%read{242,246} %write{241,245}
temp	int	$tmp73	%read{244,244} %write{243,243}
temp	int	$tmp74	%read{245,245} %write{244,244}
const	string	$const37	"PxrTxMipControls"		%read{247,247} %write{2147483647,-1}
temp	int	$tmp75	%read{249,249} %write{248,248}
const	float	$const38	2		%read{251,346} %write{2147483647,-1}
temp	float	$tmp76	%read{251,251} %write{250,250}
temp	int	$tmp77	%read{256,256} %write{255,255}
const	string	$const39	"adjust_width"		%read{258,258} %write{2147483647,-1}
const	float	$const40	9.99999994e-09		%read{267,267} %write{2147483647,-1}
temp	float	$tmp78	%read{271,271} %write{269,269}
temp	float	$tmp79	%read{271,271} %write{270,270}
temp	float	$tmp80	%read{274,274} %write{272,272}
temp	float	$tmp81	%read{274,274} %write{273,273}
temp	int	$tmp82	%read{276,276} %write{275,275}
temp	int	$tmp83	%read{278,278} %write{277,277}
temp	float	$tmp84	%read{284,284} %write{283,283}
temp	float	$tmp85	%read{288,288} %write{287,287}
temp	int	$tmp86	%read{291,291} %write{290,290}
temp	float	$tmp87	%read{293,293} %write{292,292}
temp	float	$tmp88	%read{295,295} %write{294,294}
temp	float	$tmp89	%read{301,301} %write{299,299}
temp	float	$tmp90	%read{301,301} %write{300,300}
temp	float	$tmp91	%read{304,304} %write{302,302}
temp	float	$tmp92	%read{304,304} %write{303,303}
temp	int	$tmp93	%read{2147483647,-1} %write{306,306}
const	string	$const41	"context"		%read{306,306} %write{2147483647,-1}
const	string	$const42	"reyesGrid"		%read{306,306} %write{2147483647,-1}
const	string	$const43	"PxrTextureLookup"		%read{314,314} %write{2147483647,-1}
const	string	$const44	"firstchannel"		%read{319,319} %write{2147483647,-1}
const	string	$const45	"blur"		%read{319,319} %write{2147483647,-1}
temp	float	$tmp94	%read{319,319} %write{318,318}
const	string	$const46	"missingcolor"		%read{319,319} %write{2147483647,-1}
const	string	$const47	"interp"		%read{319,319} %write{2147483647,-1}
const	string	$const48	"width"		%read{319,319} %write{2147483647,-1}
temp	int	$tmp95	%read{321,321} %write{320,320}
const	string	$const49	"channels"		%read{325,325} %write{2147483647,-1}
temp	int	$tmp96	%read{327,330} %write{326,329}
temp	int	$tmp97	%read{329,329} %write{328,328}
temp	int	$tmp98	%read{332,332} %write{331,331}
temp	int	$tmp99	%read{333,337} %write{332,336}
temp	int	$tmp100	%read{335,335} %write{334,334}
temp	int	$tmp101	%read{336,336} %write{335,335}
temp	float	$tmp102	%read{339,339} %write{338,338}
temp	float	$tmp103	%read{341,341} %write{340,340}
temp	float	$tmp104	%read{343,343} %write{342,342}
temp	color	$tmp105	%read{347,347} %write{346,346}
temp	int	$tmp106	%read{349,349} %write{348,348}
temp	float	$tmp107	%read{351,351} %write{350,350}
temp	float	$tmp108	%read{352,352} %write{351,351}
temp	int	$tmp109	%read{354,354} %write{353,353}
temp	float	$tmp110	%read{356,356} %write{355,355}
temp	float	$tmp111	%read{357,357} %write{356,356}
temp	float	$tmp112	%read{359,359} %write{358,358}
temp	float	$tmp113	%read{360,360} %write{359,359}
temp	float	$tmp114	%read{363,363} %write{362,362}
temp	float	$tmp115	%read{364,364} %write{363,363}
temp	float	$tmp116	%read{367,367} %write{366,366}
temp	float	$tmp117	%read{368,368} %write{367,367}
temp	int	$tmp118	%read{370,370} %write{369,369}
const	string	$const50	"Tn"		%read{369,372} %write{2147483647,-1}
temp	int	$tmp119	%read{371,371} %write{370,370}
temp	int	$tmp120	%read{2147483647,-1} %write{372,372}
temp	int	$tmp121	%read{374,374} %write{373,373}
const	string	$const51	"Bn"		%read{373,373} %write{2147483647,-1}
temp	int	$tmp122	%read{375,375} %write{374,374}
temp	float	$tmp123.x	%read{405,405} %write{401,401}
temp	float	$tmp123.y	%read{406,406} %write{402,402}
const	string	$const52	"TspaceNormalToDerivative"		%read{377,377} %write{2147483647,-1}
const	float	$const53	0.0078125		%read{378,378} %write{2147483647,-1}
temp	float	$tmp124	%read{385,385} %write{380,380}
temp	float	$tmp125	%read{384,384} %write{383,383}
temp	float	$tmp126	%read{383,383} %write{381,381}
temp	float	$tmp127	%read{383,383} %write{382,382}
temp	float	$tmp128	%read{385,385} %write{384,384}
const	float	$const54	-1		%read{388,415} %write{2147483647,-1}
temp	float	$tmp129.x	%read{401,401} %write{394,394}
temp	float	$tmp129.y	%read{402,402} %write{395,395}
temp	float	$tmp130.x	%read{394,394} %write{390,390}
temp	float	$tmp130.y	%read{395,395} %write{392,392}
temp	float	$tmp131	%read{392,392} %write{391,391}
const	string	$const55	"__operator__neg__"		%read{393,393} %write{2147483647,-1}
const	string	$const56	"__operator__div__"		%read{396,396} %write{2147483647,-1}
temp	float	$tmp132.x	%read{401,401} %write{398,398}
temp	float	$tmp132.y	%read{402,402} %write{399,399}
const	string	$const57	"__operator__mul__"		%read{400,400} %write{2147483647,-1}
const	string	$const58	"SurfgradFromTBN"		%read{404,404} %write{2147483647,-1}
temp	vector	$tmp133	%read{407,407} %write{405,405}
temp	vector	$tmp134	%read{407,407} %write{406,406}
temp	float	$tmp135	%read{412,412} %write{408,408}
temp	float	$tmp136	%read{412,412} %write{410,411}
temp	float	$tmp137	%read{413,413} %write{412,412}
const	string	$const60	"resolveNormalFromSurfaceGradient"		%read{414,414} %write{2147483647,-1}
temp	vector	$tmp138	%read{416,416} %write{415,415}
temp	normal	$tmp139	%read{417,417} %write{416,416}
temp	vector	$tmp140	%read{421,421} %write{420,420}
const	string	$const61	"RixAdjustNormal"		%read{422,422} %write{2147483647,-1}
temp	int	$tmp141	%read{424,424} %write{423,423}
temp	float	$tmp142	%read{427,427} %write{426,426}
temp	int	$tmp143	%read{428,428} %write{427,427}
temp	int	$tmp144	%read{431,431} %write{430,430}
const	float	$const62	1.00999999		%read{432,432} %write{2147483647,-1}
temp	float	$tmp145	%read{433,433} %write{432,432}
temp	float	$tmp146	%read{434,434} %write{433,433}
temp	vector	$tmp147	%read{435,435} %write{434,434}
const	string	$const63	"RixBlendWithNormal"		%read{437,437} %write{2147483647,-1}
temp	int	$tmp148	%read{439,439} %write{438,438}
temp	normal	$tmp149	%read{441,441} %write{440,440}
temp	int	$tmp150	%read{443,443} %write{442,442}
code ___main___
# PxrNormalMap.osl:271
#     int inInvertT = invertT;
	assign		inInvertT invertT 	%filename{"PxrNormalMap.osl"} %line{271} %argrw{"wr"}
# PxrNormalMap.osl:272
#     string finalFilename = filename;
	assign		finalFilename filename 	%line{272} %argrw{"wr"}
# PxrNormalMap.osl:273
#     if (filename != "" and atlasStyle > 0)
	neq		$tmp1 filename $const1 	%line{273} %argrw{"wrr"}
	neq		$tmp2 $tmp1 $const2 	%argrw{"wrr"}
	if		$tmp2 8 8 	%argrw{"r"}
	gt		$tmp3 atlasStyle $const2 	%argrw{"wrr"}
	neq		$tmp4 $tmp3 $const2 	%argrw{"wrr"}
	assign		$tmp2 $tmp4 	%argrw{"wr"}
	if		$tmp2 29 29 	%argrw{"r"}
# PxrNormalMap.osl:275
#         finalFilename = PxrAtlasRename(filename, atlasStyle);
	functioncall	$const3 28 	%line{275} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:376
#     string UDIMfilename = filename;
	assign		___467_UDIMfilename filename 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{376} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:377
#     string separator = "_MAPID_";
	assign		___467_separator $const4 	%line{377} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:378
#     string tokens[2] = {"",""};
	assign		___467_tokens $const5 	%line{378} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:380
#     int nTokens = split(filename, tokens, separator, 2);
	split		___467_nTokens filename ___467_tokens ___467_separator $const6 	%line{380} %argrw{"wrwrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:383
#     if (nTokens == 2)
	eq		$tmp5 ___467_nTokens $const6 	%line{383} %argrw{"wrr"}
	if		$tmp5 27 27 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:385
#         string baseFileName = tokens[0];
	aref		___468_baseFileName ___467_tokens $const2 	%line{385} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:386
#         string extension = tokens[1];
	aref		___468_extension ___467_tokens $const7 	%line{386} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:388
#         if (atlasStyle == 1) {
	eq		$tmp6 atlasStyle $const7 	%line{388} %argrw{"wrr"}
	if		$tmp6 21 27 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:389
#             UDIMfilename = format("%s%s%s",baseFileName,"<UDIM>",extension);
	format		___467_UDIMfilename $const8 ___468_baseFileName $const9 ___468_extension 	%line{389} %argrw{"wrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:391
#         else if (atlasStyle == 2)
	eq		$tmp7 atlasStyle $const6 	%line{391} %argrw{"wrr"}
	if		$tmp7 24 27 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:393
#             UDIMfilename = format("%s%s%s",baseFileName,"_u<U>_v<V>",extension);
	format		___467_UDIMfilename $const8 ___468_baseFileName $const10 ___468_extension 	%line{393} %argrw{"wrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:395
#         else if (atlasStyle == 3)
	eq		$tmp8 atlasStyle $const11 	%line{395} %argrw{"wrr"}
	if		$tmp8 27 27 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:397
#             UDIMfilename = format("%s%s%s",baseFileName,"_u<u>_v<v>",extension);
	format		___467_UDIMfilename $const8 ___468_baseFileName $const12 ___468_extension 	%line{397} %argrw{"wrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:400
#     return UDIMfilename;
	assign		finalFilename ___467_UDIMfilename 	%line{400} %argrw{"wr"}
# PxrNormalMap.osl:279
#         inInvertT = 1;
	assign		inInvertT $const7 	%filename{"PxrNormalMap.osl"} %line{279} %argrw{"wr"}
# PxrNormalMap.osl:282
#     normal Nin = isconnected(bumpOverlay) ? bumpOverlay : N;
	isconnected	$tmp9 bumpOverlay 	%line{282} %argrw{"wr"}
	if		$tmp9 32 33 	%argrw{"r"}
	assign		Nin bumpOverlay 	%argrw{"wr"}
	assign		Nin N 	%argrw{"wr"}
# PxrNormalMap.osl:286
#     float bumpFade = RixRaySpreadWeight();
	functioncall	$const13 48 	%line{286} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:231
#     float weight = 1.0;
	assign		___516_weight $const14 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{231} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:232
#     float incidentRaySpread = 0.0;
	assign		___516_incidentRaySpread $const15 	%line{232} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:233
#     if (getattribute("builtin", "incidentRaySpread", incidentRaySpread))
	getattribute	$tmp10 $const16 $const17 ___516_incidentRaySpread 	%line{233} %argrw{"wrrw"}
	if		$tmp10 47 47 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:235
#         if (incidentRaySpread < 0.25)
	lt		$tmp11 ___516_incidentRaySpread $const18 	%line{235} %argrw{"wrr"}
	if		$tmp11 41 47 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:237
#             weight = 1.0;
	assign		___516_weight $const14 	%line{237} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:239
#         else if (incidentRaySpread > 0.5)
	gt		$tmp12 ___516_incidentRaySpread $const19 	%line{239} %argrw{"wrr"}
	if		$tmp12 44 47 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:241
#             weight = 0.0;
	assign		___516_weight $const15 	%line{241} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:247
#             weight = 1.0 - (incidentRaySpread - 0.25) * 4.0;
	sub		$tmp13 ___516_incidentRaySpread $const18 	%line{247} %argrw{"wrr"}
	mul		$tmp14 $tmp13 $const20 	%argrw{"wrr"}
	sub		___516_weight $const14 $tmp14 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:250
#     return weight;
	assign		bumpFade ___516_weight 	%line{250} %argrw{"wr"}
# PxrNormalMap.osl:288
#     if (disable || bumpFade == 0.0)
	neq		$tmp15 disable $const2 	%filename{"PxrNormalMap.osl"} %line{288} %argrw{"wrr"}
	if		$tmp15 50 53 	%argrw{"r"}
	eq		$tmp16 bumpFade $const15 	%argrw{"wrr"}
	neq		$tmp17 $tmp16 $const2 	%argrw{"wrr"}
	assign		$tmp15 $tmp17 	%argrw{"wr"}
	if		$tmp15 56 56 	%argrw{"r"}
# PxrNormalMap.osl:290
#         resultN = Nin;
	assign		resultN Nin 	%line{290} %argrw{"wr"}
# PxrNormalMap.osl:291
#         return;
	exit	%line{291}
# PxrNormalMap.osl:297
#     if (!isconnected(manifold))
	isconnected	$tmp18 manifold 	%line{297} %argrw{"wr"}
	eq		$tmp19 $tmp18 $const2 	%argrw{"wrr"}
	if		$tmp19 77 81 	%argrw{"r"}
# PxrNormalMap.osl:299
#         Manifold_Construct(P, N, inputManifoldRw);
	functioncall	$const21 63 	%line{299} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:69
#     m.Q = inP;
	assign		inputManifoldRw.Q P 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{69} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:70
#     m.QN = inN;
	assign		inputManifoldRw.QN N 	%line{70} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:71
#     m.Qradius = 0.0;
	assign		inputManifoldRw.Qradius $const15 	%line{71} %argrw{"wr"}
# PxrNormalMap.osl:300
#         Manifold_Transform(inputManifoldRw, "object");
	functioncall	$const23 77 	%filename{"PxrNormalMap.osl"} %line{300} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:91
#     Manifold_Transform(ioManifold, "common", toSpace);
	functioncall	$const23 77 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{91} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:78
#     ioManifold.Q = transform(fromSpace, toSpace, ioManifold.Q);
	transform	inputManifoldRw.Q $const24 $const22 inputManifoldRw.Q 	%line{78} %argrw{"wrrr"}
	assign		inputManifoldRw.Q inputManifoldRw.Q 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:79
#     ioManifold.QN = normalize(transform(fromSpace, toSpace, ioManifold.QN));
	transformn	$tmp20 $const24 $const22 inputManifoldRw.QN 	%line{79} %argrw{"wrrr"}
	normalize	inputManifoldRw.QN $tmp20 	%argrw{"wr"}
	assign		inputManifoldRw.QN inputManifoldRw.QN 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:81
#     vector vec1 = vector(1.0);
	assign		___412_vec1 $const25 	%line{81} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:82
#     vec1 = transform(fromSpace, toSpace, vec1);
	transformv	___412_vec1 $const24 $const22 ___412_vec1 	%line{82} %argrw{"wrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:83
#     float scale = length(vec1) / sqrt(3.0);
	length		$tmp21 ___412_vec1 	%line{83} %argrw{"wr"}
	sqrt		$tmp22 $const26 	%argrw{"wr"}
	div		___412_scale $tmp21 $tmp22 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:84
#     ioManifold.Qradius *= scale;
	mul		inputManifoldRw.Qradius inputManifoldRw.Qradius ___412_scale 	%line{84} %argrw{"wrr"}
	assign		inputManifoldRw.Qradius inputManifoldRw.Qradius 	%argrw{"wr"}
# PxrNormalMap.osl:303
#         Manifold_Copy(manifold, inputManifoldRw);
	functioncall	$const27 81 	%filename{"PxrNormalMap.osl"} %line{303} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:53
#     dest.Q = src.Q;
	assign		inputManifoldRw.Q manifold.Q 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h"} %line{53} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:54
#     dest.QN = src.QN;
	assign		inputManifoldRw.QN manifold.QN 	%line{54} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Manifold.h:55
#     dest.Qradius = src.Qradius;
	assign		inputManifoldRw.Qradius manifold.Qradius 	%line{55} %argrw{"wr"}
# PxrNormalMap.osl:307
#     if (isconnected(manifold))
	isconnected	$tmp23 manifold 	%filename{"PxrNormalMap.osl"} %line{307} %argrw{"wr"}
	if		$tmp23 86 92 	%argrw{"r"}
# PxrNormalMap.osl:309
#         s = inputManifoldRw.Q[0];
	compref		s inputManifoldRw.Q $const2 	%line{309} %argrw{"wrr"}
# PxrNormalMap.osl:310
#         t = inputManifoldRw.Q[1];
	compref		t inputManifoldRw.Q $const7 	%line{310} %argrw{"wrr"}
# PxrNormalMap.osl:311
#         inInvertT = 0;
	assign		inInvertT $const2 	%line{311} %argrw{"wr"}
# PxrNormalMap.osl:316
#         if (getattribute("primvar", "st", inManifold))
	getattribute	$tmp24 $const28 $const29 ___525_inManifold 	%line{316} %argrw{"wrrw"}
	if		$tmp24 90 92 	%argrw{"r"}
# PxrNormalMap.osl:318
#             s = inManifold[0];
	aref		s ___525_inManifold $const2 	%line{318} %argrw{"wrr"}
# PxrNormalMap.osl:319
#             t = inManifold[1];
	aref		t ___525_inManifold $const7 	%line{319} %argrw{"wrr"}
# PxrNormalMap.osl:323
#             s = u;
	assign		s u 	%line{323} %argrw{"wr"}
# PxrNormalMap.osl:324
#             t = v;
	assign		t v 	%line{324} %argrw{"wr"}
# PxrNormalMap.osl:328
#     int useInputBump = 0;
	assign		useInputBump $const2 	%line{328} %argrw{"wr"}
# PxrNormalMap.osl:329
#     color tbn = 0;
	assign		tbn $const2 	%line{329} %argrw{"wr"}
# PxrNormalMap.osl:330
#     if (filename != "")
	neq		$tmp25 filename $const1 	%line{330} %argrw{"wrr"}
	if		$tmp25 345 346 	%argrw{"r"}
# PxrNormalMap.osl:332
#         TxParams txparams = initTxParams(firstChannel, blur, inputRGB, 1.0, filter);
	functioncall	$const30 117 	%line{332} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:83
#     return initTxParams(firstchannel, blur, missingcolor, missingalpha, filter, 1.0);
	functioncall	$const30 117 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{83} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:68
#     if (filter == 0)
	eq		$tmp26 filter $const2 	%line{68} %argrw{"wrr"}
	if		$tmp26 101 105 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:69
#         interp = "closest";
	assign		___438_interp $const31 	%line{69} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:70
#     else if (filter == 2)
	eq		$tmp27 filter $const6 	%line{70} %argrw{"wrr"}
	if		$tmp27 104 105 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:71
#         interp = "linear";
	assign		___438_interp $const32 	%line{71} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:73
#         interp = "smartcubic";
	assign		___438_interp $const33 	%line{73} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:75
#     TxParams params = {firstchannel, blur, missingcolor, missingalpha,
	assign		___438_params.firstchannel firstChannel 	%line{75} %argrw{"wr"}
	assign		___438_params.blur blur 	%argrw{"wr"}
	assign		___438_params.missingcolor inputRGB 	%argrw{"wr"}
	assign		___438_params.missingalpha $const14 	%argrw{"wr"}
	assign		___438_params.interp ___438_interp 	%argrw{"wr"}
	assign		___438_params.width $const14 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:77
#     return params;
	assign		___528_txparams.firstchannel ___438_params.firstchannel 	%line{77} %argrw{"wr"}
	assign		___528_txparams.blur ___438_params.blur 	%argrw{"wr"}
	assign		___528_txparams.missingcolor ___438_params.missingcolor 	%argrw{"wr"}
	assign		___528_txparams.missingalpha ___438_params.missingalpha 	%argrw{"wr"}
	assign		___528_txparams.interp ___438_params.interp 	%argrw{"wr"}
	assign		___528_txparams.width ___438_params.width 	%argrw{"wr"}
# PxrNormalMap.osl:333
#         TxCoords txcoords = initTxCoords(s, t, inInvertT, smoothRayDerivs);
	functioncall	$const34 240 	%filename{"PxrNormalMap.osl"} %line{333} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:110
#     float _tt = invertT ? invertCoord(tt) : tt;
	if		inInvertT 125 126 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{110} %argrw{"r"}
	functioncall	$const35 125 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:48
#     return floor(tt) + 1.0 - (tt - floor(tt));
	floor		$tmp28 t 	%line{48} %argrw{"wr"}
	add		$tmp29 $tmp28 $const14 	%argrw{"wrr"}
	floor		$tmp30 t 	%argrw{"wr"}
	sub		$tmp31 t $tmp30 	%argrw{"wrr"}
	sub		___440__tt $tmp29 $tmp31 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:110
#     float _tt = invertT ? invertCoord(tt) : tt;
	assign		___440__tt t 	%line{110} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:111
#     float blur0 = 0.0;
	assign		___440_blur0 $const15 	%line{111} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:113
#     if (smoothRayDerivs)
	if		smoothRayDerivs 225 232 	%line{113} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:115
#         float du = length(dPdu);  // width of the ray hit footprint projected onto the dPdu direction
	length		___441_du dPdu 	%line{115} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:116
#         float dv = length(dPdv);  // width of the ray hit footprint projected onto the dPdv direction
	length		___441_dv dPdv 	%line{116} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:118
#         float dsdu = Dx(ss) * du;  // change in s over ray hit footprint
	Dx		$tmp32 s 	%line{118} %argrw{"wr"} %argderivs{1}
	mul		___441_dsdu $tmp32 ___441_du 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:119
#         float dsdv = Dy(ss) * dv;
	Dy		$tmp33 s 	%line{119} %argrw{"wr"} %argderivs{1}
	mul		___441_dsdv $tmp33 ___441_dv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:120
#         float dtdu = Dx(_tt) * du;  // change in t over ray hit footprint
	Dx		$tmp34 ___440__tt 	%line{120} %argrw{"wr"} %argderivs{1}
	mul		___441_dtdu $tmp34 ___441_du 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:121
#         float dtdv = Dy(_tt) * dv;
	Dy		$tmp35 ___440__tt 	%line{121} %argrw{"wr"} %argderivs{1}
	mul		___441_dtdv $tmp35 ___441_dv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:148
#         float det = dsdu * dtdv - dtdu * dsdv;
	mul		$tmp36 ___441_dsdu ___441_dtdv 	%line{148} %argrw{"wrr"}
	mul		$tmp37 ___441_dtdu ___441_dsdv 	%argrw{"wrr"}
	sub		___441_det $tmp36 $tmp37 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:150
#         if (det != 0.0)
	neq		$tmp38 ___441_det $const15 	%line{150} %argrw{"wrr"}
	if		$tmp38 151 185 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:152
#             dPds = (dPdu*dtdv - dPdv*dtdu) / det;
	mul		$tmp39 dPdu ___441_dtdv 	%line{152} %argrw{"wrr"}
	mul		$tmp40 dPdv ___441_dtdu 	%argrw{"wrr"}
	sub		$tmp41 $tmp39 $tmp40 	%argrw{"wrr"}
	div		___441_dPds $tmp41 ___441_det 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:153
#             dPdt = (dPdv*dsdu - dPdu*dsdv) / det;
	mul		$tmp42 dPdv ___441_dsdu 	%line{153} %argrw{"wrr"}
	mul		$tmp43 dPdu ___441_dsdv 	%argrw{"wrr"}
	sub		$tmp44 $tmp42 $tmp43 	%argrw{"wrr"}
	div		___441_dPdt $tmp44 ___441_det 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:157
#             dPds = (dsdu != 0.0) ? (dPdu / dsdu) : vector(0.0);
	neq		$tmp45 ___441_dsdu $const15 	%line{157} %argrw{"wrr"}
	if		$tmp45 154 155 	%argrw{"r"}
	div		___441_dPds dPdu ___441_dsdu 	%argrw{"wrr"}
	assign		___441_dPds $const36 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:158
#             dPdt = (dtdv != 0.0) ? (dPdv / dtdv) : vector(0.0);
	neq		$tmp46 ___441_dtdv $const15 	%line{158} %argrw{"wrr"}
	if		$tmp46 158 159 	%argrw{"r"}
	div		___441_dPdt dPdv ___441_dtdv 	%argrw{"wrr"}
	assign		___441_dPdt $const36 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:160
#             if (length(dPds) == 0.0 && dsdv != 0.0) dPds = dPdv / dsdv;
	length		$tmp47 ___441_dPds 	%line{160} %argrw{"wr"}
	eq		$tmp48 $tmp47 $const15 	%argrw{"wrr"}
	neq		$tmp49 $tmp48 $const2 	%argrw{"wrr"}
	if		$tmp49 166 166 	%argrw{"r"}
	neq		$tmp50 ___441_dsdv $const15 	%argrw{"wrr"}
	neq		$tmp51 $tmp50 $const2 	%argrw{"wrr"}
	assign		$tmp49 $tmp51 	%argrw{"wr"}
	if		$tmp49 168 168 	%argrw{"r"}
	div		___441_dPds dPdv ___441_dsdv 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:161
#             if (length(dPdt) == 0.0 && dtdu != 0.0) dPdt = dPdu / dtdu;
	length		$tmp52 ___441_dPdt 	%line{161} %argrw{"wr"}
	eq		$tmp53 $tmp52 $const15 	%argrw{"wrr"}
	neq		$tmp54 $tmp53 $const2 	%argrw{"wrr"}
	if		$tmp54 175 175 	%argrw{"r"}
	neq		$tmp55 ___441_dtdu $const15 	%argrw{"wrr"}
	neq		$tmp56 $tmp55 $const2 	%argrw{"wrr"}
	assign		$tmp54 $tmp56 	%argrw{"wr"}
	if		$tmp54 177 177 	%argrw{"r"}
	div		___441_dPdt dPdu ___441_dtdu 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:163
#             if (length(dPds) == 0.0) dPds = dPdt;
	length		$tmp57 ___441_dPds 	%line{163} %argrw{"wr"}
	eq		$tmp58 $tmp57 $const15 	%argrw{"wrr"}
	if		$tmp58 181 181 	%argrw{"r"}
	assign		___441_dPds ___441_dPdt 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:164
#             if (length(dPdt) == 0.0) dPdt = dPds;
	length		$tmp59 ___441_dPdt 	%line{164} %argrw{"wr"}
	eq		$tmp60 $tmp59 $const15 	%argrw{"wrr"}
	if		$tmp60 185 185 	%argrw{"r"}
	assign		___441_dPdt ___441_dPds 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:170
#         float filterwidthS = 1.0 / length(dPds);
	length		$tmp61 ___441_dPds 	%line{170} %argrw{"wr"}
	div		___441_filterwidthS $const14 $tmp61 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:171
#         float filterwidthT = 1.0 / length(dPdt);
	length		$tmp62 ___441_dPdt 	%line{171} %argrw{"wr"}
	div		___441_filterwidthT $const14 $tmp62 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:176
#         float dxss = Dx(ss);
	Dx		___441_dxss s 	%line{176} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:177
#         float dxtt = Dx(_tt);
	Dx		___441_dxtt ___440__tt 	%line{177} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:178
#         float dyss = Dy(ss);
	Dy		___441_dyss s 	%line{178} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:179
#         float dytt = Dy(_tt);
	Dy		___441_dytt ___440__tt 	%line{179} %argrw{"wr"} %argderivs{1}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:181
#         float signS = (abs(dxss) > abs(dyss)) ? sign(dxss) : sign(dyss);  // dominant sign (+/-) for ds
	abs		$tmp63 ___441_dxss 	%line{181} %argrw{"wr"}
	abs		$tmp64 ___441_dyss 	%argrw{"wr"}
	gt		$tmp65 $tmp63 $tmp64 	%argrw{"wrr"}
	if		$tmp65 198 199 	%argrw{"r"}
	sign		___441_signS ___441_dxss 	%argrw{"wr"}
	sign		___441_signS ___441_dyss 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:182
#         float signT = (abs(dxtt) > abs(dytt)) ? sign(dxtt) : sign(dytt);  // dominant sign (+/-) for dt
	abs		$tmp66 ___441_dxtt 	%line{182} %argrw{"wr"}
	abs		$tmp67 ___441_dytt 	%argrw{"wr"}
	gt		$tmp68 $tmp66 $tmp67 	%argrw{"wrr"}
	if		$tmp68 204 205 	%argrw{"r"}
	sign		___441_signT ___441_dxtt 	%argrw{"wr"}
	sign		___441_signT ___441_dytt 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:184
#         filterwidthS *= signS;
	mul		___441_filterwidthS ___441_filterwidthS ___441_signS 	%line{184} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:185
#         filterwidthT *= signT;
	mul		___441_filterwidthT ___441_filterwidthT ___441_signT 	%line{185} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:187
#         int unmixedDerivsAreDominant = (abs(dxss) > abs(dyss));
	abs		$tmp69 ___441_dxss 	%line{187} %argrw{"wr"}
	abs		$tmp70 ___441_dyss 	%argrw{"wr"}
	gt		___441_unmixedDerivsAreDominant $tmp69 $tmp70 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:188
#         if (unmixedDerivsAreDominant)
	if		___441_unmixedDerivsAreDominant 218 225 	%line{188} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:190
#             coords = TxCoords( ss, _tt, filterwidthS, 0.0, 0.0, filterwidthT, blur0 );
	assign		___440_coords.s s 	%line{190} %argrw{"wr"}
	assign		___440_coords.t ___440__tt 	%argrw{"wr"}
	assign		___440_coords.dsdx ___441_filterwidthS 	%argrw{"wr"}
	assign		___440_coords.dtdx $const15 	%argrw{"wr"}
	assign		___440_coords.dsdy $const15 	%argrw{"wr"}
	assign		___440_coords.dtdy ___441_filterwidthT 	%argrw{"wr"}
	assign		___440_coords.blur ___440_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:194
#             coords = TxCoords( ss, _tt, 0.0, filterwidthT, filterwidthS, 0.0, blur0 );
	assign		___440_coords.s s 	%line{194} %argrw{"wr"}
	assign		___440_coords.t ___440__tt 	%argrw{"wr"}
	assign		___440_coords.dsdx $const15 	%argrw{"wr"}
	assign		___440_coords.dtdx ___441_filterwidthT 	%argrw{"wr"}
	assign		___440_coords.dsdy ___441_filterwidthS 	%argrw{"wr"}
	assign		___440_coords.dtdy $const15 	%argrw{"wr"}
	assign		___440_coords.blur ___440_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:200
#         coords = TxCoords( ss, _tt, Dx(ss), Dx(_tt), Dy(ss), Dy(_tt), blur0 );
	assign		___440_coords.s s 	%line{200} %argrw{"wr"}
	assign		___440_coords.t ___440__tt 	%argrw{"wr"}
	Dx		___440_coords.dsdx s 	%argrw{"wr"} %argderivs{1}
	Dx		___440_coords.dtdx ___440__tt 	%argrw{"wr"} %argderivs{1}
	Dy		___440_coords.dsdy s 	%argrw{"wr"} %argderivs{1}
	Dy		___440_coords.dtdy ___440__tt 	%argrw{"wr"} %argderivs{1}
	assign		___440_coords.blur ___440_blur0 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:203
#     return coords;
	assign		___528_txcoords.s ___440_coords.s 	%line{203} %argrw{"wr"}
	assign		___528_txcoords.t ___440_coords.t 	%argrw{"wr"}
	assign		___528_txcoords.dsdx ___440_coords.dsdx 	%argrw{"wr"}
	assign		___528_txcoords.dtdx ___440_coords.dtdx 	%argrw{"wr"}
	assign		___528_txcoords.dsdy ___440_coords.dsdy 	%argrw{"wr"}
	assign		___528_txcoords.dtdy ___440_coords.dtdy 	%argrw{"wr"}
	assign		___528_txcoords.blur ___440_coords.blur 	%argrw{"wr"}
	return
# PxrNormalMap.osl:334
#         if (mipBias != 0 || maxResolution != 0)
	neq		$tmp71 mipBias $const2 	%filename{"PxrNormalMap.osl"} %line{334} %argrw{"wrr"}
	neq		$tmp72 $tmp71 $const2 	%argrw{"wrr"}
	if		$tmp72 243 246 	%argrw{"r"}
	neq		$tmp73 maxResolution $const2 	%argrw{"wrr"}
	neq		$tmp74 $tmp73 $const2 	%argrw{"wrr"}
	assign		$tmp72 $tmp74 	%argrw{"wr"}
	if		$tmp72 314 314 	%argrw{"r"}
# PxrNormalMap.osl:335
#             PxrTxMipControls(mipBias, maxResolution, txcoords, txparams);
	functioncall	$const37 314 	%line{335} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:283
#     float bias = (mipBias != 0) ? pow(2.0, mipBias) : 1.0;
	neq		$tmp75 mipBias $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{283} %argrw{"wrr"}
	if		$tmp75 252 253 	%argrw{"r"}
	assign		$tmp76 mipBias 	%argrw{"wr"}
	pow		___460_bias $const38 $tmp76 	%argrw{"wrr"}
	assign		___460_bias $const14 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:284
#     params.width *= bias;
	mul		___528_txparams.width ___528_txparams.width ___460_bias 	%line{284} %argrw{"wrr"}
	assign		___528_txparams.width ___528_txparams.width 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:286
#     if (maxResolution > 0)
	gt		$tmp77 maxResolution $const2 	%line{286} %argrw{"wrr"}
	if		$tmp77 314 314 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:290
#         float minwidth = 1.0 / maxResolution;
	div		___461_minwidth $const14 maxResolution 	%line{290} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:293
#         adjust_width(params.width, coords);
	functioncall	$const39 299 	%line{293} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:250
#     coords.dsdx *= width;
	mul		___528_txcoords.dsdx ___528_txcoords.dsdx ___528_txparams.width 	%line{250} %argrw{"wrr"}
	assign		___528_txcoords.dsdx ___528_txcoords.dsdx 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:251
#     coords.dtdx *= width;
	mul		___528_txcoords.dtdx ___528_txcoords.dtdx ___528_txparams.width 	%line{251} %argrw{"wrr"}
	assign		___528_txcoords.dtdx ___528_txcoords.dtdx 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:252
#     coords.dsdy *= width;
	mul		___528_txcoords.dsdy ___528_txcoords.dsdy ___528_txparams.width 	%line{252} %argrw{"wrr"}
	assign		___528_txcoords.dsdy ___528_txcoords.dsdy 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:253
#     coords.dtdy *= width;
	mul		___528_txcoords.dtdy ___528_txcoords.dtdy ___528_txparams.width 	%line{253} %argrw{"wrr"}
	assign		___528_txcoords.dtdy ___528_txcoords.dtdy 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:256
#     float eps = 1.0e-8, eps2 = eps*eps;
	assign		___455_eps $const40 	%line{256} %argrw{"wr"}
	mul		___455_eps2 ___455_eps ___455_eps 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:257
#     float dxlen2 = coords.dsdx * coords.dsdx + coords.dtdx * coords.dtdx;
	mul		$tmp78 ___528_txcoords.dsdx ___528_txcoords.dsdx 	%line{257} %argrw{"wrr"}
	mul		$tmp79 ___528_txcoords.dtdx ___528_txcoords.dtdx 	%argrw{"wrr"}
	add		___455_dxlen2 $tmp78 $tmp79 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:258
#     float dylen2 = coords.dsdy * coords.dsdy + coords.dtdy * coords.dtdy;
	mul		$tmp80 ___528_txcoords.dsdy ___528_txcoords.dsdy 	%line{258} %argrw{"wrr"}
	mul		$tmp81 ___528_txcoords.dtdy ___528_txcoords.dtdy 	%argrw{"wrr"}
	add		___455_dylen2 $tmp80 $tmp81 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:259
#     if (dxlen2 < eps2) {   // Tiny dx
	lt		$tmp82 ___455_dxlen2 ___455_eps2 	%line{259} %argrw{"wrr"}
	if		$tmp82 290 299 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:260
#         if (dylen2 < eps2) {
	lt		$tmp83 ___455_dylen2 ___455_eps2 	%line{260} %argrw{"wrr"}
	if		$tmp83 283 290 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:262
#             coords.dsdx = eps; coords.dsdy = 0;
	assign		___528_txcoords.dsdx ___455_eps 	%line{262} %argrw{"wr"}
	assign		___528_txcoords.dsdy $const15 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:263
#             coords.dtdx = 0; coords.dtdy = eps;
	assign		___528_txcoords.dtdx $const15 	%line{263} %argrw{"wr"}
	assign		___528_txcoords.dtdy ___455_eps 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:266
#             float scale = eps / sqrt(dylen2);
	sqrt		$tmp84 ___455_dylen2 	%line{266} %argrw{"wr"}
	div		___458_scale ___455_eps $tmp84 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:267
#             coords.dsdx = coords.dtdy * scale;
	mul		___528_txcoords.dsdx ___528_txcoords.dtdy ___458_scale 	%line{267} %argrw{"wrr"}
	assign		___528_txcoords.dsdx ___528_txcoords.dsdx 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:268
#             coords.dtdx = -coords.dsdy * scale;
	neg		$tmp85 ___528_txcoords.dsdy 	%line{268} %argrw{"wr"}
	mul		___528_txcoords.dtdx $tmp85 ___458_scale 	%argrw{"wrr"}
	assign		___528_txcoords.dtdx ___528_txcoords.dtdx 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:270
#     } else if (dylen2 < eps2) {
	lt		$tmp86 ___455_dylen2 ___455_eps2 	%line{270} %argrw{"wrr"}
	if		$tmp86 299 299 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:272
#         float scale = eps / sqrt(dxlen2);
	sqrt		$tmp87 ___455_dxlen2 	%line{272} %argrw{"wr"}
	div		___459_scale ___455_eps $tmp87 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:273
#         coords.dsdy = -coords.dtdx * scale;
	neg		$tmp88 ___528_txcoords.dtdx 	%line{273} %argrw{"wr"}
	mul		___528_txcoords.dsdy $tmp88 ___459_scale 	%argrw{"wrr"}
	assign		___528_txcoords.dsdy ___528_txcoords.dsdy 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:274
#         coords.dtdy = coords.dsdx * scale;
	mul		___528_txcoords.dtdy ___528_txcoords.dsdx ___459_scale 	%line{274} %argrw{"wrr"}
	assign		___528_txcoords.dtdy ___528_txcoords.dtdy 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:297
#         float swidth = max(abs(coords.dsdx), abs(coords.dsdy));
	abs		$tmp89 ___528_txcoords.dsdx 	%line{297} %argrw{"wr"}
	abs		$tmp90 ___528_txcoords.dsdy 	%argrw{"wr"}
	max		___461_swidth $tmp89 $tmp90 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:298
#         float twidth = max(abs(coords.dtdx), abs(coords.dtdy));
	abs		$tmp91 ___528_txcoords.dtdx 	%line{298} %argrw{"wr"}
	abs		$tmp92 ___528_txcoords.dtdy 	%argrw{"wr"}
	max		___461_twidth $tmp91 $tmp92 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:299
#         int conservative_filter = 0;
	assign		___461_conservative_filter $const2 	%line{299} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:300
#         getattribute("context", "reyesGrid", conservative_filter);  // 1 if displ. shading, 0 if ray hit
	getattribute	$tmp93 $const41 $const42 ___461_conservative_filter 	%line{300} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:301
#         float filterwidth = conservative_filter ? max(swidth, twidth)
	if		___461_conservative_filter 309 310 	%line{301} %argrw{"r"}
	max		___461_filterwidth ___461_swidth ___461_twidth 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:302
#                                                 : min(swidth, twidth);
	min		___461_filterwidth ___461_swidth ___461_twidth 	%line{302} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:305
#         filterwidth += params.blur;
	add		___461_filterwidth ___461_filterwidth ___528_txparams.blur 	%line{305} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:308
#         filterwidth = max(filterwidth, minwidth);
	max		___461_filterwidth ___461_filterwidth ___461_minwidth 	%line{308} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:310
#         coords.blur = filterwidth;  // coords.blur now specifies the texture lookup filter width
	assign		___528_txcoords.blur ___461_filterwidth 	%line{310} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:311
#         params.width = 0.0;  // set multiplier on derivatives to 0 so that only blur determines filter width
	assign		___528_txparams.width $const15 	%line{311} %argrw{"wr"}
# PxrNormalMap.osl:336
#         tbn = PxrTextureLookup(finalFilename, txcoords, txparams);
	functioncall	$const43 345 	%filename{"PxrNormalMap.osl"} %line{336} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:325
#     int success = 0;
	assign		___463_success $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h"} %line{325} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:326
#     int nchannels = 0;
	assign		___463_nchannels $const2 	%line{326} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:327
#     color finalResult = 0;
	assign		___463_finalResult $const2 	%line{327} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:333
#                            "blur", max(coords.blur, params.blur),
	max		$tmp94 ___528_txcoords.blur ___528_txparams.blur 	%line{333} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:329
#     color result = texture(filename,
	texture		___463_result finalFilename ___528_txcoords.s ___528_txcoords.t ___528_txcoords.dsdx ___528_txcoords.dtdx ___528_txcoords.dsdy ___528_txcoords.dtdy $const44 ___528_txparams.firstchannel $const45 $tmp94 $const46 ___528_txparams.missingcolor $const47 ___528_txparams.interp $const48 ___528_txparams.width 	%line{329} %argrw{"wrrrrrrrrrrrrrrrrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:339
#     if (result == params.missingcolor) return result;
	eq		$tmp95 ___463_result ___528_txparams.missingcolor 	%line{339} %argrw{"wrr"}
	if		$tmp95 324 324 	%argrw{"r"}
	assign		tbn ___463_result 	%argrw{"wr"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:342
#     finalResult = result;
	assign		___463_finalResult ___463_result 	%line{342} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:345
#     success = gettextureinfo(filename, "channels", nchannels);
	gettextureinfo	___463_success finalFilename $const49 ___463_nchannels 	%line{345} %argrw{"wrrw"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:346
#     if (success && nchannels)
	neq		$tmp96 ___463_success $const2 	%line{346} %argrw{"wrr"}
	if		$tmp96 330 330 	%argrw{"r"}
	neq		$tmp97 ___463_nchannels $const2 	%argrw{"wrr"}
	assign		$tmp96 $tmp97 	%argrw{"wr"}
	if		$tmp96 344 344 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:348
#         if (nchannels == 1 || nchannels == 2)
	eq		$tmp98 ___463_nchannels $const7 	%line{348} %argrw{"wrr"}
	neq		$tmp99 $tmp98 $const2 	%argrw{"wrr"}
	if		$tmp99 334 337 	%argrw{"r"}
	eq		$tmp100 ___463_nchannels $const6 	%argrw{"wrr"}
	neq		$tmp101 $tmp100 $const2 	%argrw{"wrr"}
	assign		$tmp99 $tmp101 	%argrw{"wr"}
	if		$tmp99 344 344 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:351
#             finalResult[0] = result[0];
	compref		$tmp102 ___463_result $const2 	%line{351} %argrw{"wrr"}
	compassign	___463_finalResult $const2 $tmp102 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:352
#             finalResult[1] = result[0];
	compref		$tmp103 ___463_result $const2 	%line{352} %argrw{"wrr"}
	compassign	___463_finalResult $const7 $tmp103 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:353
#             finalResult[2] = result[0];
	compref		$tmp104 ___463_result $const2 	%line{353} %argrw{"wrr"}
	compassign	___463_finalResult $const6 $tmp104 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/PxrOSLTexture.h:357
#     return finalResult;
	assign		tbn ___463_finalResult 	%line{357} %argrw{"wr"}
# PxrNormalMap.osl:341
#         tbn = inputRGB;
	assign		tbn inputRGB 	%filename{"PxrNormalMap.osl"} %line{341} %argrw{"wr"}
# PxrNormalMap.osl:345
#     color tsNormal = tbn * 2.0 - 1.0;
	mul		$tmp105 tbn $const38 	%line{345} %argrw{"wrr"}
	sub		tsNormal $tmp105 $const14 	%argrw{"wrr"}
# PxrNormalMap.osl:348
#     if (orientation == k_opengl)
	eq		$tmp106 orientation $const2 	%line{348} %argrw{"wrr"}
	if		$tmp106 353 369 	%argrw{"r"}
# PxrNormalMap.osl:350
#         tsNormal[0] = -tsNormal[0];
	compref		$tmp107 tsNormal $const2 	%line{350} %argrw{"wrr"}
	neg		$tmp108 $tmp107 	%argrw{"wr"}
	compassign	tsNormal $const2 $tmp108 	%argrw{"wrr"}
# PxrNormalMap.osl:352
#     else if (orientation == k_directx)
	eq		$tmp109 orientation $const7 	%line{352} %argrw{"wrr"}
	if		$tmp109 361 369 	%argrw{"r"}
# PxrNormalMap.osl:354
#         tsNormal[0] = -tsNormal[0];
	compref		$tmp110 tsNormal $const2 	%line{354} %argrw{"wrr"}
	neg		$tmp111 $tmp110 	%argrw{"wr"}
	compassign	tsNormal $const2 $tmp111 	%argrw{"wrr"}
# PxrNormalMap.osl:355
#         tsNormal[1] = -tsNormal[1];
	compref		$tmp112 tsNormal $const7 	%line{355} %argrw{"wrr"}
	neg		$tmp113 $tmp112 	%argrw{"wr"}
	compassign	tsNormal $const7 $tmp113 	%argrw{"wrr"}
# PxrNormalMap.osl:359
#         if (flipX)
	if		flipX 365 365 	%line{359} %argrw{"r"}
# PxrNormalMap.osl:360
#             tsNormal[0] = -tsNormal[0];
	compref		$tmp114 tsNormal $const2 	%line{360} %argrw{"wrr"}
	neg		$tmp115 $tmp114 	%argrw{"wr"}
	compassign	tsNormal $const2 $tmp115 	%argrw{"wrr"}
# PxrNormalMap.osl:361
#         if (flipY)
	if		flipY 369 369 	%line{361} %argrw{"r"}
# PxrNormalMap.osl:362
#             tsNormal[1] = -tsNormal[1];
	compref		$tmp116 tsNormal $const7 	%line{362} %argrw{"wrr"}
	neg		$tmp117 $tmp116 	%argrw{"wr"}
	compassign	tsNormal $const7 $tmp117 	%argrw{"wrr"}
# PxrNormalMap.osl:367
#     if (!getattribute("primvar", "Tn", Tn))
	getattribute	$tmp118 $const28 $const50 Tn 	%line{367} %argrw{"wrrw"}
	eq		$tmp119 $tmp118 $const2 	%argrw{"wrr"}
	if		$tmp119 373 373 	%argrw{"r"}
# PxrNormalMap.osl:369
#         getattribute("builtin", "Tn", Tn);
	getattribute	$tmp120 $const16 $const50 Tn 	%line{369} %argrw{"wrrw"}
# PxrNormalMap.osl:372
#     if (!getattribute("primvar", "Bn", Bn))
	getattribute	$tmp121 $const28 $const51 Bn 	%line{372} %argrw{"wrrw"}
	eq		$tmp122 $tmp121 $const2 	%argrw{"wrr"}
	if		$tmp122 377 377 	%argrw{"r"}
# PxrNormalMap.osl:374
#         Bn = cross(Nin, Tn);
	cross		Bn Nin Tn 	%line{374} %argrw{"wrr"}
# PxrNormalMap.osl:377
#     vector grad = SurfgradFromTBN(TspaceNormalToDerivative(tsNormal), Tn, Bn);
	functioncall	$const52 404 	%line{377} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:76
# 	float scale = 1.0 / 128.0;
	assign		___499_scale $const53 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{76} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:80
# 	color vMa = abs(vM);
	abs		___499_vMa tsNormal 	%line{80} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:81
# 	float z_ma = max(vMa[2], scale * max(vMa[0], vMa[1]));
	compref		$tmp124 ___499_vMa $const6 	%line{81} %argrw{"wrr"}
	compref		$tmp126 ___499_vMa $const2 	%argrw{"wrr"}
	compref		$tmp127 ___499_vMa $const7 	%argrw{"wrr"}
	max		$tmp125 $tmp126 $tmp127 	%argrw{"wrr"}
	mul		$tmp128 ___499_scale $tmp125 	%argrw{"wrr"}
	max		___499_z_ma $tmp124 $tmp128 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:84
# 	int gFlipVertDeriv = 1;
	assign		___499_gFlipVertDeriv $const7 	%line{84} %argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:85
# 	float s = gFlipVertDeriv ? -1.0 : 1.0;
	if		___499_gFlipVertDeriv 389 390 	%line{85} %argrw{"r"}
	assign		___499_s $const54 	%argrw{"wr"}
	assign		___499_s $const14 	%argrw{"wr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	compref		$tmp130.x tsNormal $const2 	%line{86} %argrw{"wrr"}
	compref		$tmp131 tsNormal $const7 	%argrw{"wrr"}
	mul		$tmp130.y ___499_s $tmp131 	%argrw{"wrr"}
# PxrNormalMap.osl:395
# 
	functioncall	$const55 396 	%filename{"PxrNormalMap.osl"} %line{395} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/float2.h:55
#     return float2(-a.x, -a.y);
	neg		$tmp129.x $tmp130.x 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{55} %argrw{"wr"}
	neg		$tmp129.y $tmp130.y 	%argrw{"wr"}
# PxrNormalMap.osl:395
# 
	functioncall	$const56 403 	%filename{"PxrNormalMap.osl"} %line{395} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/float2.h:146
#     float b_inv = 1.0/b;
	div		___492_b_inv $const14 ___499_z_ma 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{146} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/float2.h:147
#     return a * float2(b_inv, b_inv);
	assign		$tmp132.x ___492_b_inv 	%line{147} %argrw{"wr"}
	assign		$tmp132.y ___492_b_inv 	%argrw{"wr"}
# PxrNormalMap.osl:395
# 
	functioncall	$const57 403 	%filename{"PxrNormalMap.osl"} %line{395} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/float2.h:110
#     return float2(a.x * b.x, a.y * b.y);
	mul		$tmp123.x $tmp129.x $tmp132.x 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/float2.h"} %line{110} %argrw{"wrr"}
	mul		$tmp123.y $tmp129.y $tmp132.y 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:86
# 	return -float2(vM[0], s * vM[1]) / z_ma;
	return	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{86}
# PxrNormalMap.osl:377
#     vector grad = SurfgradFromTBN(TspaceNormalToDerivative(tsNormal), Tn, Bn);
	functioncall	$const58 408 	%filename{"PxrNormalMap.osl"} %line{377} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:92
#     return deriv.x * vT + deriv.y * vB;
	mul		$tmp133 $tmp123.x Tn 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{92} %argrw{"wrr"}
	mul		$tmp134 $tmp123.y Bn 	%argrw{"wrr"}
	add		grad $tmp133 $tmp134 	%argrw{"wrr"}
# PxrNormalMap.osl:378
#     grad *= bumpScale * bumpFade * (invertBump ? -1.0 : 1.0);
	mul		$tmp135 bumpScale bumpFade 	%filename{"PxrNormalMap.osl"} %line{378} %argrw{"wrr"}
	if		invertBump 411 412 	%argrw{"r"}
	assign		$tmp136 $const54 	%argrw{"wr"}
	assign		$tmp136 $const14 	%argrw{"wr"}
	mul		$tmp137 $tmp135 $tmp136 	%argrw{"wrr"}
	mul		grad grad $tmp137 	%argrw{"wrr"}
# PxrNormalMap.osl:380
#     resultN = resolveNormalFromSurfaceGradient(grad, -1, Nin);
	functioncall	$const60 418 	%line{380} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:110
#     return normalize(Nn - resolveSign * surfGrad);
	mul		$tmp138 $const54 grad 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{110} %argrw{"wrr"}
	sub		$tmp139 Nin $tmp138 	%argrw{"wrr"}
	normalize	resultN $tmp139 	%argrw{"wr"}
# PxrNormalMap.osl:382
#     if (reverse)
	if		reverse 420 420 	%filename{"PxrNormalMap.osl"} %line{382} %argrw{"r"}
# PxrNormalMap.osl:383
#         resultN = -resultN;
	neg		resultN resultN 	%line{383} %argrw{"wr"}
# PxrNormalMap.osl:386
#     vector Vn = normalize(-I);
	neg		$tmp140 I 	%line{386} %argrw{"wr"}
	normalize	Vn $tmp140 	%argrw{"wr"}
# PxrNormalMap.osl:387
#     RixAdjustNormal(adjustAmount, Vn, Ng, resultN);
	functioncall	$const61 437 	%line{387} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:198
#     if (amount == 0) return;
	eq		$tmp141 adjustAmount $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{198} %argrw{"wrr"}
	if		$tmp141 426 426 	%argrw{"r"}
	return
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:200
#     if (dot(Vn, Ngn) >= 0)
	dot		$tmp142 Vn Ng 	%line{200} %argrw{"wrr"}
	ge		$tmp143 $tmp142 $const2 	%argrw{"wrr"}
	if		$tmp143 437 437 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:202
#         float VdotN = dot(Vn, Nn);
	dot		___513_VdotN Vn resultN 	%line{202} %argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:203
#         if (VdotN <= 0)
	le		$tmp144 ___513_VdotN $const2 	%line{203} %argrw{"wrr"}
	if		$tmp144 437 437 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:207
#             Nn -= amount * 1.01 * VdotN * Vn;
	mul		$tmp145 adjustAmount $const62 	%line{207} %argrw{"wrr"}
	mul		$tmp146 $tmp145 ___513_VdotN 	%argrw{"wrr"}
	mul		$tmp147 $tmp146 Vn 	%argrw{"wrr"}
	sub		resultN resultN $tmp147 	%argrw{"wrr"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:208
#             Nn = normalize(Nn);
	normalize	resultN resultN 	%line{208} %argrw{"wr"}
# PxrNormalMap.osl:388
#     RixBlendWithNormal(surfaceNormalMix, Nin, resultN);
	functioncall	$const63 442 	%filename{"PxrNormalMap.osl"} %line{388} %argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:215
#     if (surfaceNormalMix > 0)
	gt		$tmp148 surfaceNormalMix $const2 	%filename{"/Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h"} %line{215} %argrw{"wrr"}
	if		$tmp148 442 442 	%argrw{"r"}
# /Users/Shared/build/ratbuild/rmanshare/RIS/include/osl/Bump.h:216
#         bumpN = normalize(mix(bumpN, Nn, surfaceNormalMix));
	mix		$tmp149 resultN Nin surfaceNormalMix 	%line{216} %argrw{"wrrr"}
	normalize	resultN $tmp149 	%argrw{"wr"}
# PxrNormalMap.osl:390
#     if (isconnected(resultNG))
	isconnected	$tmp150 resultNG 	%filename{"PxrNormalMap.osl"} %line{390} %argrw{"wr"}
	if		$tmp150 445 445 	%argrw{"r"}
# PxrNormalMap.osl:392
#         resultNG = grad;
	assign		resultNG grad 	%line{392} %argrw{"wr"}
	end
